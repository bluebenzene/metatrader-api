# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from mt5grpc import mt5_pb2 as mt5grpc_dot_mt5__pb2


class ConnectionStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Connect = channel.unary_unary(
                '/mt5grpc.Connection/Connect',
                request_serializer=mt5grpc_dot_mt5__pb2.ConnectRequest.SerializeToString,
                response_deserializer=mt5grpc_dot_mt5__pb2.ConnectReply.FromString,
                )
        self.ConnectProxy = channel.unary_unary(
                '/mt5grpc.Connection/ConnectProxy',
                request_serializer=mt5grpc_dot_mt5__pb2.ConnectProxyRequest.SerializeToString,
                response_deserializer=mt5grpc_dot_mt5__pb2.ConnectProxyReply.FromString,
                )
        self.CheckConnect = channel.unary_unary(
                '/mt5grpc.Connection/CheckConnect',
                request_serializer=mt5grpc_dot_mt5__pb2.CheckConnectRequest.SerializeToString,
                response_deserializer=mt5grpc_dot_mt5__pb2.CheckConnectReply.FromString,
                )
        self.Disconnect = channel.unary_unary(
                '/mt5grpc.Connection/Disconnect',
                request_serializer=mt5grpc_dot_mt5__pb2.DisconnectRequest.SerializeToString,
                response_deserializer=mt5grpc_dot_mt5__pb2.DisconnectReply.FromString,
                )


class ConnectionServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Connect(self, request, context):
        """Connect to account with user, password, host, port.
        <br> [Example] <br>
        { <br>
        "user": "62333850", <br>
        "password": "tecimil4", <br>
        "host": "78.140.180.198", <br>
        "port": "443" <br>
        }
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConnectProxy(self, request, context):
        """Connect to account with user, password, host, port.
        <br> [Example] <br>
        { <br>
        "user": "62333850", <br>
        "password": "tecimil4", <br>
        "host": "78.140.180.198", <br>
        "port": "443", <br>
        "proxyUser": "ProxyUser123", <br>
        "proxyPassword": "qwerty123", <br>
        "proxyHost": "65.108.126.217", <br>
        "proxyPort": "1080", <br>
        "proxyType": "Socks5" <br>
        }
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckConnect(self, request, context):
        """Check connection state and reconnect if connection lost
        <br> [Example] <br>
        { <br>
        "id": "demo-token-mt5" <br>
        }
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Disconnect(self, request, context):
        """Disconnect from account
        <br> [Example] <br>
        { <br>
        "id": "" <br>
        }
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ConnectionServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Connect': grpc.unary_unary_rpc_method_handler(
                    servicer.Connect,
                    request_deserializer=mt5grpc_dot_mt5__pb2.ConnectRequest.FromString,
                    response_serializer=mt5grpc_dot_mt5__pb2.ConnectReply.SerializeToString,
            ),
            'ConnectProxy': grpc.unary_unary_rpc_method_handler(
                    servicer.ConnectProxy,
                    request_deserializer=mt5grpc_dot_mt5__pb2.ConnectProxyRequest.FromString,
                    response_serializer=mt5grpc_dot_mt5__pb2.ConnectProxyReply.SerializeToString,
            ),
            'CheckConnect': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckConnect,
                    request_deserializer=mt5grpc_dot_mt5__pb2.CheckConnectRequest.FromString,
                    response_serializer=mt5grpc_dot_mt5__pb2.CheckConnectReply.SerializeToString,
            ),
            'Disconnect': grpc.unary_unary_rpc_method_handler(
                    servicer.Disconnect,
                    request_deserializer=mt5grpc_dot_mt5__pb2.DisconnectRequest.FromString,
                    response_serializer=mt5grpc_dot_mt5__pb2.DisconnectReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mt5grpc.Connection', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Connection(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Connect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mt5grpc.Connection/Connect',
            mt5grpc_dot_mt5__pb2.ConnectRequest.SerializeToString,
            mt5grpc_dot_mt5__pb2.ConnectReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConnectProxy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mt5grpc.Connection/ConnectProxy',
            mt5grpc_dot_mt5__pb2.ConnectProxyRequest.SerializeToString,
            mt5grpc_dot_mt5__pb2.ConnectProxyReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CheckConnect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mt5grpc.Connection/CheckConnect',
            mt5grpc_dot_mt5__pb2.CheckConnectRequest.SerializeToString,
            mt5grpc_dot_mt5__pb2.CheckConnectReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Disconnect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mt5grpc.Connection/Disconnect',
            mt5grpc_dot_mt5__pb2.DisconnectRequest.SerializeToString,
            mt5grpc_dot_mt5__pb2.DisconnectReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class MT5Stub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AccountSummary = channel.unary_unary(
                '/mt5grpc.MT5/AccountSummary',
                request_serializer=mt5grpc_dot_mt5__pb2.AccountSummaryRequest.SerializeToString,
                response_deserializer=mt5grpc_dot_mt5__pb2.AccountSummaryReply.FromString,
                )
        self.OpenedOrders = channel.unary_unary(
                '/mt5grpc.MT5/OpenedOrders',
                request_serializer=mt5grpc_dot_mt5__pb2.OpenedOrdersRequest.SerializeToString,
                response_deserializer=mt5grpc_dot_mt5__pb2.OpenedOrdersReply.FromString,
                )
        self.OrderHistory = channel.unary_unary(
                '/mt5grpc.MT5/OrderHistory',
                request_serializer=mt5grpc_dot_mt5__pb2.OrderHistoryRequest.SerializeToString,
                response_deserializer=mt5grpc_dot_mt5__pb2.OrderHistoryReply.FromString,
                )
        self.Symbols = channel.unary_unary(
                '/mt5grpc.MT5/Symbols',
                request_serializer=mt5grpc_dot_mt5__pb2.SymbolsRequest.SerializeToString,
                response_deserializer=mt5grpc_dot_mt5__pb2.SymbolsReply.FromString,
                )
        self.GetQuote = channel.unary_unary(
                '/mt5grpc.MT5/GetQuote',
                request_serializer=mt5grpc_dot_mt5__pb2.GetQuoteRequest.SerializeToString,
                response_deserializer=mt5grpc_dot_mt5__pb2.GetQuoteReply.FromString,
                )
        self.GetQuoteMany = channel.unary_unary(
                '/mt5grpc.MT5/GetQuoteMany',
                request_serializer=mt5grpc_dot_mt5__pb2.GetQuoteManyRequest.SerializeToString,
                response_deserializer=mt5grpc_dot_mt5__pb2.GetQuoteManyReply.FromString,
                )
        self.SymbolParams = channel.unary_unary(
                '/mt5grpc.MT5/SymbolParams',
                request_serializer=mt5grpc_dot_mt5__pb2.SymbolParamsRequest.SerializeToString,
                response_deserializer=mt5grpc_dot_mt5__pb2.SymbolParamsReply.FromString,
                )
        self.SymbolParamsMany = channel.unary_unary(
                '/mt5grpc.MT5/SymbolParamsMany',
                request_serializer=mt5grpc_dot_mt5__pb2.SymbolParamsManyRequest.SerializeToString,
                response_deserializer=mt5grpc_dot_mt5__pb2.SymbolParamsManyReply.FromString,
                )
        self.ServerTimezone = channel.unary_unary(
                '/mt5grpc.MT5/ServerTimezone',
                request_serializer=mt5grpc_dot_mt5__pb2.ServerTimezoneRequest.SerializeToString,
                response_deserializer=mt5grpc_dot_mt5__pb2.ServerTimezoneReply.FromString,
                )
        self.IsTradeSession = channel.unary_unary(
                '/mt5grpc.MT5/IsTradeSession',
                request_serializer=mt5grpc_dot_mt5__pb2.IsTradeSessionRequest.SerializeToString,
                response_deserializer=mt5grpc_dot_mt5__pb2.IsTradeSessionReply.FromString,
                )
        self.IsTradeSessionMany = channel.unary_unary(
                '/mt5grpc.MT5/IsTradeSessionMany',
                request_serializer=mt5grpc_dot_mt5__pb2.IsTradeSessionManyRequest.SerializeToString,
                response_deserializer=mt5grpc_dot_mt5__pb2.IsTradeSessionManyReply.FromString,
                )
        self.IsQuoteSession = channel.unary_unary(
                '/mt5grpc.MT5/IsQuoteSession',
                request_serializer=mt5grpc_dot_mt5__pb2.IsQuoteSessionRequest.SerializeToString,
                response_deserializer=mt5grpc_dot_mt5__pb2.IsQuoteSessionReply.FromString,
                )
        self.IsQuoteSessionMany = channel.unary_unary(
                '/mt5grpc.MT5/IsQuoteSessionMany',
                request_serializer=mt5grpc_dot_mt5__pb2.IsQuoteSessionManyRequest.SerializeToString,
                response_deserializer=mt5grpc_dot_mt5__pb2.IsQuoteSessionManyReply.FromString,
                )
        self.GetTickValueMany = channel.unary_unary(
                '/mt5grpc.MT5/GetTickValueMany',
                request_serializer=mt5grpc_dot_mt5__pb2.GetTickValueManyRequest.SerializeToString,
                response_deserializer=mt5grpc_dot_mt5__pb2.GetTickValueManyReply.FromString,
                )


class MT5Servicer(object):
    """Missing associated documentation comment in .proto file."""

    def AccountSummary(self, request, context):
        """Balance, Equity, Currency, FreeMargin, Margin, MarginLevel, Profit, Leverage, Credit
        <br> [Example] <br>
        { <br>
        "id": "demo-token-mt5" <br>
        }
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OpenedOrders(self, request, context):
        """List of opened orders
        <br> [Example] <br>
        { <br>
        "id": "" <br>
        }
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OrderHistory(self, request, context):
        """Order history
        <br> [Example] <br>
        { <br>
        "id": "demo-token-mt5", <br>
        "from": "2022-01-01T00:00:00", <br>
        "to": "2022-09-01T00:00:00" <br>
        }
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Symbols(self, request, context):
        """List of avaliable symbols
        <br> [Example] <br>
        { <br>
        "id": "" <br>
        }
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetQuote(self, request, context):
        """Lot of informationabout about acocount. Can stuck swagger because of long json. You can use filter to reduce data.
        <br> [Example] <br>
        { <br>
        "id": "demo-token-mt5", <br>
        "symbol": "EURUSD" <br>
        }
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetQuoteMany(self, request, context):
        """Latest quote for the specified symbol
        <br> [Example] <br>
        { <br>
        "id": "demo-token-mt5" <br>
        }
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SymbolParams(self, request, context):
        """Full infromation about symbol and his group
        <br> [Example] <br>
        { <br>
        "id": "demo-token-mt5", <br>
        "symbol": "EURUSD" <br>
        }
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SymbolParamsMany(self, request, context):
        """Full infromation about symbol and his group for several symbols
        <br> [Example] <br>
        { <br>
        "id": "demo-token-mt5", <br>
        "limit": "10000" <br>
        }
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ServerTimezone(self, request, context):
        """Server timezone.
        <br> [Example] <br>
        { <br>
        "id": "" <br>
        }
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IsTradeSession(self, request, context):
        """Check market open or not for specified symbol.
        <br> [Example] <br>
        { <br>
        "id": "demo-token-mt5", <br>
        "symbol": "EURUSD" <br>
        }
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IsTradeSessionMany(self, request, context):
        """Check market open or not for specified symbol.
        <br> [Example] <br>
        { <br>
        "id": "demo-token-mt5" <br>
        }
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IsQuoteSession(self, request, context):
        """Check market open or not for specified symbol.
        <br> [Example] <br>
        { <br>
        "id": "demo-token-mt5", <br>
        "symbol": "EURUSD" <br>
        }
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IsQuoteSessionMany(self, request, context):
        """Check market open or not for specified symbol.
        <br> [Example] <br>
        { <br>
        "id": "demo-token-mt5" <br>
        }
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTickValueMany(self, request, context):
        """Tick value.
        <br> [Example] <br>
        { <br>
        "id": "demo-token-mt5" <br>
        }
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MT5Servicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AccountSummary': grpc.unary_unary_rpc_method_handler(
                    servicer.AccountSummary,
                    request_deserializer=mt5grpc_dot_mt5__pb2.AccountSummaryRequest.FromString,
                    response_serializer=mt5grpc_dot_mt5__pb2.AccountSummaryReply.SerializeToString,
            ),
            'OpenedOrders': grpc.unary_unary_rpc_method_handler(
                    servicer.OpenedOrders,
                    request_deserializer=mt5grpc_dot_mt5__pb2.OpenedOrdersRequest.FromString,
                    response_serializer=mt5grpc_dot_mt5__pb2.OpenedOrdersReply.SerializeToString,
            ),
            'OrderHistory': grpc.unary_unary_rpc_method_handler(
                    servicer.OrderHistory,
                    request_deserializer=mt5grpc_dot_mt5__pb2.OrderHistoryRequest.FromString,
                    response_serializer=mt5grpc_dot_mt5__pb2.OrderHistoryReply.SerializeToString,
            ),
            'Symbols': grpc.unary_unary_rpc_method_handler(
                    servicer.Symbols,
                    request_deserializer=mt5grpc_dot_mt5__pb2.SymbolsRequest.FromString,
                    response_serializer=mt5grpc_dot_mt5__pb2.SymbolsReply.SerializeToString,
            ),
            'GetQuote': grpc.unary_unary_rpc_method_handler(
                    servicer.GetQuote,
                    request_deserializer=mt5grpc_dot_mt5__pb2.GetQuoteRequest.FromString,
                    response_serializer=mt5grpc_dot_mt5__pb2.GetQuoteReply.SerializeToString,
            ),
            'GetQuoteMany': grpc.unary_unary_rpc_method_handler(
                    servicer.GetQuoteMany,
                    request_deserializer=mt5grpc_dot_mt5__pb2.GetQuoteManyRequest.FromString,
                    response_serializer=mt5grpc_dot_mt5__pb2.GetQuoteManyReply.SerializeToString,
            ),
            'SymbolParams': grpc.unary_unary_rpc_method_handler(
                    servicer.SymbolParams,
                    request_deserializer=mt5grpc_dot_mt5__pb2.SymbolParamsRequest.FromString,
                    response_serializer=mt5grpc_dot_mt5__pb2.SymbolParamsReply.SerializeToString,
            ),
            'SymbolParamsMany': grpc.unary_unary_rpc_method_handler(
                    servicer.SymbolParamsMany,
                    request_deserializer=mt5grpc_dot_mt5__pb2.SymbolParamsManyRequest.FromString,
                    response_serializer=mt5grpc_dot_mt5__pb2.SymbolParamsManyReply.SerializeToString,
            ),
            'ServerTimezone': grpc.unary_unary_rpc_method_handler(
                    servicer.ServerTimezone,
                    request_deserializer=mt5grpc_dot_mt5__pb2.ServerTimezoneRequest.FromString,
                    response_serializer=mt5grpc_dot_mt5__pb2.ServerTimezoneReply.SerializeToString,
            ),
            'IsTradeSession': grpc.unary_unary_rpc_method_handler(
                    servicer.IsTradeSession,
                    request_deserializer=mt5grpc_dot_mt5__pb2.IsTradeSessionRequest.FromString,
                    response_serializer=mt5grpc_dot_mt5__pb2.IsTradeSessionReply.SerializeToString,
            ),
            'IsTradeSessionMany': grpc.unary_unary_rpc_method_handler(
                    servicer.IsTradeSessionMany,
                    request_deserializer=mt5grpc_dot_mt5__pb2.IsTradeSessionManyRequest.FromString,
                    response_serializer=mt5grpc_dot_mt5__pb2.IsTradeSessionManyReply.SerializeToString,
            ),
            'IsQuoteSession': grpc.unary_unary_rpc_method_handler(
                    servicer.IsQuoteSession,
                    request_deserializer=mt5grpc_dot_mt5__pb2.IsQuoteSessionRequest.FromString,
                    response_serializer=mt5grpc_dot_mt5__pb2.IsQuoteSessionReply.SerializeToString,
            ),
            'IsQuoteSessionMany': grpc.unary_unary_rpc_method_handler(
                    servicer.IsQuoteSessionMany,
                    request_deserializer=mt5grpc_dot_mt5__pb2.IsQuoteSessionManyRequest.FromString,
                    response_serializer=mt5grpc_dot_mt5__pb2.IsQuoteSessionManyReply.SerializeToString,
            ),
            'GetTickValueMany': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTickValueMany,
                    request_deserializer=mt5grpc_dot_mt5__pb2.GetTickValueManyRequest.FromString,
                    response_serializer=mt5grpc_dot_mt5__pb2.GetTickValueManyReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mt5grpc.MT5', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MT5(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def AccountSummary(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mt5grpc.MT5/AccountSummary',
            mt5grpc_dot_mt5__pb2.AccountSummaryRequest.SerializeToString,
            mt5grpc_dot_mt5__pb2.AccountSummaryReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OpenedOrders(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mt5grpc.MT5/OpenedOrders',
            mt5grpc_dot_mt5__pb2.OpenedOrdersRequest.SerializeToString,
            mt5grpc_dot_mt5__pb2.OpenedOrdersReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OrderHistory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mt5grpc.MT5/OrderHistory',
            mt5grpc_dot_mt5__pb2.OrderHistoryRequest.SerializeToString,
            mt5grpc_dot_mt5__pb2.OrderHistoryReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Symbols(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mt5grpc.MT5/Symbols',
            mt5grpc_dot_mt5__pb2.SymbolsRequest.SerializeToString,
            mt5grpc_dot_mt5__pb2.SymbolsReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetQuote(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mt5grpc.MT5/GetQuote',
            mt5grpc_dot_mt5__pb2.GetQuoteRequest.SerializeToString,
            mt5grpc_dot_mt5__pb2.GetQuoteReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetQuoteMany(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mt5grpc.MT5/GetQuoteMany',
            mt5grpc_dot_mt5__pb2.GetQuoteManyRequest.SerializeToString,
            mt5grpc_dot_mt5__pb2.GetQuoteManyReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SymbolParams(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mt5grpc.MT5/SymbolParams',
            mt5grpc_dot_mt5__pb2.SymbolParamsRequest.SerializeToString,
            mt5grpc_dot_mt5__pb2.SymbolParamsReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SymbolParamsMany(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mt5grpc.MT5/SymbolParamsMany',
            mt5grpc_dot_mt5__pb2.SymbolParamsManyRequest.SerializeToString,
            mt5grpc_dot_mt5__pb2.SymbolParamsManyReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ServerTimezone(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mt5grpc.MT5/ServerTimezone',
            mt5grpc_dot_mt5__pb2.ServerTimezoneRequest.SerializeToString,
            mt5grpc_dot_mt5__pb2.ServerTimezoneReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def IsTradeSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mt5grpc.MT5/IsTradeSession',
            mt5grpc_dot_mt5__pb2.IsTradeSessionRequest.SerializeToString,
            mt5grpc_dot_mt5__pb2.IsTradeSessionReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def IsTradeSessionMany(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mt5grpc.MT5/IsTradeSessionMany',
            mt5grpc_dot_mt5__pb2.IsTradeSessionManyRequest.SerializeToString,
            mt5grpc_dot_mt5__pb2.IsTradeSessionManyReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def IsQuoteSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mt5grpc.MT5/IsQuoteSession',
            mt5grpc_dot_mt5__pb2.IsQuoteSessionRequest.SerializeToString,
            mt5grpc_dot_mt5__pb2.IsQuoteSessionReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def IsQuoteSessionMany(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mt5grpc.MT5/IsQuoteSessionMany',
            mt5grpc_dot_mt5__pb2.IsQuoteSessionManyRequest.SerializeToString,
            mt5grpc_dot_mt5__pb2.IsQuoteSessionManyReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTickValueMany(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mt5grpc.MT5/GetTickValueMany',
            mt5grpc_dot_mt5__pb2.GetTickValueManyRequest.SerializeToString,
            mt5grpc_dot_mt5__pb2.GetTickValueManyReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Ping = channel.unary_unary(
                '/mt5grpc.Service/Ping',
                request_serializer=mt5grpc_dot_mt5__pb2.PingRequest.SerializeToString,
                response_deserializer=mt5grpc_dot_mt5__pb2.PingReply.FromString,
                )
        self.PingHost = channel.unary_unary(
                '/mt5grpc.Service/PingHost',
                request_serializer=mt5grpc_dot_mt5__pb2.PingHostRequest.SerializeToString,
                response_deserializer=mt5grpc_dot_mt5__pb2.PingHostReply.FromString,
                )
        self.PingHostMany = channel.unary_unary(
                '/mt5grpc.Service/PingHostMany',
                request_serializer=mt5grpc_dot_mt5__pb2.PingHostManyRequest.SerializeToString,
                response_deserializer=mt5grpc_dot_mt5__pb2.PingHostManyReply.FromString,
                )
        self.MemorySnapshot = channel.unary_unary(
                '/mt5grpc.Service/MemorySnapshot',
                request_serializer=mt5grpc_dot_mt5__pb2.MemorySnapshotRequest.SerializeToString,
                response_deserializer=mt5grpc_dot_mt5__pb2.MemorySnapshotReply.FromString,
                )
        self.Search = channel.unary_unary(
                '/mt5grpc.Service/Search',
                request_serializer=mt5grpc_dot_mt5__pb2.SearchRequest.SerializeToString,
                response_deserializer=mt5grpc_dot_mt5__pb2.SearchReply.FromString,
                )
        self.GetClients = channel.unary_unary(
                '/mt5grpc.Service/GetClients',
                request_serializer=mt5grpc_dot_mt5__pb2.GetClientsRequest.SerializeToString,
                response_deserializer=mt5grpc_dot_mt5__pb2.GetClientsReply.FromString,
                )
        self.GetDemo = channel.unary_unary(
                '/mt5grpc.Service/GetDemo',
                request_serializer=mt5grpc_dot_mt5__pb2.GetDemoRequest.SerializeToString,
                response_deserializer=mt5grpc_dot_mt5__pb2.GetDemoReply.FromString,
                )


class ServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Ping(self, request, context):
        """Simple test without parameters
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PingHost(self, request, context):
        """Simple test without parameters
        <br> [Example] <br>
        { <br>
        "host": "", <br>
        "port": "443" <br>
        }
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PingHostMany(self, request, context):
        """Simple test without parameters
        <br> [Example] <br>
        { <br>
        "host": "", <br>
        "port": "" <br>
        }
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MemorySnapshot(self, request, context):
        """Memory snapshot
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Search(self, request, context):
        """Broker search by company name
        <br> [Example] <br>
        { <br>
        "company": "" <br>
        }
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetClients(self, request, context):
        """Return all active with connection state
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDemo(self, request, context):
        """Create demo account
        <br> [Example] <br>
        { <br>
        "host": "", <br>
        "port": "" <br>
        }
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Ping': grpc.unary_unary_rpc_method_handler(
                    servicer.Ping,
                    request_deserializer=mt5grpc_dot_mt5__pb2.PingRequest.FromString,
                    response_serializer=mt5grpc_dot_mt5__pb2.PingReply.SerializeToString,
            ),
            'PingHost': grpc.unary_unary_rpc_method_handler(
                    servicer.PingHost,
                    request_deserializer=mt5grpc_dot_mt5__pb2.PingHostRequest.FromString,
                    response_serializer=mt5grpc_dot_mt5__pb2.PingHostReply.SerializeToString,
            ),
            'PingHostMany': grpc.unary_unary_rpc_method_handler(
                    servicer.PingHostMany,
                    request_deserializer=mt5grpc_dot_mt5__pb2.PingHostManyRequest.FromString,
                    response_serializer=mt5grpc_dot_mt5__pb2.PingHostManyReply.SerializeToString,
            ),
            'MemorySnapshot': grpc.unary_unary_rpc_method_handler(
                    servicer.MemorySnapshot,
                    request_deserializer=mt5grpc_dot_mt5__pb2.MemorySnapshotRequest.FromString,
                    response_serializer=mt5grpc_dot_mt5__pb2.MemorySnapshotReply.SerializeToString,
            ),
            'Search': grpc.unary_unary_rpc_method_handler(
                    servicer.Search,
                    request_deserializer=mt5grpc_dot_mt5__pb2.SearchRequest.FromString,
                    response_serializer=mt5grpc_dot_mt5__pb2.SearchReply.SerializeToString,
            ),
            'GetClients': grpc.unary_unary_rpc_method_handler(
                    servicer.GetClients,
                    request_deserializer=mt5grpc_dot_mt5__pb2.GetClientsRequest.FromString,
                    response_serializer=mt5grpc_dot_mt5__pb2.GetClientsReply.SerializeToString,
            ),
            'GetDemo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDemo,
                    request_deserializer=mt5grpc_dot_mt5__pb2.GetDemoRequest.FromString,
                    response_serializer=mt5grpc_dot_mt5__pb2.GetDemoReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mt5grpc.Service', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Service(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mt5grpc.Service/Ping',
            mt5grpc_dot_mt5__pb2.PingRequest.SerializeToString,
            mt5grpc_dot_mt5__pb2.PingReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PingHost(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mt5grpc.Service/PingHost',
            mt5grpc_dot_mt5__pb2.PingHostRequest.SerializeToString,
            mt5grpc_dot_mt5__pb2.PingHostReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PingHostMany(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mt5grpc.Service/PingHostMany',
            mt5grpc_dot_mt5__pb2.PingHostManyRequest.SerializeToString,
            mt5grpc_dot_mt5__pb2.PingHostManyReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MemorySnapshot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mt5grpc.Service/MemorySnapshot',
            mt5grpc_dot_mt5__pb2.MemorySnapshotRequest.SerializeToString,
            mt5grpc_dot_mt5__pb2.MemorySnapshotReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Search(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mt5grpc.Service/Search',
            mt5grpc_dot_mt5__pb2.SearchRequest.SerializeToString,
            mt5grpc_dot_mt5__pb2.SearchReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetClients(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mt5grpc.Service/GetClients',
            mt5grpc_dot_mt5__pb2.GetClientsRequest.SerializeToString,
            mt5grpc_dot_mt5__pb2.GetClientsReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDemo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mt5grpc.Service/GetDemo',
            mt5grpc_dot_mt5__pb2.GetDemoRequest.SerializeToString,
            mt5grpc_dot_mt5__pb2.GetDemoReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class SubscriptionsStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Subscribe = channel.unary_unary(
                '/mt5grpc.Subscriptions/Subscribe',
                request_serializer=mt5grpc_dot_mt5__pb2.SubscribeRequest.SerializeToString,
                response_deserializer=mt5grpc_dot_mt5__pb2.SubscribeReply.FromString,
                )
        self.SubscribeMany = channel.unary_unary(
                '/mt5grpc.Subscriptions/SubscribeMany',
                request_serializer=mt5grpc_dot_mt5__pb2.SubscribeManyRequest.SerializeToString,
                response_deserializer=mt5grpc_dot_mt5__pb2.SubscribeManyReply.FromString,
                )
        self.UnSubscribe = channel.unary_unary(
                '/mt5grpc.Subscriptions/UnSubscribe',
                request_serializer=mt5grpc_dot_mt5__pb2.UnSubscribeRequest.SerializeToString,
                response_deserializer=mt5grpc_dot_mt5__pb2.UnSubscribeReply.FromString,
                )
        self.UnSubscribeMany = channel.unary_unary(
                '/mt5grpc.Subscriptions/UnSubscribeMany',
                request_serializer=mt5grpc_dot_mt5__pb2.UnSubscribeManyRequest.SerializeToString,
                response_deserializer=mt5grpc_dot_mt5__pb2.UnSubscribeManyReply.FromString,
                )
        self.SubscribeOrderProfit = channel.unary_unary(
                '/mt5grpc.Subscriptions/SubscribeOrderProfit',
                request_serializer=mt5grpc_dot_mt5__pb2.SubscribeOrderProfitRequest.SerializeToString,
                response_deserializer=mt5grpc_dot_mt5__pb2.SubscribeOrderProfitReply.FromString,
                )
        self.SubscribeTickValue = channel.unary_unary(
                '/mt5grpc.Subscriptions/SubscribeTickValue',
                request_serializer=mt5grpc_dot_mt5__pb2.SubscribeTickValueRequest.SerializeToString,
                response_deserializer=mt5grpc_dot_mt5__pb2.SubscribeTickValueReply.FromString,
                )
        self.SubscribeOrderUpdate = channel.unary_unary(
                '/mt5grpc.Subscriptions/SubscribeOrderUpdate',
                request_serializer=mt5grpc_dot_mt5__pb2.SubscribeOrderUpdateRequest.SerializeToString,
                response_deserializer=mt5grpc_dot_mt5__pb2.SubscribeOrderUpdateReply.FromString,
                )


class SubscriptionsServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Subscribe(self, request, context):
        """Subscribe symbol for real time quotes and get results via /events socket connection
        <br> [Example] <br>
        { <br>
        "id": "demo-token-mt5", <br>
        "symbol": "EURUSD", <br>
        "interval": "0" <br>
        }
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeMany(self, request, context):
        """Subscribe symbosl for real time quotes and get results via /events socket connection
        <br> [Example] <br>
        { <br>
        "id": "demo-token-mt5", <br>
        "interval": "0" <br>
        }
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnSubscribe(self, request, context):
        """Unsubscribe symbol for real time quotes and get results via /events socket connection
        <br> [Example] <br>
        { <br>
        "id": "demo-token-mt5", <br>
        "symbol": "EURUSD" <br>
        }
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnSubscribeMany(self, request, context):
        """UnSubscribe symbosls for real time quotes and get results via /events socket connection
        <br> [Example] <br>
        { <br>
        "id": "demo-token-mt5" <br>
        }
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeOrderProfit(self, request, context):
        """Subscribe for order profit updates and get results via /events socket connection
        <br> [Example] <br>
        { <br>
        "id": "demo-token-mt5" <br>
        }
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeTickValue(self, request, context):
        """Subscribe symbol for tick value updates
        <br> [Example] <br>
        { <br>
        "id": "demo-token-mt5", <br>
        "symbol": "EURUSD", <br>
        "interval": "0" <br>
        }
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeOrderUpdate(self, request, context):
        """Subscribe symbol for tick value updates
        <br> [Example] <br>
        { <br>
        "id": "demo-token-mt5" <br>
        }
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SubscriptionsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Subscribe': grpc.unary_unary_rpc_method_handler(
                    servicer.Subscribe,
                    request_deserializer=mt5grpc_dot_mt5__pb2.SubscribeRequest.FromString,
                    response_serializer=mt5grpc_dot_mt5__pb2.SubscribeReply.SerializeToString,
            ),
            'SubscribeMany': grpc.unary_unary_rpc_method_handler(
                    servicer.SubscribeMany,
                    request_deserializer=mt5grpc_dot_mt5__pb2.SubscribeManyRequest.FromString,
                    response_serializer=mt5grpc_dot_mt5__pb2.SubscribeManyReply.SerializeToString,
            ),
            'UnSubscribe': grpc.unary_unary_rpc_method_handler(
                    servicer.UnSubscribe,
                    request_deserializer=mt5grpc_dot_mt5__pb2.UnSubscribeRequest.FromString,
                    response_serializer=mt5grpc_dot_mt5__pb2.UnSubscribeReply.SerializeToString,
            ),
            'UnSubscribeMany': grpc.unary_unary_rpc_method_handler(
                    servicer.UnSubscribeMany,
                    request_deserializer=mt5grpc_dot_mt5__pb2.UnSubscribeManyRequest.FromString,
                    response_serializer=mt5grpc_dot_mt5__pb2.UnSubscribeManyReply.SerializeToString,
            ),
            'SubscribeOrderProfit': grpc.unary_unary_rpc_method_handler(
                    servicer.SubscribeOrderProfit,
                    request_deserializer=mt5grpc_dot_mt5__pb2.SubscribeOrderProfitRequest.FromString,
                    response_serializer=mt5grpc_dot_mt5__pb2.SubscribeOrderProfitReply.SerializeToString,
            ),
            'SubscribeTickValue': grpc.unary_unary_rpc_method_handler(
                    servicer.SubscribeTickValue,
                    request_deserializer=mt5grpc_dot_mt5__pb2.SubscribeTickValueRequest.FromString,
                    response_serializer=mt5grpc_dot_mt5__pb2.SubscribeTickValueReply.SerializeToString,
            ),
            'SubscribeOrderUpdate': grpc.unary_unary_rpc_method_handler(
                    servicer.SubscribeOrderUpdate,
                    request_deserializer=mt5grpc_dot_mt5__pb2.SubscribeOrderUpdateRequest.FromString,
                    response_serializer=mt5grpc_dot_mt5__pb2.SubscribeOrderUpdateReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mt5grpc.Subscriptions', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Subscriptions(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Subscribe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mt5grpc.Subscriptions/Subscribe',
            mt5grpc_dot_mt5__pb2.SubscribeRequest.SerializeToString,
            mt5grpc_dot_mt5__pb2.SubscribeReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeMany(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mt5grpc.Subscriptions/SubscribeMany',
            mt5grpc_dot_mt5__pb2.SubscribeManyRequest.SerializeToString,
            mt5grpc_dot_mt5__pb2.SubscribeManyReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UnSubscribe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mt5grpc.Subscriptions/UnSubscribe',
            mt5grpc_dot_mt5__pb2.UnSubscribeRequest.SerializeToString,
            mt5grpc_dot_mt5__pb2.UnSubscribeReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UnSubscribeMany(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mt5grpc.Subscriptions/UnSubscribeMany',
            mt5grpc_dot_mt5__pb2.UnSubscribeManyRequest.SerializeToString,
            mt5grpc_dot_mt5__pb2.UnSubscribeManyReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeOrderProfit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mt5grpc.Subscriptions/SubscribeOrderProfit',
            mt5grpc_dot_mt5__pb2.SubscribeOrderProfitRequest.SerializeToString,
            mt5grpc_dot_mt5__pb2.SubscribeOrderProfitReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeTickValue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mt5grpc.Subscriptions/SubscribeTickValue',
            mt5grpc_dot_mt5__pb2.SubscribeTickValueRequest.SerializeToString,
            mt5grpc_dot_mt5__pb2.SubscribeTickValueReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeOrderUpdate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mt5grpc.Subscriptions/SubscribeOrderUpdate',
            mt5grpc_dot_mt5__pb2.SubscribeOrderUpdateRequest.SerializeToString,
            mt5grpc_dot_mt5__pb2.SubscribeOrderUpdateReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class TradingStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.OrderSend = channel.unary_unary(
                '/mt5grpc.Trading/OrderSend',
                request_serializer=mt5grpc_dot_mt5__pb2.OrderSendRequest.SerializeToString,
                response_deserializer=mt5grpc_dot_mt5__pb2.OrderSendReply.FromString,
                )
        self.OrderModify = channel.unary_unary(
                '/mt5grpc.Trading/OrderModify',
                request_serializer=mt5grpc_dot_mt5__pb2.OrderModifyRequest.SerializeToString,
                response_deserializer=mt5grpc_dot_mt5__pb2.OrderModifyReply.FromString,
                )
        self.OrderClose = channel.unary_unary(
                '/mt5grpc.Trading/OrderClose',
                request_serializer=mt5grpc_dot_mt5__pb2.OrderCloseRequest.SerializeToString,
                response_deserializer=mt5grpc_dot_mt5__pb2.OrderCloseReply.FromString,
                )


class TradingServicer(object):
    """Missing associated documentation comment in .proto file."""

    def OrderSend(self, request, context):
        """Send market or pending order
        <br> [Example] <br>
        { <br>
        "id": "demo-token-mt5", <br>
        "symbol": "EURUSD", <br>
        "operation": "Buy", <br>
        "volume": "0.1", <br>
        "price": "0", <br>
        "slippage": "0", <br>
        "stoploss": "0", <br>
        "takeprofit": "0", <br>
        "expertID": "0", <br>
        "stopLimitPrice": "0", <br>
        "placedType": "Manually" <br>
        }
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OrderModify(self, request, context):
        """Modify market or pending order
        <br> [Example] <br>
        { <br>
        "id": "demo-token-mt5", <br>
        "ticket": "0", <br>
        "stoploss": "0", <br>
        "takeprofit": "0", <br>
        "price": "0" <br>
        }
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OrderClose(self, request, context):
        """Close market or pending order
        <br> [Example] <br>
        { <br>
        "id": "demo-token-mt5", <br>
        "ticket": "0", <br>
        "lots": "0", <br>
        "price": "0", <br>
        "slippage": "0" <br>
        }
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TradingServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'OrderSend': grpc.unary_unary_rpc_method_handler(
                    servicer.OrderSend,
                    request_deserializer=mt5grpc_dot_mt5__pb2.OrderSendRequest.FromString,
                    response_serializer=mt5grpc_dot_mt5__pb2.OrderSendReply.SerializeToString,
            ),
            'OrderModify': grpc.unary_unary_rpc_method_handler(
                    servicer.OrderModify,
                    request_deserializer=mt5grpc_dot_mt5__pb2.OrderModifyRequest.FromString,
                    response_serializer=mt5grpc_dot_mt5__pb2.OrderModifyReply.SerializeToString,
            ),
            'OrderClose': grpc.unary_unary_rpc_method_handler(
                    servicer.OrderClose,
                    request_deserializer=mt5grpc_dot_mt5__pb2.OrderCloseRequest.FromString,
                    response_serializer=mt5grpc_dot_mt5__pb2.OrderCloseReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mt5grpc.Trading', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Trading(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def OrderSend(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mt5grpc.Trading/OrderSend',
            mt5grpc_dot_mt5__pb2.OrderSendRequest.SerializeToString,
            mt5grpc_dot_mt5__pb2.OrderSendReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OrderModify(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mt5grpc.Trading/OrderModify',
            mt5grpc_dot_mt5__pb2.OrderModifyRequest.SerializeToString,
            mt5grpc_dot_mt5__pb2.OrderModifyReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OrderClose(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mt5grpc.Trading/OrderClose',
            mt5grpc_dot_mt5__pb2.OrderCloseRequest.SerializeToString,
            mt5grpc_dot_mt5__pb2.OrderCloseReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class StreamsStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.OnOrderUpdate = channel.unary_stream(
                '/mt5grpc.Streams/OnOrderUpdate',
                request_serializer=mt5grpc_dot_mt5__pb2.OnOrderUpdateRequest.SerializeToString,
                response_deserializer=mt5grpc_dot_mt5__pb2.OnOrderUpdateReply.FromString,
                )
        self.OnQuote = channel.unary_stream(
                '/mt5grpc.Streams/OnQuote',
                request_serializer=mt5grpc_dot_mt5__pb2.OnQuoteRequest.SerializeToString,
                response_deserializer=mt5grpc_dot_mt5__pb2.OnQuoteReply.FromString,
                )
        self.OnTickValue = channel.unary_stream(
                '/mt5grpc.Streams/OnTickValue',
                request_serializer=mt5grpc_dot_mt5__pb2.OnTickValueRequest.SerializeToString,
                response_deserializer=mt5grpc_dot_mt5__pb2.OnTickValueReply.FromString,
                )
        self.OnOrderProfit = channel.unary_stream(
                '/mt5grpc.Streams/OnOrderProfit',
                request_serializer=mt5grpc_dot_mt5__pb2.OnOrderProfitRequest.SerializeToString,
                response_deserializer=mt5grpc_dot_mt5__pb2.OnOrderProfitReply.FromString,
                )


class StreamsServicer(object):
    """Missing associated documentation comment in .proto file."""

    def OnOrderUpdate(self, request, context):
        """All trading activity on accont.
        <br> [Example] <br>
        { <br>
        "id": "demo-token-mt5" <br>
        }
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OnQuote(self, request, context):
        """Real time quotes.
        <br> [Example] <br>
        { <br>
        "id": "demo-token-mt5" <br>
        }
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OnTickValue(self, request, context):
        """Real time quotes.
        <br> [Example] <br>
        { <br>
        "id": "demo-token-mt5" <br>
        }
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OnOrderProfit(self, request, context):
        """Orders profits updates.
        <br> [Example] <br>
        { <br>
        "id": "demo-token-mt5" <br>
        }
        Quote history .
        <br> [Example] <br>
        { <br>
        "id": "demo-token-mt5" <br>
        }
        rpc OnQuoteHistory (OnQuoteHistoryRequest) returns (OnQuoteHistoryReply);
        On disconnect event.
        <br> [Example] <br>
        { <br>
        "id": "demo-token-mt5" <br>
        }
        rpc OnDisconnect (OnDisconnectRequest) returns (OnDisconnectReply);
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_StreamsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'OnOrderUpdate': grpc.unary_stream_rpc_method_handler(
                    servicer.OnOrderUpdate,
                    request_deserializer=mt5grpc_dot_mt5__pb2.OnOrderUpdateRequest.FromString,
                    response_serializer=mt5grpc_dot_mt5__pb2.OnOrderUpdateReply.SerializeToString,
            ),
            'OnQuote': grpc.unary_stream_rpc_method_handler(
                    servicer.OnQuote,
                    request_deserializer=mt5grpc_dot_mt5__pb2.OnQuoteRequest.FromString,
                    response_serializer=mt5grpc_dot_mt5__pb2.OnQuoteReply.SerializeToString,
            ),
            'OnTickValue': grpc.unary_stream_rpc_method_handler(
                    servicer.OnTickValue,
                    request_deserializer=mt5grpc_dot_mt5__pb2.OnTickValueRequest.FromString,
                    response_serializer=mt5grpc_dot_mt5__pb2.OnTickValueReply.SerializeToString,
            ),
            'OnOrderProfit': grpc.unary_stream_rpc_method_handler(
                    servicer.OnOrderProfit,
                    request_deserializer=mt5grpc_dot_mt5__pb2.OnOrderProfitRequest.FromString,
                    response_serializer=mt5grpc_dot_mt5__pb2.OnOrderProfitReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mt5grpc.Streams', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Streams(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def OnOrderUpdate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/mt5grpc.Streams/OnOrderUpdate',
            mt5grpc_dot_mt5__pb2.OnOrderUpdateRequest.SerializeToString,
            mt5grpc_dot_mt5__pb2.OnOrderUpdateReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OnQuote(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/mt5grpc.Streams/OnQuote',
            mt5grpc_dot_mt5__pb2.OnQuoteRequest.SerializeToString,
            mt5grpc_dot_mt5__pb2.OnQuoteReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OnTickValue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/mt5grpc.Streams/OnTickValue',
            mt5grpc_dot_mt5__pb2.OnTickValueRequest.SerializeToString,
            mt5grpc_dot_mt5__pb2.OnTickValueReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OnOrderProfit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/mt5grpc.Streams/OnOrderProfit',
            mt5grpc_dot_mt5__pb2.OnOrderProfitRequest.SerializeToString,
            mt5grpc_dot_mt5__pb2.OnOrderProfitReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
