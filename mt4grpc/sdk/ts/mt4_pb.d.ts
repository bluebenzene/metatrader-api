/* eslint-disable */
/*Generated by GenDocu.com*/
// package: mt4grpc
// file: mt4.proto

import * as jspb from "google-protobuf";
import * as google_protobuf_timestamp_pb from "google-protobuf/google/protobuf/timestamp_pb";

export class Error extends jspb.Message {
  getCode(): ErrorCodeMap[keyof ErrorCodeMap];
  setCode(value: ErrorCodeMap[keyof ErrorCodeMap]): void;

  getMessage(): string;
  setMessage(value: string): void;

  getStacktrace(): string;
  setStacktrace(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Error.AsObject;
  static toObject(includeInstance: boolean, msg: Error): Error.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: Error, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Error;
  static deserializeBinaryFromReader(message: Error, reader: jspb.BinaryReader): Error;
}

export namespace Error {
  export type AsObject = {
    code: ErrorCodeMap[keyof ErrorCodeMap],
    message: string,
    stacktrace: string,
  }
}

export class ConnectRequest extends jspb.Message {
  getUser(): number;
  setUser(value: number): void;

  getPassword(): string;
  setPassword(value: string): void;

  getHost(): string;
  setHost(value: string): void;

  getPort(): number;
  setPort(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ConnectRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ConnectRequest): ConnectRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ConnectRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ConnectRequest;
  static deserializeBinaryFromReader(message: ConnectRequest, reader: jspb.BinaryReader): ConnectRequest;
}

export namespace ConnectRequest {
  export type AsObject = {
    user: number,
    password: string,
    host: string,
    port: number,
  }
}

export class ConnectReply extends jspb.Message {
  getResult(): string;
  setResult(value: string): void;

  hasError(): boolean;
  clearError(): void;
  getError(): Error | undefined;
  setError(value?: Error): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ConnectReply.AsObject;
  static toObject(includeInstance: boolean, msg: ConnectReply): ConnectReply.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ConnectReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ConnectReply;
  static deserializeBinaryFromReader(message: ConnectReply, reader: jspb.BinaryReader): ConnectReply;
}

export namespace ConnectReply {
  export type AsObject = {
    result: string,
    error?: Error.AsObject,
  }
}

export class CheckConnectRequest extends jspb.Message {
  getId(): string;
  setId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CheckConnectRequest.AsObject;
  static toObject(includeInstance: boolean, msg: CheckConnectRequest): CheckConnectRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: CheckConnectRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CheckConnectRequest;
  static deserializeBinaryFromReader(message: CheckConnectRequest, reader: jspb.BinaryReader): CheckConnectRequest;
}

export namespace CheckConnectRequest {
  export type AsObject = {
    id: string,
  }
}

export class CheckConnectReply extends jspb.Message {
  getResult(): string;
  setResult(value: string): void;

  hasError(): boolean;
  clearError(): void;
  getError(): Error | undefined;
  setError(value?: Error): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CheckConnectReply.AsObject;
  static toObject(includeInstance: boolean, msg: CheckConnectReply): CheckConnectReply.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: CheckConnectReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CheckConnectReply;
  static deserializeBinaryFromReader(message: CheckConnectReply, reader: jspb.BinaryReader): CheckConnectReply;
}

export namespace CheckConnectReply {
  export type AsObject = {
    result: string,
    error?: Error.AsObject,
  }
}

export class DisconnectRequest extends jspb.Message {
  getId(): string;
  setId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): DisconnectRequest.AsObject;
  static toObject(includeInstance: boolean, msg: DisconnectRequest): DisconnectRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: DisconnectRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): DisconnectRequest;
  static deserializeBinaryFromReader(message: DisconnectRequest, reader: jspb.BinaryReader): DisconnectRequest;
}

export namespace DisconnectRequest {
  export type AsObject = {
    id: string,
  }
}

export class DisconnectReply extends jspb.Message {
  getResult(): string;
  setResult(value: string): void;

  hasError(): boolean;
  clearError(): void;
  getError(): Error | undefined;
  setError(value?: Error): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): DisconnectReply.AsObject;
  static toObject(includeInstance: boolean, msg: DisconnectReply): DisconnectReply.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: DisconnectReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): DisconnectReply;
  static deserializeBinaryFromReader(message: DisconnectReply, reader: jspb.BinaryReader): DisconnectReply;
}

export namespace DisconnectReply {
  export type AsObject = {
    result: string,
    error?: Error.AsObject,
  }
}

export class AccountSummaryRequest extends jspb.Message {
  getId(): string;
  setId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): AccountSummaryRequest.AsObject;
  static toObject(includeInstance: boolean, msg: AccountSummaryRequest): AccountSummaryRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: AccountSummaryRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): AccountSummaryRequest;
  static deserializeBinaryFromReader(message: AccountSummaryRequest, reader: jspb.BinaryReader): AccountSummaryRequest;
}

export namespace AccountSummaryRequest {
  export type AsObject = {
    id: string,
  }
}

export class AccountSummary extends jspb.Message {
  getBalance(): number;
  setBalance(value: number): void;

  getCredit(): number;
  setCredit(value: number): void;

  getProfit(): number;
  setProfit(value: number): void;

  getEquity(): number;
  setEquity(value: number): void;

  getMargin(): number;
  setMargin(value: number): void;

  getFreemargin(): number;
  setFreemargin(value: number): void;

  getMarginlevel(): number;
  setMarginlevel(value: number): void;

  getLeverage(): number;
  setLeverage(value: number): void;

  getCurrency(): string;
  setCurrency(value: string): void;

  getType(): AccountTypeMap[keyof AccountTypeMap];
  setType(value: AccountTypeMap[keyof AccountTypeMap]): void;

  getIsinvestor(): boolean;
  setIsinvestor(value: boolean): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): AccountSummary.AsObject;
  static toObject(includeInstance: boolean, msg: AccountSummary): AccountSummary.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: AccountSummary, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): AccountSummary;
  static deserializeBinaryFromReader(message: AccountSummary, reader: jspb.BinaryReader): AccountSummary;
}

export namespace AccountSummary {
  export type AsObject = {
    balance: number,
    credit: number,
    profit: number,
    equity: number,
    margin: number,
    freemargin: number,
    marginlevel: number,
    leverage: number,
    currency: string,
    type: AccountTypeMap[keyof AccountTypeMap],
    isinvestor: boolean,
  }
}

export class AccountSummaryReply extends jspb.Message {
  hasResult(): boolean;
  clearResult(): void;
  getResult(): AccountSummary | undefined;
  setResult(value?: AccountSummary): void;

  hasError(): boolean;
  clearError(): void;
  getError(): Error | undefined;
  setError(value?: Error): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): AccountSummaryReply.AsObject;
  static toObject(includeInstance: boolean, msg: AccountSummaryReply): AccountSummaryReply.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: AccountSummaryReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): AccountSummaryReply;
  static deserializeBinaryFromReader(message: AccountSummaryReply, reader: jspb.BinaryReader): AccountSummaryReply;
}

export namespace AccountSummaryReply {
  export type AsObject = {
    result?: AccountSummary.AsObject,
    error?: Error.AsObject,
  }
}

export class GroupsRequest extends jspb.Message {
  getId(): string;
  setId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GroupsRequest.AsObject;
  static toObject(includeInstance: boolean, msg: GroupsRequest): GroupsRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: GroupsRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GroupsRequest;
  static deserializeBinaryFromReader(message: GroupsRequest, reader: jspb.BinaryReader): GroupsRequest;
}

export namespace GroupsRequest {
  export type AsObject = {
    id: string,
  }
}

export class ConSymbolGroup extends jspb.Message {
  getName(): string;
  setName(value: string): void;

  getDescription(): string;
  setDescription(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ConSymbolGroup.AsObject;
  static toObject(includeInstance: boolean, msg: ConSymbolGroup): ConSymbolGroup.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ConSymbolGroup, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ConSymbolGroup;
  static deserializeBinaryFromReader(message: ConSymbolGroup, reader: jspb.BinaryReader): ConSymbolGroup;
}

export namespace ConSymbolGroup {
  export type AsObject = {
    name: string,
    description: string,
  }
}

export class GroupsReply extends jspb.Message {
  clearResultList(): void;
  getResultList(): Array<ConSymbolGroup>;
  setResultList(value: Array<ConSymbolGroup>): void;
  addResult(value?: ConSymbolGroup, index?: number): ConSymbolGroup;

  hasError(): boolean;
  clearError(): void;
  getError(): Error | undefined;
  setError(value?: Error): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GroupsReply.AsObject;
  static toObject(includeInstance: boolean, msg: GroupsReply): GroupsReply.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: GroupsReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GroupsReply;
  static deserializeBinaryFromReader(message: GroupsReply, reader: jspb.BinaryReader): GroupsReply;
}

export namespace GroupsReply {
  export type AsObject = {
    resultList: Array<ConSymbolGroup.AsObject>,
    error?: Error.AsObject,
  }
}

export class QuoteRequest extends jspb.Message {
  getId(): string;
  setId(value: string): void;

  getSymbol(): string;
  setSymbol(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QuoteRequest.AsObject;
  static toObject(includeInstance: boolean, msg: QuoteRequest): QuoteRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QuoteRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QuoteRequest;
  static deserializeBinaryFromReader(message: QuoteRequest, reader: jspb.BinaryReader): QuoteRequest;
}

export namespace QuoteRequest {
  export type AsObject = {
    id: string,
    symbol: string,
  }
}

export class QuoteEventArgs extends jspb.Message {
  getSymbol(): string;
  setSymbol(value: string): void;

  getBid(): number;
  setBid(value: number): void;

  getAsk(): number;
  setAsk(value: number): void;

  hasTime(): boolean;
  clearTime(): void;
  getTime(): google_protobuf_timestamp_pb.Timestamp | undefined;
  setTime(value?: google_protobuf_timestamp_pb.Timestamp): void;

  getHigh(): number;
  setHigh(value: number): void;

  getLow(): number;
  setLow(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QuoteEventArgs.AsObject;
  static toObject(includeInstance: boolean, msg: QuoteEventArgs): QuoteEventArgs.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QuoteEventArgs, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QuoteEventArgs;
  static deserializeBinaryFromReader(message: QuoteEventArgs, reader: jspb.BinaryReader): QuoteEventArgs;
}

export namespace QuoteEventArgs {
  export type AsObject = {
    symbol: string,
    bid: number,
    ask: number,
    time?: google_protobuf_timestamp_pb.Timestamp.AsObject,
    high: number,
    low: number,
  }
}

export class QuoteReply extends jspb.Message {
  hasResult(): boolean;
  clearResult(): void;
  getResult(): QuoteEventArgs | undefined;
  setResult(value?: QuoteEventArgs): void;

  hasError(): boolean;
  clearError(): void;
  getError(): Error | undefined;
  setError(value?: Error): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QuoteReply.AsObject;
  static toObject(includeInstance: boolean, msg: QuoteReply): QuoteReply.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QuoteReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QuoteReply;
  static deserializeBinaryFromReader(message: QuoteReply, reader: jspb.BinaryReader): QuoteReply;
}

export namespace QuoteReply {
  export type AsObject = {
    result?: QuoteEventArgs.AsObject,
    error?: Error.AsObject,
  }
}

export class OpenedOrdersRequest extends jspb.Message {
  getId(): string;
  setId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): OpenedOrdersRequest.AsObject;
  static toObject(includeInstance: boolean, msg: OpenedOrdersRequest): OpenedOrdersRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: OpenedOrdersRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): OpenedOrdersRequest;
  static deserializeBinaryFromReader(message: OpenedOrdersRequest, reader: jspb.BinaryReader): OpenedOrdersRequest;
}

export namespace OpenedOrdersRequest {
  export type AsObject = {
    id: string,
  }
}

export class Order extends jspb.Message {
  getPlacedtype(): PlacedTypeMap[keyof PlacedTypeMap];
  setPlacedtype(value: PlacedTypeMap[keyof PlacedTypeMap]): void;

  getTicket(): number;
  setTicket(value: number): void;

  hasOpentime(): boolean;
  clearOpentime(): void;
  getOpentime(): google_protobuf_timestamp_pb.Timestamp | undefined;
  setOpentime(value?: google_protobuf_timestamp_pb.Timestamp): void;

  hasClosetime(): boolean;
  clearClosetime(): void;
  getClosetime(): google_protobuf_timestamp_pb.Timestamp | undefined;
  setClosetime(value?: google_protobuf_timestamp_pb.Timestamp): void;

  hasExpiration(): boolean;
  clearExpiration(): void;
  getExpiration(): google_protobuf_timestamp_pb.Timestamp | undefined;
  setExpiration(value?: google_protobuf_timestamp_pb.Timestamp): void;

  getType(): OpMap[keyof OpMap];
  setType(value: OpMap[keyof OpMap]): void;

  getLots(): number;
  setLots(value: number): void;

  getSymbol(): string;
  setSymbol(value: string): void;

  getOpenprice(): number;
  setOpenprice(value: number): void;

  getStoploss(): number;
  setStoploss(value: number): void;

  getTakeprofit(): number;
  setTakeprofit(value: number): void;

  getCloseprice(): number;
  setCloseprice(value: number): void;

  getMagicnumber(): number;
  setMagicnumber(value: number): void;

  getSwap(): number;
  setSwap(value: number): void;

  getCommission(): number;
  setCommission(value: number): void;

  getComment(): string;
  setComment(value: string): void;

  getProfit(): number;
  setProfit(value: number): void;

  getRateopen(): number;
  setRateopen(value: number): void;

  getRateclose(): number;
  setRateclose(value: number): void;

  getRatemargin(): number;
  setRatemargin(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Order.AsObject;
  static toObject(includeInstance: boolean, msg: Order): Order.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: Order, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Order;
  static deserializeBinaryFromReader(message: Order, reader: jspb.BinaryReader): Order;
}

export namespace Order {
  export type AsObject = {
    placedtype: PlacedTypeMap[keyof PlacedTypeMap],
    ticket: number,
    opentime?: google_protobuf_timestamp_pb.Timestamp.AsObject,
    closetime?: google_protobuf_timestamp_pb.Timestamp.AsObject,
    expiration?: google_protobuf_timestamp_pb.Timestamp.AsObject,
    type: OpMap[keyof OpMap],
    lots: number,
    symbol: string,
    openprice: number,
    stoploss: number,
    takeprofit: number,
    closeprice: number,
    magicnumber: number,
    swap: number,
    commission: number,
    comment: string,
    profit: number,
    rateopen: number,
    rateclose: number,
    ratemargin: number,
  }
}

export class OpenedOrdersReply extends jspb.Message {
  clearResultList(): void;
  getResultList(): Array<Order>;
  setResultList(value: Array<Order>): void;
  addResult(value?: Order, index?: number): Order;

  hasError(): boolean;
  clearError(): void;
  getError(): Error | undefined;
  setError(value?: Error): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): OpenedOrdersReply.AsObject;
  static toObject(includeInstance: boolean, msg: OpenedOrdersReply): OpenedOrdersReply.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: OpenedOrdersReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): OpenedOrdersReply;
  static deserializeBinaryFromReader(message: OpenedOrdersReply, reader: jspb.BinaryReader): OpenedOrdersReply;
}

export namespace OpenedOrdersReply {
  export type AsObject = {
    resultList: Array<Order.AsObject>,
    error?: Error.AsObject,
  }
}

export class SymbolsRequest extends jspb.Message {
  getId(): string;
  setId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SymbolsRequest.AsObject;
  static toObject(includeInstance: boolean, msg: SymbolsRequest): SymbolsRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: SymbolsRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SymbolsRequest;
  static deserializeBinaryFromReader(message: SymbolsRequest, reader: jspb.BinaryReader): SymbolsRequest;
}

export namespace SymbolsRequest {
  export type AsObject = {
    id: string,
  }
}

export class SymbolsReply extends jspb.Message {
  clearResultList(): void;
  getResultList(): Array<string>;
  setResultList(value: Array<string>): void;
  addResult(value: string, index?: number): string;

  hasError(): boolean;
  clearError(): void;
  getError(): Error | undefined;
  setError(value?: Error): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SymbolsReply.AsObject;
  static toObject(includeInstance: boolean, msg: SymbolsReply): SymbolsReply.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: SymbolsReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SymbolsReply;
  static deserializeBinaryFromReader(message: SymbolsReply, reader: jspb.BinaryReader): SymbolsReply;
}

export namespace SymbolsReply {
  export type AsObject = {
    resultList: Array<string>,
    error?: Error.AsObject,
  }
}

export class SymbolParamsRequest extends jspb.Message {
  getId(): string;
  setId(value: string): void;

  getSymbol(): string;
  setSymbol(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SymbolParamsRequest.AsObject;
  static toObject(includeInstance: boolean, msg: SymbolParamsRequest): SymbolParamsRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: SymbolParamsRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SymbolParamsRequest;
  static deserializeBinaryFromReader(message: SymbolParamsRequest, reader: jspb.BinaryReader): SymbolParamsRequest;
}

export namespace SymbolParamsRequest {
  export type AsObject = {
    id: string,
    symbol: string,
  }
}

export class SymbolParams extends jspb.Message {
  getSymbolname(): string;
  setSymbolname(value: string): void;

  hasSymbol(): boolean;
  clearSymbol(): void;
  getSymbol(): SymbolInfo | undefined;
  setSymbol(value?: SymbolInfo): void;

  hasGroup(): boolean;
  clearGroup(): void;
  getGroup(): ConSymbolGroup | undefined;
  setGroup(value?: ConSymbolGroup): void;

  hasGroupparams(): boolean;
  clearGroupparams(): void;
  getGroupparams(): ConGroupSec | undefined;
  setGroupparams(value?: ConGroupSec): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SymbolParams.AsObject;
  static toObject(includeInstance: boolean, msg: SymbolParams): SymbolParams.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: SymbolParams, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SymbolParams;
  static deserializeBinaryFromReader(message: SymbolParams, reader: jspb.BinaryReader): SymbolParams;
}

export namespace SymbolParams {
  export type AsObject = {
    symbolname: string,
    symbol?: SymbolInfo.AsObject,
    group?: ConSymbolGroup.AsObject,
    groupparams?: ConGroupSec.AsObject,
  }
}

export class SymbolInfo extends jspb.Message {
  getExecution(): ExecutionMap[keyof ExecutionMap];
  setExecution(value: ExecutionMap[keyof ExecutionMap]): void;

  getStopslevel(): number;
  setStopslevel(value: number): void;

  getDigits(): number;
  setDigits(value: number): void;

  getPoint(): number;
  setPoint(value: number): void;

  getSwaplong(): number;
  setSwaplong(value: number): void;

  getSwapshort(): number;
  setSwapshort(value: number): void;

  getSpread(): number;
  setSpread(value: number): void;

  getFreezelevel(): number;
  setFreezelevel(value: number): void;

  getMargincurrency(): string;
  setMargincurrency(value: string): void;

  getProfitmode(): ProfitModeMap[keyof ProfitModeMap];
  setProfitmode(value: ProfitModeMap[keyof ProfitModeMap]): void;

  getMarginmode(): MarginModeMap[keyof MarginModeMap];
  setMarginmode(value: MarginModeMap[keyof MarginModeMap]): void;

  getContractsize(): number;
  setContractsize(value: number): void;

  getCurrency(): string;
  setCurrency(value: string): void;

  getMargindivider(): number;
  setMargindivider(value: number): void;

  getCode(): number;
  setCode(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SymbolInfo.AsObject;
  static toObject(includeInstance: boolean, msg: SymbolInfo): SymbolInfo.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: SymbolInfo, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SymbolInfo;
  static deserializeBinaryFromReader(message: SymbolInfo, reader: jspb.BinaryReader): SymbolInfo;
}

export namespace SymbolInfo {
  export type AsObject = {
    execution: ExecutionMap[keyof ExecutionMap],
    stopslevel: number,
    digits: number,
    point: number,
    swaplong: number,
    swapshort: number,
    spread: number,
    freezelevel: number,
    margincurrency: string,
    profitmode: ProfitModeMap[keyof ProfitModeMap],
    marginmode: MarginModeMap[keyof MarginModeMap],
    contractsize: number,
    currency: string,
    margindivider: number,
    code: number,
  }
}

export class ConGroupSec extends jspb.Message {
  getMinlot(): number;
  setMinlot(value: number): void;

  getMaxlot(): number;
  setMaxlot(value: number): void;

  getLotstep(): number;
  setLotstep(value: number): void;

  getShow(): number;
  setShow(value: number): void;

  getTrade(): number;
  setTrade(value: number): void;

  getExecution(): number;
  setExecution(value: number): void;

  getCommBase(): number;
  setCommBase(value: number): void;

  getCommType(): number;
  setCommType(value: number): void;

  getCommLots(): number;
  setCommLots(value: number): void;

  getCommAgent(): number;
  setCommAgent(value: number): void;

  getCommAgentType(): number;
  setCommAgentType(value: number): void;

  getSpreadDiff(): number;
  setSpreadDiff(value: number): void;

  getLotMin(): number;
  setLotMin(value: number): void;

  getLotMax(): number;
  setLotMax(value: number): void;

  getIeDeviation(): number;
  setIeDeviation(value: number): void;

  getConfirmation(): number;
  setConfirmation(value: number): void;

  getTradeRights(): number;
  setTradeRights(value: number): void;

  getIeQuickMode(): number;
  setIeQuickMode(value: number): void;

  getAutocloseoutMode(): number;
  setAutocloseoutMode(value: number): void;

  getCommTax(): number;
  setCommTax(value: number): void;

  getCommAgentLots(): number;
  setCommAgentLots(value: number): void;

  getFreemarginMode(): number;
  setFreemarginMode(value: number): void;

  clearReservedList(): void;
  getReservedList(): Array<number>;
  setReservedList(value: Array<number>): void;
  addReserved(value: number, index?: number): number;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ConGroupSec.AsObject;
  static toObject(includeInstance: boolean, msg: ConGroupSec): ConGroupSec.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ConGroupSec, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ConGroupSec;
  static deserializeBinaryFromReader(message: ConGroupSec, reader: jspb.BinaryReader): ConGroupSec;
}

export namespace ConGroupSec {
  export type AsObject = {
    minlot: number,
    maxlot: number,
    lotstep: number,
    show: number,
    trade: number,
    execution: number,
    commBase: number,
    commType: number,
    commLots: number,
    commAgent: number,
    commAgentType: number,
    spreadDiff: number,
    lotMin: number,
    lotMax: number,
    ieDeviation: number,
    confirmation: number,
    tradeRights: number,
    ieQuickMode: number,
    autocloseoutMode: number,
    commTax: number,
    commAgentLots: number,
    freemarginMode: number,
    reservedList: Array<number>,
  }
}

export class SymbolParamsReply extends jspb.Message {
  hasResult(): boolean;
  clearResult(): void;
  getResult(): SymbolParams | undefined;
  setResult(value?: SymbolParams): void;

  hasError(): boolean;
  clearError(): void;
  getError(): Error | undefined;
  setError(value?: Error): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SymbolParamsReply.AsObject;
  static toObject(includeInstance: boolean, msg: SymbolParamsReply): SymbolParamsReply.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: SymbolParamsReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SymbolParamsReply;
  static deserializeBinaryFromReader(message: SymbolParamsReply, reader: jspb.BinaryReader): SymbolParamsReply;
}

export namespace SymbolParamsReply {
  export type AsObject = {
    result?: SymbolParams.AsObject,
    error?: Error.AsObject,
  }
}

export class ServerTimezoneRequest extends jspb.Message {
  getId(): string;
  setId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ServerTimezoneRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ServerTimezoneRequest): ServerTimezoneRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ServerTimezoneRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ServerTimezoneRequest;
  static deserializeBinaryFromReader(message: ServerTimezoneRequest, reader: jspb.BinaryReader): ServerTimezoneRequest;
}

export namespace ServerTimezoneRequest {
  export type AsObject = {
    id: string,
  }
}

export class ServerTimezoneReply extends jspb.Message {
  getResult(): number;
  setResult(value: number): void;

  hasError(): boolean;
  clearError(): void;
  getError(): Error | undefined;
  setError(value?: Error): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ServerTimezoneReply.AsObject;
  static toObject(includeInstance: boolean, msg: ServerTimezoneReply): ServerTimezoneReply.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ServerTimezoneReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ServerTimezoneReply;
  static deserializeBinaryFromReader(message: ServerTimezoneReply, reader: jspb.BinaryReader): ServerTimezoneReply;
}

export namespace ServerTimezoneReply {
  export type AsObject = {
    result: number,
    error?: Error.AsObject,
  }
}

export class IsInvestorRequest extends jspb.Message {
  getId(): string;
  setId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): IsInvestorRequest.AsObject;
  static toObject(includeInstance: boolean, msg: IsInvestorRequest): IsInvestorRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: IsInvestorRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): IsInvestorRequest;
  static deserializeBinaryFromReader(message: IsInvestorRequest, reader: jspb.BinaryReader): IsInvestorRequest;
}

export namespace IsInvestorRequest {
  export type AsObject = {
    id: string,
  }
}

export class IsInvestorReply extends jspb.Message {
  getResult(): boolean;
  setResult(value: boolean): void;

  hasError(): boolean;
  clearError(): void;
  getError(): Error | undefined;
  setError(value?: Error): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): IsInvestorReply.AsObject;
  static toObject(includeInstance: boolean, msg: IsInvestorReply): IsInvestorReply.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: IsInvestorReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): IsInvestorReply;
  static deserializeBinaryFromReader(message: IsInvestorReply, reader: jspb.BinaryReader): IsInvestorReply;
}

export namespace IsInvestorReply {
  export type AsObject = {
    result: boolean,
    error?: Error.AsObject,
  }
}

export class SymbolParamsManyRequest extends jspb.Message {
  getId(): string;
  setId(value: string): void;

  clearSymbolsList(): void;
  getSymbolsList(): Array<string>;
  setSymbolsList(value: Array<string>): void;
  addSymbols(value: string, index?: number): string;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SymbolParamsManyRequest.AsObject;
  static toObject(includeInstance: boolean, msg: SymbolParamsManyRequest): SymbolParamsManyRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: SymbolParamsManyRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SymbolParamsManyRequest;
  static deserializeBinaryFromReader(message: SymbolParamsManyRequest, reader: jspb.BinaryReader): SymbolParamsManyRequest;
}

export namespace SymbolParamsManyRequest {
  export type AsObject = {
    id: string,
    symbolsList: Array<string>,
  }
}

export class SymbolParamsManyReply extends jspb.Message {
  clearResultList(): void;
  getResultList(): Array<SymbolParams>;
  setResultList(value: Array<SymbolParams>): void;
  addResult(value?: SymbolParams, index?: number): SymbolParams;

  hasError(): boolean;
  clearError(): void;
  getError(): Error | undefined;
  setError(value?: Error): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SymbolParamsManyReply.AsObject;
  static toObject(includeInstance: boolean, msg: SymbolParamsManyReply): SymbolParamsManyReply.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: SymbolParamsManyReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SymbolParamsManyReply;
  static deserializeBinaryFromReader(message: SymbolParamsManyReply, reader: jspb.BinaryReader): SymbolParamsManyReply;
}

export namespace SymbolParamsManyReply {
  export type AsObject = {
    resultList: Array<SymbolParams.AsObject>,
    error?: Error.AsObject,
  }
}

export class OpenedOrderRequest extends jspb.Message {
  getId(): string;
  setId(value: string): void;

  getTicket(): number;
  setTicket(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): OpenedOrderRequest.AsObject;
  static toObject(includeInstance: boolean, msg: OpenedOrderRequest): OpenedOrderRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: OpenedOrderRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): OpenedOrderRequest;
  static deserializeBinaryFromReader(message: OpenedOrderRequest, reader: jspb.BinaryReader): OpenedOrderRequest;
}

export namespace OpenedOrderRequest {
  export type AsObject = {
    id: string,
    ticket: number,
  }
}

export class OpenedOrderReply extends jspb.Message {
  hasResult(): boolean;
  clearResult(): void;
  getResult(): Order | undefined;
  setResult(value?: Order): void;

  hasError(): boolean;
  clearError(): void;
  getError(): Error | undefined;
  setError(value?: Error): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): OpenedOrderReply.AsObject;
  static toObject(includeInstance: boolean, msg: OpenedOrderReply): OpenedOrderReply.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: OpenedOrderReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): OpenedOrderReply;
  static deserializeBinaryFromReader(message: OpenedOrderReply, reader: jspb.BinaryReader): OpenedOrderReply;
}

export namespace OpenedOrderReply {
  export type AsObject = {
    result?: Order.AsObject,
    error?: Error.AsObject,
  }
}

export class OrderHistoryRequest extends jspb.Message {
  getId(): string;
  setId(value: string): void;

  getFrom(): string;
  setFrom(value: string): void;

  getTo(): string;
  setTo(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): OrderHistoryRequest.AsObject;
  static toObject(includeInstance: boolean, msg: OrderHistoryRequest): OrderHistoryRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: OrderHistoryRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): OrderHistoryRequest;
  static deserializeBinaryFromReader(message: OrderHistoryRequest, reader: jspb.BinaryReader): OrderHistoryRequest;
}

export namespace OrderHistoryRequest {
  export type AsObject = {
    id: string,
    from: string,
    to: string,
  }
}

export class OrderHistoryReply extends jspb.Message {
  clearResultList(): void;
  getResultList(): Array<Order>;
  setResultList(value: Array<Order>): void;
  addResult(value?: Order, index?: number): Order;

  hasError(): boolean;
  clearError(): void;
  getError(): Error | undefined;
  setError(value?: Error): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): OrderHistoryReply.AsObject;
  static toObject(includeInstance: boolean, msg: OrderHistoryReply): OrderHistoryReply.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: OrderHistoryReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): OrderHistoryReply;
  static deserializeBinaryFromReader(message: OrderHistoryReply, reader: jspb.BinaryReader): OrderHistoryReply;
}

export namespace OrderHistoryReply {
  export type AsObject = {
    resultList: Array<Order.AsObject>,
    error?: Error.AsObject,
  }
}

export class QuoteHistoryRequest extends jspb.Message {
  getId(): string;
  setId(value: string): void;

  getSymbol(): string;
  setSymbol(value: string): void;

  getTimeframe(): TimeframeMap[keyof TimeframeMap];
  setTimeframe(value: TimeframeMap[keyof TimeframeMap]): void;

  getFrom(): string;
  setFrom(value: string): void;

  getCount(): number;
  setCount(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QuoteHistoryRequest.AsObject;
  static toObject(includeInstance: boolean, msg: QuoteHistoryRequest): QuoteHistoryRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QuoteHistoryRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QuoteHistoryRequest;
  static deserializeBinaryFromReader(message: QuoteHistoryRequest, reader: jspb.BinaryReader): QuoteHistoryRequest;
}

export namespace QuoteHistoryRequest {
  export type AsObject = {
    id: string,
    symbol: string,
    timeframe: TimeframeMap[keyof TimeframeMap],
    from: string,
    count: number,
  }
}

export class Bar extends jspb.Message {
  hasTime(): boolean;
  clearTime(): void;
  getTime(): google_protobuf_timestamp_pb.Timestamp | undefined;
  setTime(value?: google_protobuf_timestamp_pb.Timestamp): void;

  getOpen(): number;
  setOpen(value: number): void;

  getHigh(): number;
  setHigh(value: number): void;

  getLow(): number;
  setLow(value: number): void;

  getClose(): number;
  setClose(value: number): void;

  getVolume(): number;
  setVolume(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Bar.AsObject;
  static toObject(includeInstance: boolean, msg: Bar): Bar.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: Bar, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Bar;
  static deserializeBinaryFromReader(message: Bar, reader: jspb.BinaryReader): Bar;
}

export namespace Bar {
  export type AsObject = {
    time?: google_protobuf_timestamp_pb.Timestamp.AsObject,
    open: number,
    high: number,
    low: number,
    close: number,
    volume: number,
  }
}

export class QuoteHistoryReply extends jspb.Message {
  clearResultList(): void;
  getResultList(): Array<Bar>;
  setResultList(value: Array<Bar>): void;
  addResult(value?: Bar, index?: number): Bar;

  hasError(): boolean;
  clearError(): void;
  getError(): Error | undefined;
  setError(value?: Error): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QuoteHistoryReply.AsObject;
  static toObject(includeInstance: boolean, msg: QuoteHistoryReply): QuoteHistoryReply.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QuoteHistoryReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QuoteHistoryReply;
  static deserializeBinaryFromReader(message: QuoteHistoryReply, reader: jspb.BinaryReader): QuoteHistoryReply;
}

export namespace QuoteHistoryReply {
  export type AsObject = {
    resultList: Array<Bar.AsObject>,
    error?: Error.AsObject,
  }
}

export class QuoteHistoryManyRequest extends jspb.Message {
  getId(): string;
  setId(value: string): void;

  clearSymbolList(): void;
  getSymbolList(): Array<string>;
  setSymbolList(value: Array<string>): void;
  addSymbol(value: string, index?: number): string;

  getTimeframe(): TimeframeMap[keyof TimeframeMap];
  setTimeframe(value: TimeframeMap[keyof TimeframeMap]): void;

  getFrom(): string;
  setFrom(value: string): void;

  getCount(): number;
  setCount(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QuoteHistoryManyRequest.AsObject;
  static toObject(includeInstance: boolean, msg: QuoteHistoryManyRequest): QuoteHistoryManyRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QuoteHistoryManyRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QuoteHistoryManyRequest;
  static deserializeBinaryFromReader(message: QuoteHistoryManyRequest, reader: jspb.BinaryReader): QuoteHistoryManyRequest;
}

export namespace QuoteHistoryManyRequest {
  export type AsObject = {
    id: string,
    symbolList: Array<string>,
    timeframe: TimeframeMap[keyof TimeframeMap],
    from: string,
    count: number,
  }
}

export class BarsForSymbol extends jspb.Message {
  getSymbol(): string;
  setSymbol(value: string): void;

  clearBarsList(): void;
  getBarsList(): Array<Bar>;
  setBarsList(value: Array<Bar>): void;
  addBars(value?: Bar, index?: number): Bar;

  getException(): string;
  setException(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): BarsForSymbol.AsObject;
  static toObject(includeInstance: boolean, msg: BarsForSymbol): BarsForSymbol.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: BarsForSymbol, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): BarsForSymbol;
  static deserializeBinaryFromReader(message: BarsForSymbol, reader: jspb.BinaryReader): BarsForSymbol;
}

export namespace BarsForSymbol {
  export type AsObject = {
    symbol: string,
    barsList: Array<Bar.AsObject>,
    exception: string,
  }
}

export class QuoteHistoryManyReply extends jspb.Message {
  clearResultList(): void;
  getResultList(): Array<BarsForSymbol>;
  setResultList(value: Array<BarsForSymbol>): void;
  addResult(value?: BarsForSymbol, index?: number): BarsForSymbol;

  hasError(): boolean;
  clearError(): void;
  getError(): Error | undefined;
  setError(value?: Error): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QuoteHistoryManyReply.AsObject;
  static toObject(includeInstance: boolean, msg: QuoteHistoryManyReply): QuoteHistoryManyReply.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QuoteHistoryManyReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QuoteHistoryManyReply;
  static deserializeBinaryFromReader(message: QuoteHistoryManyReply, reader: jspb.BinaryReader): QuoteHistoryManyReply;
}

export namespace QuoteHistoryManyReply {
  export type AsObject = {
    resultList: Array<BarsForSymbol.AsObject>,
    error?: Error.AsObject,
  }
}

export class ClosedOrdersRequest extends jspb.Message {
  getId(): string;
  setId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ClosedOrdersRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ClosedOrdersRequest): ClosedOrdersRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ClosedOrdersRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ClosedOrdersRequest;
  static deserializeBinaryFromReader(message: ClosedOrdersRequest, reader: jspb.BinaryReader): ClosedOrdersRequest;
}

export namespace ClosedOrdersRequest {
  export type AsObject = {
    id: string,
  }
}

export class ClosedOrdersReply extends jspb.Message {
  clearResultList(): void;
  getResultList(): Array<Order>;
  setResultList(value: Array<Order>): void;
  addResult(value?: Order, index?: number): Order;

  hasError(): boolean;
  clearError(): void;
  getError(): Error | undefined;
  setError(value?: Error): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ClosedOrdersReply.AsObject;
  static toObject(includeInstance: boolean, msg: ClosedOrdersReply): ClosedOrdersReply.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ClosedOrdersReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ClosedOrdersReply;
  static deserializeBinaryFromReader(message: ClosedOrdersReply, reader: jspb.BinaryReader): ClosedOrdersReply;
}

export namespace ClosedOrdersReply {
  export type AsObject = {
    resultList: Array<Order.AsObject>,
    error?: Error.AsObject,
  }
}

export class RequestQuoteHistoryRequest extends jspb.Message {
  getId(): string;
  setId(value: string): void;

  getSymbol(): string;
  setSymbol(value: string): void;

  getTimeframe(): TimeframeMap[keyof TimeframeMap];
  setTimeframe(value: TimeframeMap[keyof TimeframeMap]): void;

  getFrom(): string;
  setFrom(value: string): void;

  getCount(): number;
  setCount(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): RequestQuoteHistoryRequest.AsObject;
  static toObject(includeInstance: boolean, msg: RequestQuoteHistoryRequest): RequestQuoteHistoryRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: RequestQuoteHistoryRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RequestQuoteHistoryRequest;
  static deserializeBinaryFromReader(message: RequestQuoteHistoryRequest, reader: jspb.BinaryReader): RequestQuoteHistoryRequest;
}

export namespace RequestQuoteHistoryRequest {
  export type AsObject = {
    id: string,
    symbol: string,
    timeframe: TimeframeMap[keyof TimeframeMap],
    from: string,
    count: number,
  }
}

export class RequestQuoteHistoryReply extends jspb.Message {
  getResult(): string;
  setResult(value: string): void;

  hasError(): boolean;
  clearError(): void;
  getError(): Error | undefined;
  setError(value?: Error): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): RequestQuoteHistoryReply.AsObject;
  static toObject(includeInstance: boolean, msg: RequestQuoteHistoryReply): RequestQuoteHistoryReply.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: RequestQuoteHistoryReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RequestQuoteHistoryReply;
  static deserializeBinaryFromReader(message: RequestQuoteHistoryReply, reader: jspb.BinaryReader): RequestQuoteHistoryReply;
}

export namespace RequestQuoteHistoryReply {
  export type AsObject = {
    result: string,
    error?: Error.AsObject,
  }
}

export class SetPlacedTypeRequest extends jspb.Message {
  getId(): string;
  setId(value: string): void;

  getType(): PlacedTypeMap[keyof PlacedTypeMap];
  setType(value: PlacedTypeMap[keyof PlacedTypeMap]): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SetPlacedTypeRequest.AsObject;
  static toObject(includeInstance: boolean, msg: SetPlacedTypeRequest): SetPlacedTypeRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: SetPlacedTypeRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SetPlacedTypeRequest;
  static deserializeBinaryFromReader(message: SetPlacedTypeRequest, reader: jspb.BinaryReader): SetPlacedTypeRequest;
}

export namespace SetPlacedTypeRequest {
  export type AsObject = {
    id: string,
    type: PlacedTypeMap[keyof PlacedTypeMap],
  }
}

export class SetPlacedTypeReply extends jspb.Message {
  clearResultList(): void;
  getResultList(): Array<Order>;
  setResultList(value: Array<Order>): void;
  addResult(value?: Order, index?: number): Order;

  hasError(): boolean;
  clearError(): void;
  getError(): Error | undefined;
  setError(value?: Error): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SetPlacedTypeReply.AsObject;
  static toObject(includeInstance: boolean, msg: SetPlacedTypeReply): SetPlacedTypeReply.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: SetPlacedTypeReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SetPlacedTypeReply;
  static deserializeBinaryFromReader(message: SetPlacedTypeReply, reader: jspb.BinaryReader): SetPlacedTypeReply;
}

export namespace SetPlacedTypeReply {
  export type AsObject = {
    resultList: Array<Order.AsObject>,
    error?: Error.AsObject,
  }
}

export class PingRequest extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): PingRequest.AsObject;
  static toObject(includeInstance: boolean, msg: PingRequest): PingRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: PingRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): PingRequest;
  static deserializeBinaryFromReader(message: PingRequest, reader: jspb.BinaryReader): PingRequest;
}

export namespace PingRequest {
  export type AsObject = {
  }
}

export class PingReply extends jspb.Message {
  getResult(): string;
  setResult(value: string): void;

  hasError(): boolean;
  clearError(): void;
  getError(): Error | undefined;
  setError(value?: Error): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): PingReply.AsObject;
  static toObject(includeInstance: boolean, msg: PingReply): PingReply.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: PingReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): PingReply;
  static deserializeBinaryFromReader(message: PingReply, reader: jspb.BinaryReader): PingReply;
}

export namespace PingReply {
  export type AsObject = {
    result: string,
    error?: Error.AsObject,
  }
}

export class GetLogsRequest extends jspb.Message {
  getId(): string;
  setId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetLogsRequest.AsObject;
  static toObject(includeInstance: boolean, msg: GetLogsRequest): GetLogsRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: GetLogsRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetLogsRequest;
  static deserializeBinaryFromReader(message: GetLogsRequest, reader: jspb.BinaryReader): GetLogsRequest;
}

export namespace GetLogsRequest {
  export type AsObject = {
    id: string,
  }
}

export class LogRec extends jspb.Message {
  hasTime(): boolean;
  clearTime(): void;
  getTime(): google_protobuf_timestamp_pb.Timestamp | undefined;
  setTime(value?: google_protobuf_timestamp_pb.Timestamp): void;

  getLevel(): LogEventLevelMap[keyof LogEventLevelMap];
  setLevel(value: LogEventLevelMap[keyof LogEventLevelMap]): void;

  getMessage(): string;
  setMessage(value: string): void;

  getId(): string;
  setId(value: string): void;

  getUser(): number;
  setUser(value: number): void;

  getPassword(): string;
  setPassword(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): LogRec.AsObject;
  static toObject(includeInstance: boolean, msg: LogRec): LogRec.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: LogRec, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): LogRec;
  static deserializeBinaryFromReader(message: LogRec, reader: jspb.BinaryReader): LogRec;
}

export namespace LogRec {
  export type AsObject = {
    time?: google_protobuf_timestamp_pb.Timestamp.AsObject,
    level: LogEventLevelMap[keyof LogEventLevelMap],
    message: string,
    id: string,
    user: number,
    password: string,
  }
}

export class GetLogsReply extends jspb.Message {
  clearResultList(): void;
  getResultList(): Array<LogRec>;
  setResultList(value: Array<LogRec>): void;
  addResult(value?: LogRec, index?: number): LogRec;

  hasError(): boolean;
  clearError(): void;
  getError(): Error | undefined;
  setError(value?: Error): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetLogsReply.AsObject;
  static toObject(includeInstance: boolean, msg: GetLogsReply): GetLogsReply.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: GetLogsReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetLogsReply;
  static deserializeBinaryFromReader(message: GetLogsReply, reader: jspb.BinaryReader): GetLogsReply;
}

export namespace GetLogsReply {
  export type AsObject = {
    resultList: Array<LogRec.AsObject>,
    error?: Error.AsObject,
  }
}

export class GetLogsByUserRequest extends jspb.Message {
  getUser(): number;
  setUser(value: number): void;

  getPassword(): string;
  setPassword(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetLogsByUserRequest.AsObject;
  static toObject(includeInstance: boolean, msg: GetLogsByUserRequest): GetLogsByUserRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: GetLogsByUserRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetLogsByUserRequest;
  static deserializeBinaryFromReader(message: GetLogsByUserRequest, reader: jspb.BinaryReader): GetLogsByUserRequest;
}

export namespace GetLogsByUserRequest {
  export type AsObject = {
    user: number,
    password: string,
  }
}

export class GetLogsByUserReply extends jspb.Message {
  clearResultList(): void;
  getResultList(): Array<LogRec>;
  setResultList(value: Array<LogRec>): void;
  addResult(value?: LogRec, index?: number): LogRec;

  hasError(): boolean;
  clearError(): void;
  getError(): Error | undefined;
  setError(value?: Error): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetLogsByUserReply.AsObject;
  static toObject(includeInstance: boolean, msg: GetLogsByUserReply): GetLogsByUserReply.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: GetLogsByUserReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetLogsByUserReply;
  static deserializeBinaryFromReader(message: GetLogsByUserReply, reader: jspb.BinaryReader): GetLogsByUserReply;
}

export namespace GetLogsByUserReply {
  export type AsObject = {
    resultList: Array<LogRec.AsObject>,
    error?: Error.AsObject,
  }
}

export class MemorySnapshotRequest extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): MemorySnapshotRequest.AsObject;
  static toObject(includeInstance: boolean, msg: MemorySnapshotRequest): MemorySnapshotRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: MemorySnapshotRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): MemorySnapshotRequest;
  static deserializeBinaryFromReader(message: MemorySnapshotRequest, reader: jspb.BinaryReader): MemorySnapshotRequest;
}

export namespace MemorySnapshotRequest {
  export type AsObject = {
  }
}

export class MemorySnapshotReply extends jspb.Message {
  getResult(): string;
  setResult(value: string): void;

  hasError(): boolean;
  clearError(): void;
  getError(): Error | undefined;
  setError(value?: Error): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): MemorySnapshotReply.AsObject;
  static toObject(includeInstance: boolean, msg: MemorySnapshotReply): MemorySnapshotReply.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: MemorySnapshotReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): MemorySnapshotReply;
  static deserializeBinaryFromReader(message: MemorySnapshotReply, reader: jspb.BinaryReader): MemorySnapshotReply;
}

export namespace MemorySnapshotReply {
  export type AsObject = {
    result: string,
    error?: Error.AsObject,
  }
}

export class SearchRequest extends jspb.Message {
  getCompany(): string;
  setCompany(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SearchRequest.AsObject;
  static toObject(includeInstance: boolean, msg: SearchRequest): SearchRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: SearchRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SearchRequest;
  static deserializeBinaryFromReader(message: SearchRequest, reader: jspb.BinaryReader): SearchRequest;
}

export namespace SearchRequest {
  export type AsObject = {
    company: string,
  }
}

export class BrokerSerachResult extends jspb.Message {
  clearResultList(): void;
  getResultList(): Array<BrokerCompany>;
  setResultList(value: Array<BrokerCompany>): void;
  addResult(value?: BrokerCompany, index?: number): BrokerCompany;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): BrokerSerachResult.AsObject;
  static toObject(includeInstance: boolean, msg: BrokerSerachResult): BrokerSerachResult.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: BrokerSerachResult, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): BrokerSerachResult;
  static deserializeBinaryFromReader(message: BrokerSerachResult, reader: jspb.BinaryReader): BrokerSerachResult;
}

export namespace BrokerSerachResult {
  export type AsObject = {
    resultList: Array<BrokerCompany.AsObject>,
  }
}

export class BrokerCompany extends jspb.Message {
  getCompany(): string;
  setCompany(value: string): void;

  clearResultsList(): void;
  getResultsList(): Array<BrokerServer>;
  setResultsList(value: Array<BrokerServer>): void;
  addResults(value?: BrokerServer, index?: number): BrokerServer;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): BrokerCompany.AsObject;
  static toObject(includeInstance: boolean, msg: BrokerCompany): BrokerCompany.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: BrokerCompany, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): BrokerCompany;
  static deserializeBinaryFromReader(message: BrokerCompany, reader: jspb.BinaryReader): BrokerCompany;
}

export namespace BrokerCompany {
  export type AsObject = {
    company: string,
    resultsList: Array<BrokerServer.AsObject>,
  }
}

export class BrokerServer extends jspb.Message {
  getName(): string;
  setName(value: string): void;

  clearAccessList(): void;
  getAccessList(): Array<string>;
  setAccessList(value: Array<string>): void;
  addAccess(value: string, index?: number): string;

  getIsDemo(): string;
  setIsDemo(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): BrokerServer.AsObject;
  static toObject(includeInstance: boolean, msg: BrokerServer): BrokerServer.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: BrokerServer, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): BrokerServer;
  static deserializeBinaryFromReader(message: BrokerServer, reader: jspb.BinaryReader): BrokerServer;
}

export namespace BrokerServer {
  export type AsObject = {
    name: string,
    accessList: Array<string>,
    isDemo: string,
  }
}

export class SearchReply extends jspb.Message {
  hasResult(): boolean;
  clearResult(): void;
  getResult(): BrokerSerachResult | undefined;
  setResult(value?: BrokerSerachResult): void;

  hasError(): boolean;
  clearError(): void;
  getError(): Error | undefined;
  setError(value?: Error): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SearchReply.AsObject;
  static toObject(includeInstance: boolean, msg: SearchReply): SearchReply.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: SearchReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SearchReply;
  static deserializeBinaryFromReader(message: SearchReply, reader: jspb.BinaryReader): SearchReply;
}

export namespace SearchReply {
  export type AsObject = {
    result?: BrokerSerachResult.AsObject,
    error?: Error.AsObject,
  }
}

export class GetClientsRequest extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetClientsRequest.AsObject;
  static toObject(includeInstance: boolean, msg: GetClientsRequest): GetClientsRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: GetClientsRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetClientsRequest;
  static deserializeBinaryFromReader(message: GetClientsRequest, reader: jspb.BinaryReader): GetClientsRequest;
}

export namespace GetClientsRequest {
  export type AsObject = {
  }
}

export class ClientStatus extends jspb.Message {
  getId(): string;
  setId(value: string): void;

  getConnected(): boolean;
  setConnected(value: boolean): void;

  getUser(): number;
  setUser(value: number): void;

  getHost(): string;
  setHost(value: string): void;

  getPort(): number;
  setPort(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ClientStatus.AsObject;
  static toObject(includeInstance: boolean, msg: ClientStatus): ClientStatus.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ClientStatus, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ClientStatus;
  static deserializeBinaryFromReader(message: ClientStatus, reader: jspb.BinaryReader): ClientStatus;
}

export namespace ClientStatus {
  export type AsObject = {
    id: string,
    connected: boolean,
    user: number,
    host: string,
    port: number,
  }
}

export class GetClientsReply extends jspb.Message {
  clearResultList(): void;
  getResultList(): Array<ClientStatus>;
  setResultList(value: Array<ClientStatus>): void;
  addResult(value?: ClientStatus, index?: number): ClientStatus;

  hasError(): boolean;
  clearError(): void;
  getError(): Error | undefined;
  setError(value?: Error): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetClientsReply.AsObject;
  static toObject(includeInstance: boolean, msg: GetClientsReply): GetClientsReply.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: GetClientsReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetClientsReply;
  static deserializeBinaryFromReader(message: GetClientsReply, reader: jspb.BinaryReader): GetClientsReply;
}

export namespace GetClientsReply {
  export type AsObject = {
    resultList: Array<ClientStatus.AsObject>,
    error?: Error.AsObject,
  }
}

export class MemoryUsageRequest extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): MemoryUsageRequest.AsObject;
  static toObject(includeInstance: boolean, msg: MemoryUsageRequest): MemoryUsageRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: MemoryUsageRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): MemoryUsageRequest;
  static deserializeBinaryFromReader(message: MemoryUsageRequest, reader: jspb.BinaryReader): MemoryUsageRequest;
}

export namespace MemoryUsageRequest {
  export type AsObject = {
  }
}

export class MemUsage extends jspb.Message {
  getIs64bitprocess(): boolean;
  setIs64bitprocess(value: boolean): void;

  getPhysicalmemoryusage(): number;
  setPhysicalmemoryusage(value: number): void;

  getBasepriority(): number;
  setBasepriority(value: number): void;

  getPriorityclass(): string;
  setPriorityclass(value: string): void;

  getUserprocessortime(): string;
  setUserprocessortime(value: string): void;

  getPrivilegedprocessortime(): string;
  setPrivilegedprocessortime(value: string): void;

  getTotalprocessortime(): string;
  setTotalprocessortime(value: string): void;

  getPagedsystemmemorysize(): number;
  setPagedsystemmemorysize(value: number): void;

  getPagedmemorysize(): number;
  setPagedmemorysize(value: number): void;

  getPeakpagedmem(): number;
  setPeakpagedmem(value: number): void;

  getPeakvirtualmem(): number;
  setPeakvirtualmem(value: number): void;

  getPeakworkingset(): number;
  setPeakworkingset(value: number): void;

  getMemoryloadbytes(): number;
  setMemoryloadbytes(value: number): void;

  getHeapsizebytes(): number;
  setHeapsizebytes(value: number): void;

  getFragmentedbytes(): number;
  setFragmentedbytes(value: number): void;

  getHighmemoryloadthresholdbytes(): number;
  setHighmemoryloadthresholdbytes(value: number): void;

  getTotalavailablememorybytes(): number;
  setTotalavailablememorybytes(value: number): void;

  getResponding(): boolean;
  setResponding(value: boolean): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): MemUsage.AsObject;
  static toObject(includeInstance: boolean, msg: MemUsage): MemUsage.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: MemUsage, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): MemUsage;
  static deserializeBinaryFromReader(message: MemUsage, reader: jspb.BinaryReader): MemUsage;
}

export namespace MemUsage {
  export type AsObject = {
    is64bitprocess: boolean,
    physicalmemoryusage: number,
    basepriority: number,
    priorityclass: string,
    userprocessortime: string,
    privilegedprocessortime: string,
    totalprocessortime: string,
    pagedsystemmemorysize: number,
    pagedmemorysize: number,
    peakpagedmem: number,
    peakvirtualmem: number,
    peakworkingset: number,
    memoryloadbytes: number,
    heapsizebytes: number,
    fragmentedbytes: number,
    highmemoryloadthresholdbytes: number,
    totalavailablememorybytes: number,
    responding: boolean,
  }
}

export class MemoryUsageReply extends jspb.Message {
  hasResult(): boolean;
  clearResult(): void;
  getResult(): MemUsage | undefined;
  setResult(value?: MemUsage): void;

  hasError(): boolean;
  clearError(): void;
  getError(): Error | undefined;
  setError(value?: Error): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): MemoryUsageReply.AsObject;
  static toObject(includeInstance: boolean, msg: MemoryUsageReply): MemoryUsageReply.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: MemoryUsageReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): MemoryUsageReply;
  static deserializeBinaryFromReader(message: MemoryUsageReply, reader: jspb.BinaryReader): MemoryUsageReply;
}

export namespace MemoryUsageReply {
  export type AsObject = {
    result?: MemUsage.AsObject,
    error?: Error.AsObject,
  }
}

export class SubscribeRequest extends jspb.Message {
  getId(): string;
  setId(value: string): void;

  getSymbol(): string;
  setSymbol(value: string): void;

  getInterval(): number;
  setInterval(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SubscribeRequest.AsObject;
  static toObject(includeInstance: boolean, msg: SubscribeRequest): SubscribeRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: SubscribeRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SubscribeRequest;
  static deserializeBinaryFromReader(message: SubscribeRequest, reader: jspb.BinaryReader): SubscribeRequest;
}

export namespace SubscribeRequest {
  export type AsObject = {
    id: string,
    symbol: string,
    interval: number,
  }
}

export class SubscribeReply extends jspb.Message {
  getResult(): string;
  setResult(value: string): void;

  hasError(): boolean;
  clearError(): void;
  getError(): Error | undefined;
  setError(value?: Error): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SubscribeReply.AsObject;
  static toObject(includeInstance: boolean, msg: SubscribeReply): SubscribeReply.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: SubscribeReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SubscribeReply;
  static deserializeBinaryFromReader(message: SubscribeReply, reader: jspb.BinaryReader): SubscribeReply;
}

export namespace SubscribeReply {
  export type AsObject = {
    result: string,
    error?: Error.AsObject,
  }
}

export class SubscribeManyRequest extends jspb.Message {
  getId(): string;
  setId(value: string): void;

  clearSymbolsList(): void;
  getSymbolsList(): Array<string>;
  setSymbolsList(value: Array<string>): void;
  addSymbols(value: string, index?: number): string;

  getInterval(): number;
  setInterval(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SubscribeManyRequest.AsObject;
  static toObject(includeInstance: boolean, msg: SubscribeManyRequest): SubscribeManyRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: SubscribeManyRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SubscribeManyRequest;
  static deserializeBinaryFromReader(message: SubscribeManyRequest, reader: jspb.BinaryReader): SubscribeManyRequest;
}

export namespace SubscribeManyRequest {
  export type AsObject = {
    id: string,
    symbolsList: Array<string>,
    interval: number,
  }
}

export class SubscribeManyReply extends jspb.Message {
  getResult(): string;
  setResult(value: string): void;

  hasError(): boolean;
  clearError(): void;
  getError(): Error | undefined;
  setError(value?: Error): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SubscribeManyReply.AsObject;
  static toObject(includeInstance: boolean, msg: SubscribeManyReply): SubscribeManyReply.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: SubscribeManyReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SubscribeManyReply;
  static deserializeBinaryFromReader(message: SubscribeManyReply, reader: jspb.BinaryReader): SubscribeManyReply;
}

export namespace SubscribeManyReply {
  export type AsObject = {
    result: string,
    error?: Error.AsObject,
  }
}

export class UnSubscribeRequest extends jspb.Message {
  getId(): string;
  setId(value: string): void;

  getSymbol(): string;
  setSymbol(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UnSubscribeRequest.AsObject;
  static toObject(includeInstance: boolean, msg: UnSubscribeRequest): UnSubscribeRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: UnSubscribeRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): UnSubscribeRequest;
  static deserializeBinaryFromReader(message: UnSubscribeRequest, reader: jspb.BinaryReader): UnSubscribeRequest;
}

export namespace UnSubscribeRequest {
  export type AsObject = {
    id: string,
    symbol: string,
  }
}

export class UnSubscribeReply extends jspb.Message {
  getResult(): string;
  setResult(value: string): void;

  hasError(): boolean;
  clearError(): void;
  getError(): Error | undefined;
  setError(value?: Error): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UnSubscribeReply.AsObject;
  static toObject(includeInstance: boolean, msg: UnSubscribeReply): UnSubscribeReply.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: UnSubscribeReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): UnSubscribeReply;
  static deserializeBinaryFromReader(message: UnSubscribeReply, reader: jspb.BinaryReader): UnSubscribeReply;
}

export namespace UnSubscribeReply {
  export type AsObject = {
    result: string,
    error?: Error.AsObject,
  }
}

export class UnSubscribeManyRequest extends jspb.Message {
  getId(): string;
  setId(value: string): void;

  clearSymbolsList(): void;
  getSymbolsList(): Array<string>;
  setSymbolsList(value: Array<string>): void;
  addSymbols(value: string, index?: number): string;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UnSubscribeManyRequest.AsObject;
  static toObject(includeInstance: boolean, msg: UnSubscribeManyRequest): UnSubscribeManyRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: UnSubscribeManyRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): UnSubscribeManyRequest;
  static deserializeBinaryFromReader(message: UnSubscribeManyRequest, reader: jspb.BinaryReader): UnSubscribeManyRequest;
}

export namespace UnSubscribeManyRequest {
  export type AsObject = {
    id: string,
    symbolsList: Array<string>,
  }
}

export class UnSubscribeManyReply extends jspb.Message {
  getResult(): string;
  setResult(value: string): void;

  hasError(): boolean;
  clearError(): void;
  getError(): Error | undefined;
  setError(value?: Error): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UnSubscribeManyReply.AsObject;
  static toObject(includeInstance: boolean, msg: UnSubscribeManyReply): UnSubscribeManyReply.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: UnSubscribeManyReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): UnSubscribeManyReply;
  static deserializeBinaryFromReader(message: UnSubscribeManyReply, reader: jspb.BinaryReader): UnSubscribeManyReply;
}

export namespace UnSubscribeManyReply {
  export type AsObject = {
    result: string,
    error?: Error.AsObject,
  }
}

export class SubscribeOrderProfitRequest extends jspb.Message {
  getId(): string;
  setId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SubscribeOrderProfitRequest.AsObject;
  static toObject(includeInstance: boolean, msg: SubscribeOrderProfitRequest): SubscribeOrderProfitRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: SubscribeOrderProfitRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SubscribeOrderProfitRequest;
  static deserializeBinaryFromReader(message: SubscribeOrderProfitRequest, reader: jspb.BinaryReader): SubscribeOrderProfitRequest;
}

export namespace SubscribeOrderProfitRequest {
  export type AsObject = {
    id: string,
  }
}

export class SubscribeOrderProfitReply extends jspb.Message {
  clearResultList(): void;
  getResultList(): Array<Order>;
  setResultList(value: Array<Order>): void;
  addResult(value?: Order, index?: number): Order;

  hasError(): boolean;
  clearError(): void;
  getError(): Error | undefined;
  setError(value?: Error): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SubscribeOrderProfitReply.AsObject;
  static toObject(includeInstance: boolean, msg: SubscribeOrderProfitReply): SubscribeOrderProfitReply.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: SubscribeOrderProfitReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SubscribeOrderProfitReply;
  static deserializeBinaryFromReader(message: SubscribeOrderProfitReply, reader: jspb.BinaryReader): SubscribeOrderProfitReply;
}

export namespace SubscribeOrderProfitReply {
  export type AsObject = {
    resultList: Array<Order.AsObject>,
    error?: Error.AsObject,
  }
}

export class SubscribeTickValueRequest extends jspb.Message {
  getId(): string;
  setId(value: string): void;

  getSymbol(): string;
  setSymbol(value: string): void;

  getInterval(): number;
  setInterval(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SubscribeTickValueRequest.AsObject;
  static toObject(includeInstance: boolean, msg: SubscribeTickValueRequest): SubscribeTickValueRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: SubscribeTickValueRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SubscribeTickValueRequest;
  static deserializeBinaryFromReader(message: SubscribeTickValueRequest, reader: jspb.BinaryReader): SubscribeTickValueRequest;
}

export namespace SubscribeTickValueRequest {
  export type AsObject = {
    id: string,
    symbol: string,
    interval: number,
  }
}

export class SubscribeTickValueReply extends jspb.Message {
  getResult(): string;
  setResult(value: string): void;

  hasError(): boolean;
  clearError(): void;
  getError(): Error | undefined;
  setError(value?: Error): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SubscribeTickValueReply.AsObject;
  static toObject(includeInstance: boolean, msg: SubscribeTickValueReply): SubscribeTickValueReply.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: SubscribeTickValueReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SubscribeTickValueReply;
  static deserializeBinaryFromReader(message: SubscribeTickValueReply, reader: jspb.BinaryReader): SubscribeTickValueReply;
}

export namespace SubscribeTickValueReply {
  export type AsObject = {
    result: string,
    error?: Error.AsObject,
  }
}

export class SubscribeOrderUpdateRequest extends jspb.Message {
  getId(): string;
  setId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SubscribeOrderUpdateRequest.AsObject;
  static toObject(includeInstance: boolean, msg: SubscribeOrderUpdateRequest): SubscribeOrderUpdateRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: SubscribeOrderUpdateRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SubscribeOrderUpdateRequest;
  static deserializeBinaryFromReader(message: SubscribeOrderUpdateRequest, reader: jspb.BinaryReader): SubscribeOrderUpdateRequest;
}

export namespace SubscribeOrderUpdateRequest {
  export type AsObject = {
    id: string,
  }
}

export class SubscribeOrderUpdateReply extends jspb.Message {
  clearResultList(): void;
  getResultList(): Array<Order>;
  setResultList(value: Array<Order>): void;
  addResult(value?: Order, index?: number): Order;

  hasError(): boolean;
  clearError(): void;
  getError(): Error | undefined;
  setError(value?: Error): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SubscribeOrderUpdateReply.AsObject;
  static toObject(includeInstance: boolean, msg: SubscribeOrderUpdateReply): SubscribeOrderUpdateReply.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: SubscribeOrderUpdateReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SubscribeOrderUpdateReply;
  static deserializeBinaryFromReader(message: SubscribeOrderUpdateReply, reader: jspb.BinaryReader): SubscribeOrderUpdateReply;
}

export namespace SubscribeOrderUpdateReply {
  export type AsObject = {
    resultList: Array<Order.AsObject>,
    error?: Error.AsObject,
  }
}

export class SubscribeQuoteHistoryRequest extends jspb.Message {
  getId(): string;
  setId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SubscribeQuoteHistoryRequest.AsObject;
  static toObject(includeInstance: boolean, msg: SubscribeQuoteHistoryRequest): SubscribeQuoteHistoryRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: SubscribeQuoteHistoryRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SubscribeQuoteHistoryRequest;
  static deserializeBinaryFromReader(message: SubscribeQuoteHistoryRequest, reader: jspb.BinaryReader): SubscribeQuoteHistoryRequest;
}

export namespace SubscribeQuoteHistoryRequest {
  export type AsObject = {
    id: string,
  }
}

export class SubscribeQuoteHistoryReply extends jspb.Message {
  getResult(): string;
  setResult(value: string): void;

  hasError(): boolean;
  clearError(): void;
  getError(): Error | undefined;
  setError(value?: Error): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SubscribeQuoteHistoryReply.AsObject;
  static toObject(includeInstance: boolean, msg: SubscribeQuoteHistoryReply): SubscribeQuoteHistoryReply.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: SubscribeQuoteHistoryReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SubscribeQuoteHistoryReply;
  static deserializeBinaryFromReader(message: SubscribeQuoteHistoryReply, reader: jspb.BinaryReader): SubscribeQuoteHistoryReply;
}

export namespace SubscribeQuoteHistoryReply {
  export type AsObject = {
    result: string,
    error?: Error.AsObject,
  }
}

export class OrderSendRequest extends jspb.Message {
  getId(): string;
  setId(value: string): void;

  getSymbol(): string;
  setSymbol(value: string): void;

  getOperation(): OpMap[keyof OpMap];
  setOperation(value: OpMap[keyof OpMap]): void;

  getVolume(): number;
  setVolume(value: number): void;

  getPrice(): number;
  setPrice(value: number): void;

  getSlippage(): number;
  setSlippage(value: number): void;

  getStoploss(): number;
  setStoploss(value: number): void;

  getTakeprofit(): number;
  setTakeprofit(value: number): void;

  getComment(): string;
  setComment(value: string): void;

  getMagic(): number;
  setMagic(value: number): void;

  getExpiration(): string;
  setExpiration(value: string): void;

  getPlacedtype(): PlacedTypeMap[keyof PlacedTypeMap];
  setPlacedtype(value: PlacedTypeMap[keyof PlacedTypeMap]): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): OrderSendRequest.AsObject;
  static toObject(includeInstance: boolean, msg: OrderSendRequest): OrderSendRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: OrderSendRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): OrderSendRequest;
  static deserializeBinaryFromReader(message: OrderSendRequest, reader: jspb.BinaryReader): OrderSendRequest;
}

export namespace OrderSendRequest {
  export type AsObject = {
    id: string,
    symbol: string,
    operation: OpMap[keyof OpMap],
    volume: number,
    price: number,
    slippage: number,
    stoploss: number,
    takeprofit: number,
    comment: string,
    magic: number,
    expiration: string,
    placedtype: PlacedTypeMap[keyof PlacedTypeMap],
  }
}

export class OrderSendReply extends jspb.Message {
  hasResult(): boolean;
  clearResult(): void;
  getResult(): Order | undefined;
  setResult(value?: Order): void;

  hasError(): boolean;
  clearError(): void;
  getError(): Error | undefined;
  setError(value?: Error): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): OrderSendReply.AsObject;
  static toObject(includeInstance: boolean, msg: OrderSendReply): OrderSendReply.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: OrderSendReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): OrderSendReply;
  static deserializeBinaryFromReader(message: OrderSendReply, reader: jspb.BinaryReader): OrderSendReply;
}

export namespace OrderSendReply {
  export type AsObject = {
    result?: Order.AsObject,
    error?: Error.AsObject,
  }
}

export class OrderModifyRequest extends jspb.Message {
  getId(): string;
  setId(value: string): void;

  getTicket(): number;
  setTicket(value: number): void;

  getStoploss(): number;
  setStoploss(value: number): void;

  getTakeprofit(): number;
  setTakeprofit(value: number): void;

  getPrice(): number;
  setPrice(value: number): void;

  getExpiration(): string;
  setExpiration(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): OrderModifyRequest.AsObject;
  static toObject(includeInstance: boolean, msg: OrderModifyRequest): OrderModifyRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: OrderModifyRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): OrderModifyRequest;
  static deserializeBinaryFromReader(message: OrderModifyRequest, reader: jspb.BinaryReader): OrderModifyRequest;
}

export namespace OrderModifyRequest {
  export type AsObject = {
    id: string,
    ticket: number,
    stoploss: number,
    takeprofit: number,
    price: number,
    expiration: string,
  }
}

export class OrderModifyReply extends jspb.Message {
  hasResult(): boolean;
  clearResult(): void;
  getResult(): Order | undefined;
  setResult(value?: Order): void;

  hasError(): boolean;
  clearError(): void;
  getError(): Error | undefined;
  setError(value?: Error): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): OrderModifyReply.AsObject;
  static toObject(includeInstance: boolean, msg: OrderModifyReply): OrderModifyReply.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: OrderModifyReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): OrderModifyReply;
  static deserializeBinaryFromReader(message: OrderModifyReply, reader: jspb.BinaryReader): OrderModifyReply;
}

export namespace OrderModifyReply {
  export type AsObject = {
    result?: Order.AsObject,
    error?: Error.AsObject,
  }
}

export class OrderCloseByRequest extends jspb.Message {
  getId(): string;
  setId(value: string): void;

  getTicket1(): number;
  setTicket1(value: number): void;

  getTicket2(): number;
  setTicket2(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): OrderCloseByRequest.AsObject;
  static toObject(includeInstance: boolean, msg: OrderCloseByRequest): OrderCloseByRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: OrderCloseByRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): OrderCloseByRequest;
  static deserializeBinaryFromReader(message: OrderCloseByRequest, reader: jspb.BinaryReader): OrderCloseByRequest;
}

export namespace OrderCloseByRequest {
  export type AsObject = {
    id: string,
    ticket1: number,
    ticket2: number,
  }
}

export class OrderCloseByReply extends jspb.Message {
  getResult(): string;
  setResult(value: string): void;

  hasError(): boolean;
  clearError(): void;
  getError(): Error | undefined;
  setError(value?: Error): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): OrderCloseByReply.AsObject;
  static toObject(includeInstance: boolean, msg: OrderCloseByReply): OrderCloseByReply.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: OrderCloseByReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): OrderCloseByReply;
  static deserializeBinaryFromReader(message: OrderCloseByReply, reader: jspb.BinaryReader): OrderCloseByReply;
}

export namespace OrderCloseByReply {
  export type AsObject = {
    result: string,
    error?: Error.AsObject,
  }
}

export class OrderDeleteRequest extends jspb.Message {
  getId(): string;
  setId(value: string): void;

  getTicket(): number;
  setTicket(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): OrderDeleteRequest.AsObject;
  static toObject(includeInstance: boolean, msg: OrderDeleteRequest): OrderDeleteRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: OrderDeleteRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): OrderDeleteRequest;
  static deserializeBinaryFromReader(message: OrderDeleteRequest, reader: jspb.BinaryReader): OrderDeleteRequest;
}

export namespace OrderDeleteRequest {
  export type AsObject = {
    id: string,
    ticket: number,
  }
}

export class OrderDeleteReply extends jspb.Message {
  getResult(): string;
  setResult(value: string): void;

  hasError(): boolean;
  clearError(): void;
  getError(): Error | undefined;
  setError(value?: Error): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): OrderDeleteReply.AsObject;
  static toObject(includeInstance: boolean, msg: OrderDeleteReply): OrderDeleteReply.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: OrderDeleteReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): OrderDeleteReply;
  static deserializeBinaryFromReader(message: OrderDeleteReply, reader: jspb.BinaryReader): OrderDeleteReply;
}

export namespace OrderDeleteReply {
  export type AsObject = {
    result: string,
    error?: Error.AsObject,
  }
}

export class OrderCloseRequest extends jspb.Message {
  getId(): string;
  setId(value: string): void;

  getTicket(): number;
  setTicket(value: number): void;

  getLots(): number;
  setLots(value: number): void;

  getPrice(): number;
  setPrice(value: number): void;

  getSlippage(): number;
  setSlippage(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): OrderCloseRequest.AsObject;
  static toObject(includeInstance: boolean, msg: OrderCloseRequest): OrderCloseRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: OrderCloseRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): OrderCloseRequest;
  static deserializeBinaryFromReader(message: OrderCloseRequest, reader: jspb.BinaryReader): OrderCloseRequest;
}

export namespace OrderCloseRequest {
  export type AsObject = {
    id: string,
    ticket: number,
    lots: number,
    price: number,
    slippage: number,
  }
}

export class OrderCloseReply extends jspb.Message {
  hasResult(): boolean;
  clearResult(): void;
  getResult(): Order | undefined;
  setResult(value?: Order): void;

  hasError(): boolean;
  clearError(): void;
  getError(): Error | undefined;
  setError(value?: Error): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): OrderCloseReply.AsObject;
  static toObject(includeInstance: boolean, msg: OrderCloseReply): OrderCloseReply.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: OrderCloseReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): OrderCloseReply;
  static deserializeBinaryFromReader(message: OrderCloseReply, reader: jspb.BinaryReader): OrderCloseReply;
}

export namespace OrderCloseReply {
  export type AsObject = {
    result?: Order.AsObject,
    error?: Error.AsObject,
  }
}

export class EventsRequest extends jspb.Message {
  getId(): string;
  setId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EventsRequest.AsObject;
  static toObject(includeInstance: boolean, msg: EventsRequest): EventsRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EventsRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EventsRequest;
  static deserializeBinaryFromReader(message: EventsRequest, reader: jspb.BinaryReader): EventsRequest;
}

export namespace EventsRequest {
  export type AsObject = {
    id: string,
  }
}

export class EventsReply extends jspb.Message {
  getResult(): string;
  setResult(value: string): void;

  hasError(): boolean;
  clearError(): void;
  getError(): Error | undefined;
  setError(value?: Error): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EventsReply.AsObject;
  static toObject(includeInstance: boolean, msg: EventsReply): EventsReply.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EventsReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EventsReply;
  static deserializeBinaryFromReader(message: EventsReply, reader: jspb.BinaryReader): EventsReply;
}

export namespace EventsReply {
  export type AsObject = {
    result: string,
    error?: Error.AsObject,
  }
}

export class OnOrderUpdateRequest extends jspb.Message {
  getId(): string;
  setId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): OnOrderUpdateRequest.AsObject;
  static toObject(includeInstance: boolean, msg: OnOrderUpdateRequest): OnOrderUpdateRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: OnOrderUpdateRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): OnOrderUpdateRequest;
  static deserializeBinaryFromReader(message: OnOrderUpdateRequest, reader: jspb.BinaryReader): OnOrderUpdateRequest;
}

export namespace OnOrderUpdateRequest {
  export type AsObject = {
    id: string,
  }
}

export class OrderUpdateSummary extends jspb.Message {
  hasUpdate(): boolean;
  clearUpdate(): void;
  getUpdate(): OrderUpdateEventArgs | undefined;
  setUpdate(value?: OrderUpdateEventArgs): void;

  getBalance(): number;
  setBalance(value: number): void;

  getEquity(): number;
  setEquity(value: number): void;

  getMargin(): number;
  setMargin(value: number): void;

  getFreemargin(): number;
  setFreemargin(value: number): void;

  getProfit(): number;
  setProfit(value: number): void;

  clearOpenedordersList(): void;
  getOpenedordersList(): Array<Order>;
  setOpenedordersList(value: Array<Order>): void;
  addOpenedorders(value?: Order, index?: number): Order;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): OrderUpdateSummary.AsObject;
  static toObject(includeInstance: boolean, msg: OrderUpdateSummary): OrderUpdateSummary.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: OrderUpdateSummary, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): OrderUpdateSummary;
  static deserializeBinaryFromReader(message: OrderUpdateSummary, reader: jspb.BinaryReader): OrderUpdateSummary;
}

export namespace OrderUpdateSummary {
  export type AsObject = {
    update?: OrderUpdateEventArgs.AsObject,
    balance: number,
    equity: number,
    margin: number,
    freemargin: number,
    profit: number,
    openedordersList: Array<Order.AsObject>,
  }
}

export class OrderUpdateEventArgs extends jspb.Message {
  hasOrder(): boolean;
  clearOrder(): void;
  getOrder(): Order | undefined;
  setOrder(value?: Order): void;

  getAction(): UpdateActionMap[keyof UpdateActionMap];
  setAction(value: UpdateActionMap[keyof UpdateActionMap]): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): OrderUpdateEventArgs.AsObject;
  static toObject(includeInstance: boolean, msg: OrderUpdateEventArgs): OrderUpdateEventArgs.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: OrderUpdateEventArgs, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): OrderUpdateEventArgs;
  static deserializeBinaryFromReader(message: OrderUpdateEventArgs, reader: jspb.BinaryReader): OrderUpdateEventArgs;
}

export namespace OrderUpdateEventArgs {
  export type AsObject = {
    order?: Order.AsObject,
    action: UpdateActionMap[keyof UpdateActionMap],
  }
}

export class OnOrderUpdateReply extends jspb.Message {
  hasResult(): boolean;
  clearResult(): void;
  getResult(): OrderUpdateSummary | undefined;
  setResult(value?: OrderUpdateSummary): void;

  hasError(): boolean;
  clearError(): void;
  getError(): Error | undefined;
  setError(value?: Error): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): OnOrderUpdateReply.AsObject;
  static toObject(includeInstance: boolean, msg: OnOrderUpdateReply): OnOrderUpdateReply.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: OnOrderUpdateReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): OnOrderUpdateReply;
  static deserializeBinaryFromReader(message: OnOrderUpdateReply, reader: jspb.BinaryReader): OnOrderUpdateReply;
}

export namespace OnOrderUpdateReply {
  export type AsObject = {
    result?: OrderUpdateSummary.AsObject,
    error?: Error.AsObject,
  }
}

export class OnQuoteRequest extends jspb.Message {
  getId(): string;
  setId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): OnQuoteRequest.AsObject;
  static toObject(includeInstance: boolean, msg: OnQuoteRequest): OnQuoteRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: OnQuoteRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): OnQuoteRequest;
  static deserializeBinaryFromReader(message: OnQuoteRequest, reader: jspb.BinaryReader): OnQuoteRequest;
}

export namespace OnQuoteRequest {
  export type AsObject = {
    id: string,
  }
}

export class OnQuoteReply extends jspb.Message {
  hasResult(): boolean;
  clearResult(): void;
  getResult(): QuoteEventArgs | undefined;
  setResult(value?: QuoteEventArgs): void;

  hasError(): boolean;
  clearError(): void;
  getError(): Error | undefined;
  setError(value?: Error): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): OnQuoteReply.AsObject;
  static toObject(includeInstance: boolean, msg: OnQuoteReply): OnQuoteReply.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: OnQuoteReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): OnQuoteReply;
  static deserializeBinaryFromReader(message: OnQuoteReply, reader: jspb.BinaryReader): OnQuoteReply;
}

export namespace OnQuoteReply {
  export type AsObject = {
    result?: QuoteEventArgs.AsObject,
    error?: Error.AsObject,
  }
}

export class OnTickValueRequest extends jspb.Message {
  getId(): string;
  setId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): OnTickValueRequest.AsObject;
  static toObject(includeInstance: boolean, msg: OnTickValueRequest): OnTickValueRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: OnTickValueRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): OnTickValueRequest;
  static deserializeBinaryFromReader(message: OnTickValueRequest, reader: jspb.BinaryReader): OnTickValueRequest;
}

export namespace OnTickValueRequest {
  export type AsObject = {
    id: string,
  }
}

export class SymbolTickValue extends jspb.Message {
  getSymbol(): string;
  setSymbol(value: string): void;

  getTickvalue(): number;
  setTickvalue(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SymbolTickValue.AsObject;
  static toObject(includeInstance: boolean, msg: SymbolTickValue): SymbolTickValue.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: SymbolTickValue, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SymbolTickValue;
  static deserializeBinaryFromReader(message: SymbolTickValue, reader: jspb.BinaryReader): SymbolTickValue;
}

export namespace SymbolTickValue {
  export type AsObject = {
    symbol: string,
    tickvalue: number,
  }
}

export class OnTickValueReply extends jspb.Message {
  hasResult(): boolean;
  clearResult(): void;
  getResult(): SymbolTickValue | undefined;
  setResult(value?: SymbolTickValue): void;

  hasError(): boolean;
  clearError(): void;
  getError(): Error | undefined;
  setError(value?: Error): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): OnTickValueReply.AsObject;
  static toObject(includeInstance: boolean, msg: OnTickValueReply): OnTickValueReply.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: OnTickValueReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): OnTickValueReply;
  static deserializeBinaryFromReader(message: OnTickValueReply, reader: jspb.BinaryReader): OnTickValueReply;
}

export namespace OnTickValueReply {
  export type AsObject = {
    result?: SymbolTickValue.AsObject,
    error?: Error.AsObject,
  }
}

export class OnOrderProfitRequest extends jspb.Message {
  getId(): string;
  setId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): OnOrderProfitRequest.AsObject;
  static toObject(includeInstance: boolean, msg: OnOrderProfitRequest): OnOrderProfitRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: OnOrderProfitRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): OnOrderProfitRequest;
  static deserializeBinaryFromReader(message: OnOrderProfitRequest, reader: jspb.BinaryReader): OnOrderProfitRequest;
}

export namespace OnOrderProfitRequest {
  export type AsObject = {
    id: string,
  }
}

export class ProfitUpdate extends jspb.Message {
  getBalance(): number;
  setBalance(value: number): void;

  getEquity(): number;
  setEquity(value: number): void;

  getMargin(): number;
  setMargin(value: number): void;

  getFreemargin(): number;
  setFreemargin(value: number): void;

  getProfit(): number;
  setProfit(value: number): void;

  clearOrdersList(): void;
  getOrdersList(): Array<Order>;
  setOrdersList(value: Array<Order>): void;
  addOrders(value?: Order, index?: number): Order;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ProfitUpdate.AsObject;
  static toObject(includeInstance: boolean, msg: ProfitUpdate): ProfitUpdate.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ProfitUpdate, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ProfitUpdate;
  static deserializeBinaryFromReader(message: ProfitUpdate, reader: jspb.BinaryReader): ProfitUpdate;
}

export namespace ProfitUpdate {
  export type AsObject = {
    balance: number,
    equity: number,
    margin: number,
    freemargin: number,
    profit: number,
    ordersList: Array<Order.AsObject>,
  }
}

export class OnOrderProfitReply extends jspb.Message {
  hasResult(): boolean;
  clearResult(): void;
  getResult(): ProfitUpdate | undefined;
  setResult(value?: ProfitUpdate): void;

  hasError(): boolean;
  clearError(): void;
  getError(): Error | undefined;
  setError(value?: Error): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): OnOrderProfitReply.AsObject;
  static toObject(includeInstance: boolean, msg: OnOrderProfitReply): OnOrderProfitReply.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: OnOrderProfitReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): OnOrderProfitReply;
  static deserializeBinaryFromReader(message: OnOrderProfitReply, reader: jspb.BinaryReader): OnOrderProfitReply;
}

export namespace OnOrderProfitReply {
  export type AsObject = {
    result?: ProfitUpdate.AsObject,
    error?: Error.AsObject,
  }
}

export class OnQuoteHistoryRequest extends jspb.Message {
  getId(): string;
  setId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): OnQuoteHistoryRequest.AsObject;
  static toObject(includeInstance: boolean, msg: OnQuoteHistoryRequest): OnQuoteHistoryRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: OnQuoteHistoryRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): OnQuoteHistoryRequest;
  static deserializeBinaryFromReader(message: OnQuoteHistoryRequest, reader: jspb.BinaryReader): OnQuoteHistoryRequest;
}

export namespace OnQuoteHistoryRequest {
  export type AsObject = {
    id: string,
  }
}

export class QuoteHistoryEventArgs extends jspb.Message {
  getSymbol(): string;
  setSymbol(value: string): void;

  getTimeframe(): TimeframeMap[keyof TimeframeMap];
  setTimeframe(value: TimeframeMap[keyof TimeframeMap]): void;

  clearBarsList(): void;
  getBarsList(): Array<Bar>;
  setBarsList(value: Array<Bar>): void;
  addBars(value?: Bar, index?: number): Bar;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QuoteHistoryEventArgs.AsObject;
  static toObject(includeInstance: boolean, msg: QuoteHistoryEventArgs): QuoteHistoryEventArgs.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QuoteHistoryEventArgs, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QuoteHistoryEventArgs;
  static deserializeBinaryFromReader(message: QuoteHistoryEventArgs, reader: jspb.BinaryReader): QuoteHistoryEventArgs;
}

export namespace QuoteHistoryEventArgs {
  export type AsObject = {
    symbol: string,
    timeframe: TimeframeMap[keyof TimeframeMap],
    barsList: Array<Bar.AsObject>,
  }
}

export class OnQuoteHistoryReply extends jspb.Message {
  hasResult(): boolean;
  clearResult(): void;
  getResult(): QuoteHistoryEventArgs | undefined;
  setResult(value?: QuoteHistoryEventArgs): void;

  hasError(): boolean;
  clearError(): void;
  getError(): Error | undefined;
  setError(value?: Error): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): OnQuoteHistoryReply.AsObject;
  static toObject(includeInstance: boolean, msg: OnQuoteHistoryReply): OnQuoteHistoryReply.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: OnQuoteHistoryReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): OnQuoteHistoryReply;
  static deserializeBinaryFromReader(message: OnQuoteHistoryReply, reader: jspb.BinaryReader): OnQuoteHistoryReply;
}

export namespace OnQuoteHistoryReply {
  export type AsObject = {
    result?: QuoteHistoryEventArgs.AsObject,
    error?: Error.AsObject,
  }
}

export class OnDisconnectRequest extends jspb.Message {
  getId(): string;
  setId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): OnDisconnectRequest.AsObject;
  static toObject(includeInstance: boolean, msg: OnDisconnectRequest): OnDisconnectRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: OnDisconnectRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): OnDisconnectRequest;
  static deserializeBinaryFromReader(message: OnDisconnectRequest, reader: jspb.BinaryReader): OnDisconnectRequest;
}

export namespace OnDisconnectRequest {
  export type AsObject = {
    id: string,
  }
}

export class OnDisconnectReply extends jspb.Message {
  getResult(): string;
  setResult(value: string): void;

  hasError(): boolean;
  clearError(): void;
  getError(): Error | undefined;
  setError(value?: Error): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): OnDisconnectReply.AsObject;
  static toObject(includeInstance: boolean, msg: OnDisconnectReply): OnDisconnectReply.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: OnDisconnectReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): OnDisconnectReply;
  static deserializeBinaryFromReader(message: OnDisconnectReply, reader: jspb.BinaryReader): OnDisconnectReply;
}

export namespace OnDisconnectReply {
  export type AsObject = {
    result: string,
    error?: Error.AsObject,
  }
}

export interface AccountTypeMap {
  ACCOUNTTYPE_REAL: 0;
  ACCOUNTTYPE_CONTEST: 1;
  ACCOUNTTYPE_DEMO: 2;
}

export const AccountType: AccountTypeMap;

export interface PlacedTypeMap {
  PLACEDTYPE_CLIENT: 0;
  PLACEDTYPE_EXPERT: 1;
  PLACEDTYPE_DEALER: 2;
  PLACEDTYPE_SIGNAL: 3;
  PLACEDTYPE_GATEWAY: 4;
  PLACEDTYPE_MOBILE: 5;
  PLACEDTYPE_WEB: 6;
  PLACEDTYPE_API: 7;
  PLACEDTYPE_DEFAULT: 8;
}

export const PlacedType: PlacedTypeMap;

export interface OpMap {
  OP_BUY: 0;
  OP_SELL: 1;
  OP_BUYLIMIT: 2;
  OP_SELLLIMIT: 3;
  OP_BUYSTOP: 4;
  OP_SELLSTOP: 5;
  OP_BALANCE: 6;
  OP_CREDIT: 7;
}

export const Op: OpMap;

export interface ExecutionMap {
  EXECUTION_REQUEST: 0;
  EXECUTION_INSTANT: 1;
  EXECUTION_MARKET: 2;
}

export const Execution: ExecutionMap;

export interface ProfitModeMap {
  PROFITMODE_FOREX: 0;
  PROFITMODE_CFD: 1;
  PROFITMODE_FUTURES: 2;
}

export const ProfitMode: ProfitModeMap;

export interface MarginModeMap {
  MARGINMODE_FOREX: 0;
  MARGINMODE_CFD: 1;
  MARGINMODE_FUTURES: 2;
  MARGINMODE_CFDINDEX: 3;
  MARGINMODE_CFDLEVERAGE: 4;
}

export const MarginMode: MarginModeMap;

export interface TimeframeMap {
  TIMEFRAME_M0: 0;
  TIMEFRAME_M1: 1;
  TIMEFRAME_M5: 5;
  TIMEFRAME_M15: 15;
  TIMEFRAME_M30: 30;
  TIMEFRAME_H1: 60;
  TIMEFRAME_H4: 240;
  TIMEFRAME_D1: 1440;
  TIMEFRAME_W1: 10080;
  TIMEFRAME_MN1: 43200;
}

export const Timeframe: TimeframeMap;

export interface LogEventLevelMap {
  LOGEVENTLEVEL_VERBOSE: 0;
  LOGEVENTLEVEL_DEBUG: 1;
  LOGEVENTLEVEL_INFORMATION: 2;
  LOGEVENTLEVEL_WARNING: 3;
  LOGEVENTLEVEL_ERROR: 4;
  LOGEVENTLEVEL_FATAL: 5;
}

export const LogEventLevel: LogEventLevelMap;

export interface UpdateActionMap {
  UPDATEACTION_POSITIONOPEN: 0;
  UPDATEACTION_POSITIONCLOSE: 1;
  UPDATEACTION_POSITIONMODIFY: 2;
  UPDATEACTION_PENDINGOPEN: 3;
  UPDATEACTION_PENDINGCLOSE: 4;
  UPDATEACTION_PENDINGMODIFY: 5;
  UPDATEACTION_PENDINGFILL: 6;
  UPDATEACTION_BALANCE: 7;
  UPDATEACTION_CREDIT: 8;
}

export const UpdateAction: UpdateActionMap;

export interface ErrorCodeMap {
  INTERNAL_ERROR: 0;
  COMMON_ERROR: 2;
  INVALID_PARAM: 3;
  SERVER_BUSY: 4;
  OLD_VERSION: 5;
  NO_CONNECT: 6;
  NOT_ENOUGH_RIGHTS: 7;
  TOO_FREQUENT_REQUEST: 8;
  NO_CONNECTION: 10;
  SERVICE_NOT_AVAILABLE: 11;
  TOO_FREQUENT_REQUESTS: 12;
  SECRET_KEY_REQUIRED: 13;
  INVALID_ONETIME_PASSWORD: 14;
  ACCOUNT_DISABLED: 64;
  INVALID_ACCOUNT: 65;
  PUBLIC_KEY_NOT_FOUND: 66;
  TRADE_TIMEOUT: 128;
  INVALID_PRICES: 129;
  INVALID_SL_TP: 130;
  INVALID_VOLUME: 131;
  MARKET_CLOSED: 132;
  TRADE_DISABLED: 133;
  NOT_MONEY: 134;
  PRICE_CHANGED: 135;
  OFF_QUOTES: 136;
  BROKER_BUSY: 137;
  REQUOTE: 138;
  ORDER_LOCKED: 139;
  LONG_POS_ALLOWED: 140;
  TOO_MANY_REQUESTS: 141;
  ORDER_ACCEPTED: 142;
  ORDER_IN_PROCESS: 143;
  REQUEST_CANCELLED: 144;
  MODIFICATIONS_DENIED: 145;
  TRADE_CONTEXT_BUSY: 146;
  EXPIRATION_DISABLED: 147;
  TOO_MANY_ORDERS: 148;
  HEDGE_PROHIBITED: 149;
  RPROHIBITED_FIFO: 150;
  INVALID_TOKEN: 256;
  INVALID_SYMBOL: 257;
  INVALID_TICKET: 258;
  SAME_PARAMS: 259;
  CONNECT_ERROR: 260;
  TIMEOUT: 261;
}

export const ErrorCode: ErrorCodeMap;

