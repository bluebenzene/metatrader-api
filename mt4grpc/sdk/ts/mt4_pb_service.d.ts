/* eslint-disable */
/*Generated by GenDocu.com*/
// package: mt4grpc
// file: mt4.proto

import * as mt4_pb from "./mt4_pb";
import {grpc} from "@improbable-eng/grpc-web";

type ConnectionConnect = {
  readonly methodName: string;
  readonly service: typeof Connection;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof mt4_pb.ConnectRequest;
  readonly responseType: typeof mt4_pb.ConnectReply;
};

type ConnectionCheckConnect = {
  readonly methodName: string;
  readonly service: typeof Connection;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof mt4_pb.CheckConnectRequest;
  readonly responseType: typeof mt4_pb.CheckConnectReply;
};

type ConnectionDisconnect = {
  readonly methodName: string;
  readonly service: typeof Connection;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof mt4_pb.DisconnectRequest;
  readonly responseType: typeof mt4_pb.DisconnectReply;
};

export class Connection {
  static readonly serviceName: string;
  static readonly Connect: ConnectionConnect;
  static readonly CheckConnect: ConnectionCheckConnect;
  static readonly Disconnect: ConnectionDisconnect;
}

type MT4AccountSummary = {
  readonly methodName: string;
  readonly service: typeof MT4;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof mt4_pb.AccountSummaryRequest;
  readonly responseType: typeof mt4_pb.AccountSummaryReply;
};

type MT4Groups = {
  readonly methodName: string;
  readonly service: typeof MT4;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof mt4_pb.GroupsRequest;
  readonly responseType: typeof mt4_pb.GroupsReply;
};

type MT4Quote = {
  readonly methodName: string;
  readonly service: typeof MT4;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof mt4_pb.QuoteRequest;
  readonly responseType: typeof mt4_pb.QuoteReply;
};

type MT4OpenedOrders = {
  readonly methodName: string;
  readonly service: typeof MT4;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof mt4_pb.OpenedOrdersRequest;
  readonly responseType: typeof mt4_pb.OpenedOrdersReply;
};

type MT4Symbols = {
  readonly methodName: string;
  readonly service: typeof MT4;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof mt4_pb.SymbolsRequest;
  readonly responseType: typeof mt4_pb.SymbolsReply;
};

type MT4SymbolParams = {
  readonly methodName: string;
  readonly service: typeof MT4;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof mt4_pb.SymbolParamsRequest;
  readonly responseType: typeof mt4_pb.SymbolParamsReply;
};

type MT4ServerTimezone = {
  readonly methodName: string;
  readonly service: typeof MT4;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof mt4_pb.ServerTimezoneRequest;
  readonly responseType: typeof mt4_pb.ServerTimezoneReply;
};

type MT4SymbolParamsMany = {
  readonly methodName: string;
  readonly service: typeof MT4;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof mt4_pb.SymbolParamsManyRequest;
  readonly responseType: typeof mt4_pb.SymbolParamsManyReply;
};

type MT4OpenedOrder = {
  readonly methodName: string;
  readonly service: typeof MT4;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof mt4_pb.OpenedOrderRequest;
  readonly responseType: typeof mt4_pb.OpenedOrderReply;
};

type MT4OrderHistory = {
  readonly methodName: string;
  readonly service: typeof MT4;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof mt4_pb.OrderHistoryRequest;
  readonly responseType: typeof mt4_pb.OrderHistoryReply;
};

type MT4QuoteHistory = {
  readonly methodName: string;
  readonly service: typeof MT4;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof mt4_pb.QuoteHistoryRequest;
  readonly responseType: typeof mt4_pb.QuoteHistoryReply;
};

type MT4QuoteHistoryMany = {
  readonly methodName: string;
  readonly service: typeof MT4;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof mt4_pb.QuoteHistoryManyRequest;
  readonly responseType: typeof mt4_pb.QuoteHistoryManyReply;
};

type MT4ClosedOrders = {
  readonly methodName: string;
  readonly service: typeof MT4;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof mt4_pb.ClosedOrdersRequest;
  readonly responseType: typeof mt4_pb.ClosedOrdersReply;
};

type MT4RequestQuoteHistory = {
  readonly methodName: string;
  readonly service: typeof MT4;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof mt4_pb.RequestQuoteHistoryRequest;
  readonly responseType: typeof mt4_pb.RequestQuoteHistoryReply;
};

type MT4SetPlacedType = {
  readonly methodName: string;
  readonly service: typeof MT4;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof mt4_pb.SetPlacedTypeRequest;
  readonly responseType: typeof mt4_pb.SetPlacedTypeReply;
};

type MT4IsInvestor = {
  readonly methodName: string;
  readonly service: typeof MT4;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof mt4_pb.IsInvestorRequest;
  readonly responseType: typeof mt4_pb.IsInvestorReply;
};

export class MT4 {
  static readonly serviceName: string;
  static readonly AccountSummary: MT4AccountSummary;
  static readonly Groups: MT4Groups;
  static readonly Quote: MT4Quote;
  static readonly OpenedOrders: MT4OpenedOrders;
  static readonly Symbols: MT4Symbols;
  static readonly SymbolParams: MT4SymbolParams;
  static readonly ServerTimezone: MT4ServerTimezone;
  static readonly SymbolParamsMany: MT4SymbolParamsMany;
  static readonly OpenedOrder: MT4OpenedOrder;
  static readonly OrderHistory: MT4OrderHistory;
  static readonly QuoteHistory: MT4QuoteHistory;
  static readonly QuoteHistoryMany: MT4QuoteHistoryMany;
  static readonly ClosedOrders: MT4ClosedOrders;
  static readonly RequestQuoteHistory: MT4RequestQuoteHistory;
  static readonly SetPlacedType: MT4SetPlacedType;
  static readonly IsInvestor: MT4IsInvestor;
}

type ServicePing = {
  readonly methodName: string;
  readonly service: typeof Service;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof mt4_pb.PingRequest;
  readonly responseType: typeof mt4_pb.PingReply;
};

type ServiceGetLogs = {
  readonly methodName: string;
  readonly service: typeof Service;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof mt4_pb.GetLogsRequest;
  readonly responseType: typeof mt4_pb.GetLogsReply;
};

type ServiceGetLogsByUser = {
  readonly methodName: string;
  readonly service: typeof Service;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof mt4_pb.GetLogsByUserRequest;
  readonly responseType: typeof mt4_pb.GetLogsByUserReply;
};

type ServiceMemorySnapshot = {
  readonly methodName: string;
  readonly service: typeof Service;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof mt4_pb.MemorySnapshotRequest;
  readonly responseType: typeof mt4_pb.MemorySnapshotReply;
};

type ServiceSearch = {
  readonly methodName: string;
  readonly service: typeof Service;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof mt4_pb.SearchRequest;
  readonly responseType: typeof mt4_pb.SearchReply;
};

type ServiceGetClients = {
  readonly methodName: string;
  readonly service: typeof Service;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof mt4_pb.GetClientsRequest;
  readonly responseType: typeof mt4_pb.GetClientsReply;
};

type ServiceMemoryUsage = {
  readonly methodName: string;
  readonly service: typeof Service;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof mt4_pb.MemoryUsageRequest;
  readonly responseType: typeof mt4_pb.MemoryUsageReply;
};

export class Service {
  static readonly serviceName: string;
  static readonly Ping: ServicePing;
  static readonly GetLogs: ServiceGetLogs;
  static readonly GetLogsByUser: ServiceGetLogsByUser;
  static readonly MemorySnapshot: ServiceMemorySnapshot;
  static readonly Search: ServiceSearch;
  static readonly GetClients: ServiceGetClients;
  static readonly MemoryUsage: ServiceMemoryUsage;
}

type SubscriptionsSubscribe = {
  readonly methodName: string;
  readonly service: typeof Subscriptions;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof mt4_pb.SubscribeRequest;
  readonly responseType: typeof mt4_pb.SubscribeReply;
};

type SubscriptionsSubscribeMany = {
  readonly methodName: string;
  readonly service: typeof Subscriptions;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof mt4_pb.SubscribeManyRequest;
  readonly responseType: typeof mt4_pb.SubscribeManyReply;
};

type SubscriptionsUnSubscribe = {
  readonly methodName: string;
  readonly service: typeof Subscriptions;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof mt4_pb.UnSubscribeRequest;
  readonly responseType: typeof mt4_pb.UnSubscribeReply;
};

type SubscriptionsUnSubscribeMany = {
  readonly methodName: string;
  readonly service: typeof Subscriptions;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof mt4_pb.UnSubscribeManyRequest;
  readonly responseType: typeof mt4_pb.UnSubscribeManyReply;
};

type SubscriptionsSubscribeOrderProfit = {
  readonly methodName: string;
  readonly service: typeof Subscriptions;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof mt4_pb.SubscribeOrderProfitRequest;
  readonly responseType: typeof mt4_pb.SubscribeOrderProfitReply;
};

type SubscriptionsSubscribeTickValue = {
  readonly methodName: string;
  readonly service: typeof Subscriptions;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof mt4_pb.SubscribeTickValueRequest;
  readonly responseType: typeof mt4_pb.SubscribeTickValueReply;
};

type SubscriptionsSubscribeOrderUpdate = {
  readonly methodName: string;
  readonly service: typeof Subscriptions;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof mt4_pb.SubscribeOrderUpdateRequest;
  readonly responseType: typeof mt4_pb.SubscribeOrderUpdateReply;
};

type SubscriptionsSubscribeQuoteHistory = {
  readonly methodName: string;
  readonly service: typeof Subscriptions;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof mt4_pb.SubscribeQuoteHistoryRequest;
  readonly responseType: typeof mt4_pb.SubscribeQuoteHistoryReply;
};

export class Subscriptions {
  static readonly serviceName: string;
  static readonly Subscribe: SubscriptionsSubscribe;
  static readonly SubscribeMany: SubscriptionsSubscribeMany;
  static readonly UnSubscribe: SubscriptionsUnSubscribe;
  static readonly UnSubscribeMany: SubscriptionsUnSubscribeMany;
  static readonly SubscribeOrderProfit: SubscriptionsSubscribeOrderProfit;
  static readonly SubscribeTickValue: SubscriptionsSubscribeTickValue;
  static readonly SubscribeOrderUpdate: SubscriptionsSubscribeOrderUpdate;
  static readonly SubscribeQuoteHistory: SubscriptionsSubscribeQuoteHistory;
}

type TradingOrderSend = {
  readonly methodName: string;
  readonly service: typeof Trading;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof mt4_pb.OrderSendRequest;
  readonly responseType: typeof mt4_pb.OrderSendReply;
};

type TradingOrderModify = {
  readonly methodName: string;
  readonly service: typeof Trading;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof mt4_pb.OrderModifyRequest;
  readonly responseType: typeof mt4_pb.OrderModifyReply;
};

type TradingOrderCloseBy = {
  readonly methodName: string;
  readonly service: typeof Trading;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof mt4_pb.OrderCloseByRequest;
  readonly responseType: typeof mt4_pb.OrderCloseByReply;
};

type TradingOrderDelete = {
  readonly methodName: string;
  readonly service: typeof Trading;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof mt4_pb.OrderDeleteRequest;
  readonly responseType: typeof mt4_pb.OrderDeleteReply;
};

type TradingOrderClose = {
  readonly methodName: string;
  readonly service: typeof Trading;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof mt4_pb.OrderCloseRequest;
  readonly responseType: typeof mt4_pb.OrderCloseReply;
};

export class Trading {
  static readonly serviceName: string;
  static readonly OrderSend: TradingOrderSend;
  static readonly OrderModify: TradingOrderModify;
  static readonly OrderCloseBy: TradingOrderCloseBy;
  static readonly OrderDelete: TradingOrderDelete;
  static readonly OrderClose: TradingOrderClose;
}

type StreamsOnOrderUpdate = {
  readonly methodName: string;
  readonly service: typeof Streams;
  readonly requestStream: false;
  readonly responseStream: true;
  readonly requestType: typeof mt4_pb.OnOrderUpdateRequest;
  readonly responseType: typeof mt4_pb.OnOrderUpdateReply;
};

type StreamsOnQuote = {
  readonly methodName: string;
  readonly service: typeof Streams;
  readonly requestStream: false;
  readonly responseStream: true;
  readonly requestType: typeof mt4_pb.OnQuoteRequest;
  readonly responseType: typeof mt4_pb.OnQuoteReply;
};

type StreamsOnTickValue = {
  readonly methodName: string;
  readonly service: typeof Streams;
  readonly requestStream: false;
  readonly responseStream: true;
  readonly requestType: typeof mt4_pb.OnTickValueRequest;
  readonly responseType: typeof mt4_pb.OnTickValueReply;
};

type StreamsOnOrderProfit = {
  readonly methodName: string;
  readonly service: typeof Streams;
  readonly requestStream: false;
  readonly responseStream: true;
  readonly requestType: typeof mt4_pb.OnOrderProfitRequest;
  readonly responseType: typeof mt4_pb.OnOrderProfitReply;
};

export class Streams {
  static readonly serviceName: string;
  static readonly OnOrderUpdate: StreamsOnOrderUpdate;
  static readonly OnQuote: StreamsOnQuote;
  static readonly OnTickValue: StreamsOnTickValue;
  static readonly OnOrderProfit: StreamsOnOrderProfit;
}

export type ServiceError = { message: string, code: number; metadata: grpc.Metadata }
export type Status = { details: string, code: number; metadata: grpc.Metadata }

interface UnaryResponse {
  cancel(): void;
}
interface ResponseStream<T> {
  cancel(): void;
  on(type: 'data', handler: (message: T) => void): ResponseStream<T>;
  on(type: 'end', handler: (status?: Status) => void): ResponseStream<T>;
  on(type: 'status', handler: (status: Status) => void): ResponseStream<T>;
}
interface RequestStream<T> {
  write(message: T): RequestStream<T>;
  end(): void;
  cancel(): void;
  on(type: 'end', handler: (status?: Status) => void): RequestStream<T>;
  on(type: 'status', handler: (status: Status) => void): RequestStream<T>;
}
interface BidirectionalStream<ReqT, ResT> {
  write(message: ReqT): BidirectionalStream<ReqT, ResT>;
  end(): void;
  cancel(): void;
  on(type: 'data', handler: (message: ResT) => void): BidirectionalStream<ReqT, ResT>;
  on(type: 'end', handler: (status?: Status) => void): BidirectionalStream<ReqT, ResT>;
  on(type: 'status', handler: (status: Status) => void): BidirectionalStream<ReqT, ResT>;
}

export class ConnectionClient {
  readonly serviceHost: string;

  constructor(serviceHost: string, options?: grpc.RpcOptions);
  connect(
    requestMessage: mt4_pb.ConnectRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: mt4_pb.ConnectReply|null) => void
  ): UnaryResponse;
  connect(
    requestMessage: mt4_pb.ConnectRequest,
    callback: (error: ServiceError|null, responseMessage: mt4_pb.ConnectReply|null) => void
  ): UnaryResponse;
  checkConnect(
    requestMessage: mt4_pb.CheckConnectRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: mt4_pb.CheckConnectReply|null) => void
  ): UnaryResponse;
  checkConnect(
    requestMessage: mt4_pb.CheckConnectRequest,
    callback: (error: ServiceError|null, responseMessage: mt4_pb.CheckConnectReply|null) => void
  ): UnaryResponse;
  disconnect(
    requestMessage: mt4_pb.DisconnectRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: mt4_pb.DisconnectReply|null) => void
  ): UnaryResponse;
  disconnect(
    requestMessage: mt4_pb.DisconnectRequest,
    callback: (error: ServiceError|null, responseMessage: mt4_pb.DisconnectReply|null) => void
  ): UnaryResponse;
}

export class MT4Client {
  readonly serviceHost: string;

  constructor(serviceHost: string, options?: grpc.RpcOptions);
  accountSummary(
    requestMessage: mt4_pb.AccountSummaryRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: mt4_pb.AccountSummaryReply|null) => void
  ): UnaryResponse;
  accountSummary(
    requestMessage: mt4_pb.AccountSummaryRequest,
    callback: (error: ServiceError|null, responseMessage: mt4_pb.AccountSummaryReply|null) => void
  ): UnaryResponse;
  groups(
    requestMessage: mt4_pb.GroupsRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: mt4_pb.GroupsReply|null) => void
  ): UnaryResponse;
  groups(
    requestMessage: mt4_pb.GroupsRequest,
    callback: (error: ServiceError|null, responseMessage: mt4_pb.GroupsReply|null) => void
  ): UnaryResponse;
  quote(
    requestMessage: mt4_pb.QuoteRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: mt4_pb.QuoteReply|null) => void
  ): UnaryResponse;
  quote(
    requestMessage: mt4_pb.QuoteRequest,
    callback: (error: ServiceError|null, responseMessage: mt4_pb.QuoteReply|null) => void
  ): UnaryResponse;
  openedOrders(
    requestMessage: mt4_pb.OpenedOrdersRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: mt4_pb.OpenedOrdersReply|null) => void
  ): UnaryResponse;
  openedOrders(
    requestMessage: mt4_pb.OpenedOrdersRequest,
    callback: (error: ServiceError|null, responseMessage: mt4_pb.OpenedOrdersReply|null) => void
  ): UnaryResponse;
  symbols(
    requestMessage: mt4_pb.SymbolsRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: mt4_pb.SymbolsReply|null) => void
  ): UnaryResponse;
  symbols(
    requestMessage: mt4_pb.SymbolsRequest,
    callback: (error: ServiceError|null, responseMessage: mt4_pb.SymbolsReply|null) => void
  ): UnaryResponse;
  symbolParams(
    requestMessage: mt4_pb.SymbolParamsRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: mt4_pb.SymbolParamsReply|null) => void
  ): UnaryResponse;
  symbolParams(
    requestMessage: mt4_pb.SymbolParamsRequest,
    callback: (error: ServiceError|null, responseMessage: mt4_pb.SymbolParamsReply|null) => void
  ): UnaryResponse;
  serverTimezone(
    requestMessage: mt4_pb.ServerTimezoneRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: mt4_pb.ServerTimezoneReply|null) => void
  ): UnaryResponse;
  serverTimezone(
    requestMessage: mt4_pb.ServerTimezoneRequest,
    callback: (error: ServiceError|null, responseMessage: mt4_pb.ServerTimezoneReply|null) => void
  ): UnaryResponse;
  symbolParamsMany(
    requestMessage: mt4_pb.SymbolParamsManyRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: mt4_pb.SymbolParamsManyReply|null) => void
  ): UnaryResponse;
  symbolParamsMany(
    requestMessage: mt4_pb.SymbolParamsManyRequest,
    callback: (error: ServiceError|null, responseMessage: mt4_pb.SymbolParamsManyReply|null) => void
  ): UnaryResponse;
  openedOrder(
    requestMessage: mt4_pb.OpenedOrderRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: mt4_pb.OpenedOrderReply|null) => void
  ): UnaryResponse;
  openedOrder(
    requestMessage: mt4_pb.OpenedOrderRequest,
    callback: (error: ServiceError|null, responseMessage: mt4_pb.OpenedOrderReply|null) => void
  ): UnaryResponse;
  orderHistory(
    requestMessage: mt4_pb.OrderHistoryRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: mt4_pb.OrderHistoryReply|null) => void
  ): UnaryResponse;
  orderHistory(
    requestMessage: mt4_pb.OrderHistoryRequest,
    callback: (error: ServiceError|null, responseMessage: mt4_pb.OrderHistoryReply|null) => void
  ): UnaryResponse;
  quoteHistory(
    requestMessage: mt4_pb.QuoteHistoryRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: mt4_pb.QuoteHistoryReply|null) => void
  ): UnaryResponse;
  quoteHistory(
    requestMessage: mt4_pb.QuoteHistoryRequest,
    callback: (error: ServiceError|null, responseMessage: mt4_pb.QuoteHistoryReply|null) => void
  ): UnaryResponse;
  quoteHistoryMany(
    requestMessage: mt4_pb.QuoteHistoryManyRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: mt4_pb.QuoteHistoryManyReply|null) => void
  ): UnaryResponse;
  quoteHistoryMany(
    requestMessage: mt4_pb.QuoteHistoryManyRequest,
    callback: (error: ServiceError|null, responseMessage: mt4_pb.QuoteHistoryManyReply|null) => void
  ): UnaryResponse;
  closedOrders(
    requestMessage: mt4_pb.ClosedOrdersRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: mt4_pb.ClosedOrdersReply|null) => void
  ): UnaryResponse;
  closedOrders(
    requestMessage: mt4_pb.ClosedOrdersRequest,
    callback: (error: ServiceError|null, responseMessage: mt4_pb.ClosedOrdersReply|null) => void
  ): UnaryResponse;
  requestQuoteHistory(
    requestMessage: mt4_pb.RequestQuoteHistoryRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: mt4_pb.RequestQuoteHistoryReply|null) => void
  ): UnaryResponse;
  requestQuoteHistory(
    requestMessage: mt4_pb.RequestQuoteHistoryRequest,
    callback: (error: ServiceError|null, responseMessage: mt4_pb.RequestQuoteHistoryReply|null) => void
  ): UnaryResponse;
  setPlacedType(
    requestMessage: mt4_pb.SetPlacedTypeRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: mt4_pb.SetPlacedTypeReply|null) => void
  ): UnaryResponse;
  setPlacedType(
    requestMessage: mt4_pb.SetPlacedTypeRequest,
    callback: (error: ServiceError|null, responseMessage: mt4_pb.SetPlacedTypeReply|null) => void
  ): UnaryResponse;
  isInvestor(
    requestMessage: mt4_pb.IsInvestorRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: mt4_pb.IsInvestorReply|null) => void
  ): UnaryResponse;
  isInvestor(
    requestMessage: mt4_pb.IsInvestorRequest,
    callback: (error: ServiceError|null, responseMessage: mt4_pb.IsInvestorReply|null) => void
  ): UnaryResponse;
}

export class ServiceClient {
  readonly serviceHost: string;

  constructor(serviceHost: string, options?: grpc.RpcOptions);
  ping(
    requestMessage: mt4_pb.PingRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: mt4_pb.PingReply|null) => void
  ): UnaryResponse;
  ping(
    requestMessage: mt4_pb.PingRequest,
    callback: (error: ServiceError|null, responseMessage: mt4_pb.PingReply|null) => void
  ): UnaryResponse;
  getLogs(
    requestMessage: mt4_pb.GetLogsRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: mt4_pb.GetLogsReply|null) => void
  ): UnaryResponse;
  getLogs(
    requestMessage: mt4_pb.GetLogsRequest,
    callback: (error: ServiceError|null, responseMessage: mt4_pb.GetLogsReply|null) => void
  ): UnaryResponse;
  getLogsByUser(
    requestMessage: mt4_pb.GetLogsByUserRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: mt4_pb.GetLogsByUserReply|null) => void
  ): UnaryResponse;
  getLogsByUser(
    requestMessage: mt4_pb.GetLogsByUserRequest,
    callback: (error: ServiceError|null, responseMessage: mt4_pb.GetLogsByUserReply|null) => void
  ): UnaryResponse;
  memorySnapshot(
    requestMessage: mt4_pb.MemorySnapshotRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: mt4_pb.MemorySnapshotReply|null) => void
  ): UnaryResponse;
  memorySnapshot(
    requestMessage: mt4_pb.MemorySnapshotRequest,
    callback: (error: ServiceError|null, responseMessage: mt4_pb.MemorySnapshotReply|null) => void
  ): UnaryResponse;
  search(
    requestMessage: mt4_pb.SearchRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: mt4_pb.SearchReply|null) => void
  ): UnaryResponse;
  search(
    requestMessage: mt4_pb.SearchRequest,
    callback: (error: ServiceError|null, responseMessage: mt4_pb.SearchReply|null) => void
  ): UnaryResponse;
  getClients(
    requestMessage: mt4_pb.GetClientsRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: mt4_pb.GetClientsReply|null) => void
  ): UnaryResponse;
  getClients(
    requestMessage: mt4_pb.GetClientsRequest,
    callback: (error: ServiceError|null, responseMessage: mt4_pb.GetClientsReply|null) => void
  ): UnaryResponse;
  memoryUsage(
    requestMessage: mt4_pb.MemoryUsageRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: mt4_pb.MemoryUsageReply|null) => void
  ): UnaryResponse;
  memoryUsage(
    requestMessage: mt4_pb.MemoryUsageRequest,
    callback: (error: ServiceError|null, responseMessage: mt4_pb.MemoryUsageReply|null) => void
  ): UnaryResponse;
}

export class SubscriptionsClient {
  readonly serviceHost: string;

  constructor(serviceHost: string, options?: grpc.RpcOptions);
  subscribe(
    requestMessage: mt4_pb.SubscribeRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: mt4_pb.SubscribeReply|null) => void
  ): UnaryResponse;
  subscribe(
    requestMessage: mt4_pb.SubscribeRequest,
    callback: (error: ServiceError|null, responseMessage: mt4_pb.SubscribeReply|null) => void
  ): UnaryResponse;
  subscribeMany(
    requestMessage: mt4_pb.SubscribeManyRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: mt4_pb.SubscribeManyReply|null) => void
  ): UnaryResponse;
  subscribeMany(
    requestMessage: mt4_pb.SubscribeManyRequest,
    callback: (error: ServiceError|null, responseMessage: mt4_pb.SubscribeManyReply|null) => void
  ): UnaryResponse;
  unSubscribe(
    requestMessage: mt4_pb.UnSubscribeRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: mt4_pb.UnSubscribeReply|null) => void
  ): UnaryResponse;
  unSubscribe(
    requestMessage: mt4_pb.UnSubscribeRequest,
    callback: (error: ServiceError|null, responseMessage: mt4_pb.UnSubscribeReply|null) => void
  ): UnaryResponse;
  unSubscribeMany(
    requestMessage: mt4_pb.UnSubscribeManyRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: mt4_pb.UnSubscribeManyReply|null) => void
  ): UnaryResponse;
  unSubscribeMany(
    requestMessage: mt4_pb.UnSubscribeManyRequest,
    callback: (error: ServiceError|null, responseMessage: mt4_pb.UnSubscribeManyReply|null) => void
  ): UnaryResponse;
  subscribeOrderProfit(
    requestMessage: mt4_pb.SubscribeOrderProfitRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: mt4_pb.SubscribeOrderProfitReply|null) => void
  ): UnaryResponse;
  subscribeOrderProfit(
    requestMessage: mt4_pb.SubscribeOrderProfitRequest,
    callback: (error: ServiceError|null, responseMessage: mt4_pb.SubscribeOrderProfitReply|null) => void
  ): UnaryResponse;
  subscribeTickValue(
    requestMessage: mt4_pb.SubscribeTickValueRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: mt4_pb.SubscribeTickValueReply|null) => void
  ): UnaryResponse;
  subscribeTickValue(
    requestMessage: mt4_pb.SubscribeTickValueRequest,
    callback: (error: ServiceError|null, responseMessage: mt4_pb.SubscribeTickValueReply|null) => void
  ): UnaryResponse;
  subscribeOrderUpdate(
    requestMessage: mt4_pb.SubscribeOrderUpdateRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: mt4_pb.SubscribeOrderUpdateReply|null) => void
  ): UnaryResponse;
  subscribeOrderUpdate(
    requestMessage: mt4_pb.SubscribeOrderUpdateRequest,
    callback: (error: ServiceError|null, responseMessage: mt4_pb.SubscribeOrderUpdateReply|null) => void
  ): UnaryResponse;
  subscribeQuoteHistory(
    requestMessage: mt4_pb.SubscribeQuoteHistoryRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: mt4_pb.SubscribeQuoteHistoryReply|null) => void
  ): UnaryResponse;
  subscribeQuoteHistory(
    requestMessage: mt4_pb.SubscribeQuoteHistoryRequest,
    callback: (error: ServiceError|null, responseMessage: mt4_pb.SubscribeQuoteHistoryReply|null) => void
  ): UnaryResponse;
}

export class TradingClient {
  readonly serviceHost: string;

  constructor(serviceHost: string, options?: grpc.RpcOptions);
  orderSend(
    requestMessage: mt4_pb.OrderSendRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: mt4_pb.OrderSendReply|null) => void
  ): UnaryResponse;
  orderSend(
    requestMessage: mt4_pb.OrderSendRequest,
    callback: (error: ServiceError|null, responseMessage: mt4_pb.OrderSendReply|null) => void
  ): UnaryResponse;
  orderModify(
    requestMessage: mt4_pb.OrderModifyRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: mt4_pb.OrderModifyReply|null) => void
  ): UnaryResponse;
  orderModify(
    requestMessage: mt4_pb.OrderModifyRequest,
    callback: (error: ServiceError|null, responseMessage: mt4_pb.OrderModifyReply|null) => void
  ): UnaryResponse;
  orderCloseBy(
    requestMessage: mt4_pb.OrderCloseByRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: mt4_pb.OrderCloseByReply|null) => void
  ): UnaryResponse;
  orderCloseBy(
    requestMessage: mt4_pb.OrderCloseByRequest,
    callback: (error: ServiceError|null, responseMessage: mt4_pb.OrderCloseByReply|null) => void
  ): UnaryResponse;
  orderDelete(
    requestMessage: mt4_pb.OrderDeleteRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: mt4_pb.OrderDeleteReply|null) => void
  ): UnaryResponse;
  orderDelete(
    requestMessage: mt4_pb.OrderDeleteRequest,
    callback: (error: ServiceError|null, responseMessage: mt4_pb.OrderDeleteReply|null) => void
  ): UnaryResponse;
  orderClose(
    requestMessage: mt4_pb.OrderCloseRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: mt4_pb.OrderCloseReply|null) => void
  ): UnaryResponse;
  orderClose(
    requestMessage: mt4_pb.OrderCloseRequest,
    callback: (error: ServiceError|null, responseMessage: mt4_pb.OrderCloseReply|null) => void
  ): UnaryResponse;
}

export class StreamsClient {
  readonly serviceHost: string;

  constructor(serviceHost: string, options?: grpc.RpcOptions);
  onOrderUpdate(requestMessage: mt4_pb.OnOrderUpdateRequest, metadata?: grpc.Metadata): ResponseStream<mt4_pb.OnOrderUpdateReply>;
  onQuote(requestMessage: mt4_pb.OnQuoteRequest, metadata?: grpc.Metadata): ResponseStream<mt4_pb.OnQuoteReply>;
  onTickValue(requestMessage: mt4_pb.OnTickValueRequest, metadata?: grpc.Metadata): ResponseStream<mt4_pb.OnTickValueReply>;
  onOrderProfit(requestMessage: mt4_pb.OnOrderProfitRequest, metadata?: grpc.Metadata): ResponseStream<mt4_pb.OnOrderProfitReply>;
}

