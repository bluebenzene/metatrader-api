// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.1
// source: mt4.proto

package _go

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Real, contest, demo
type AccountType int32

const (
	AccountType_AccountType_Real    AccountType = 0
	AccountType_AccountType_Contest AccountType = 1
	AccountType_AccountType_Demo    AccountType = 2
)

// Enum value maps for AccountType.
var (
	AccountType_name = map[int32]string{
		0: "AccountType_Real",
		1: "AccountType_Contest",
		2: "AccountType_Demo",
	}
	AccountType_value = map[string]int32{
		"AccountType_Real":    0,
		"AccountType_Contest": 1,
		"AccountType_Demo":    2,
	}
)

func (x AccountType) Enum() *AccountType {
	p := new(AccountType)
	*p = x
	return p
}

func (x AccountType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccountType) Descriptor() protoreflect.EnumDescriptor {
	return file_mt4_proto_enumTypes[0].Descriptor()
}

func (AccountType) Type() protoreflect.EnumType {
	return &file_mt4_proto_enumTypes[0]
}

func (x AccountType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccountType.Descriptor instead.
func (AccountType) EnumDescriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{0}
}

// Placed manually or ByExpert
type PlacedType int32

const (
	PlacedType_PlacedType_Client  PlacedType = 0
	PlacedType_PlacedType_Expert  PlacedType = 1
	PlacedType_PlacedType_Dealer  PlacedType = 2
	PlacedType_PlacedType_Signal  PlacedType = 3
	PlacedType_PlacedType_Gateway PlacedType = 4
	PlacedType_PlacedType_Mobile  PlacedType = 5
	PlacedType_PlacedType_Web     PlacedType = 6
	PlacedType_PlacedType_Api     PlacedType = 7
	// In this case API uses OrderClient.PlaccedType field during OrderSend
	PlacedType_PlacedType_Default PlacedType = 8
)

// Enum value maps for PlacedType.
var (
	PlacedType_name = map[int32]string{
		0: "PlacedType_Client",
		1: "PlacedType_Expert",
		2: "PlacedType_Dealer",
		3: "PlacedType_Signal",
		4: "PlacedType_Gateway",
		5: "PlacedType_Mobile",
		6: "PlacedType_Web",
		7: "PlacedType_Api",
		8: "PlacedType_Default",
	}
	PlacedType_value = map[string]int32{
		"PlacedType_Client":  0,
		"PlacedType_Expert":  1,
		"PlacedType_Dealer":  2,
		"PlacedType_Signal":  3,
		"PlacedType_Gateway": 4,
		"PlacedType_Mobile":  5,
		"PlacedType_Web":     6,
		"PlacedType_Api":     7,
		"PlacedType_Default": 8,
	}
)

func (x PlacedType) Enum() *PlacedType {
	p := new(PlacedType)
	*p = x
	return p
}

func (x PlacedType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlacedType) Descriptor() protoreflect.EnumDescriptor {
	return file_mt4_proto_enumTypes[1].Descriptor()
}

func (PlacedType) Type() protoreflect.EnumType {
	return &file_mt4_proto_enumTypes[1]
}

func (x PlacedType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlacedType.Descriptor instead.
func (PlacedType) EnumDescriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{1}
}

// Operation type for the OrderSend() function.
type Op int32

const (
	// Buying position.
	Op_Op_Buy Op = 0
	// Selling position.
	Op_Op_Sell Op = 1
	// Buy limit pending position.
	Op_Op_BuyLimit Op = 2
	// Sell limit pending position.
	Op_Op_SellLimit Op = 3
	// Buy stop pending position.
	Op_Op_BuyStop Op = 4
	// Sell stop pending position.
	Op_Op_SellStop Op = 5
	// Balance position.
	Op_Op_Balance Op = 6
	// Credit position.
	Op_Op_Credit Op = 7
)

// Enum value maps for Op.
var (
	Op_name = map[int32]string{
		0: "Op_Buy",
		1: "Op_Sell",
		2: "Op_BuyLimit",
		3: "Op_SellLimit",
		4: "Op_BuyStop",
		5: "Op_SellStop",
		6: "Op_Balance",
		7: "Op_Credit",
	}
	Op_value = map[string]int32{
		"Op_Buy":       0,
		"Op_Sell":      1,
		"Op_BuyLimit":  2,
		"Op_SellLimit": 3,
		"Op_BuyStop":   4,
		"Op_SellStop":  5,
		"Op_Balance":   6,
		"Op_Credit":    7,
	}
)

func (x Op) Enum() *Op {
	p := new(Op)
	*p = x
	return p
}

func (x Op) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Op) Descriptor() protoreflect.EnumDescriptor {
	return file_mt4_proto_enumTypes[2].Descriptor()
}

func (Op) Type() protoreflect.EnumType {
	return &file_mt4_proto_enumTypes[2]
}

func (x Op) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Op.Descriptor instead.
func (Op) EnumDescriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{2}
}

// Execution type.
type Execution int32

const (
	// Execution by request.
	Execution_Execution_Request Execution = 0
	// Instant execution.
	Execution_Execution_Instant Execution = 1
	// Market execition.
	Execution_Execution_Market Execution = 2
)

// Enum value maps for Execution.
var (
	Execution_name = map[int32]string{
		0: "Execution_Request",
		1: "Execution_Instant",
		2: "Execution_Market",
	}
	Execution_value = map[string]int32{
		"Execution_Request": 0,
		"Execution_Instant": 1,
		"Execution_Market":  2,
	}
)

func (x Execution) Enum() *Execution {
	p := new(Execution)
	*p = x
	return p
}

func (x Execution) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Execution) Descriptor() protoreflect.EnumDescriptor {
	return file_mt4_proto_enumTypes[3].Descriptor()
}

func (Execution) Type() protoreflect.EnumType {
	return &file_mt4_proto_enumTypes[3]
}

func (x Execution) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Execution.Descriptor instead.
func (Execution) EnumDescriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{3}
}

// Profit types.
type ProfitMode int32

const (
	// Forex.
	ProfitMode_ProfitMode_Forex ProfitMode = 0
	// CFD.
	ProfitMode_ProfitMode_CFD ProfitMode = 1
	// Futures
	ProfitMode_ProfitMode_Futures ProfitMode = 2
)

// Enum value maps for ProfitMode.
var (
	ProfitMode_name = map[int32]string{
		0: "ProfitMode_Forex",
		1: "ProfitMode_CFD",
		2: "ProfitMode_Futures",
	}
	ProfitMode_value = map[string]int32{
		"ProfitMode_Forex":   0,
		"ProfitMode_CFD":     1,
		"ProfitMode_Futures": 2,
	}
)

func (x ProfitMode) Enum() *ProfitMode {
	p := new(ProfitMode)
	*p = x
	return p
}

func (x ProfitMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProfitMode) Descriptor() protoreflect.EnumDescriptor {
	return file_mt4_proto_enumTypes[4].Descriptor()
}

func (ProfitMode) Type() protoreflect.EnumType {
	return &file_mt4_proto_enumTypes[4]
}

func (x ProfitMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProfitMode.Descriptor instead.
func (ProfitMode) EnumDescriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{4}
}

// Margin types.
type MarginMode int32

const (
	// Forex.
	MarginMode_MarginMode_Forex MarginMode = 0
	// CFD.
	MarginMode_MarginMode_CFD MarginMode = 1
	// Futures.
	MarginMode_MarginMode_Futures MarginMode = 2
	// CFD Index.
	MarginMode_MarginMode_CfdIndex MarginMode = 3
	// CFD Leverage.
	MarginMode_MarginMode_CfdLeverage MarginMode = 4
)

// Enum value maps for MarginMode.
var (
	MarginMode_name = map[int32]string{
		0: "MarginMode_Forex",
		1: "MarginMode_CFD",
		2: "MarginMode_Futures",
		3: "MarginMode_CfdIndex",
		4: "MarginMode_CfdLeverage",
	}
	MarginMode_value = map[string]int32{
		"MarginMode_Forex":       0,
		"MarginMode_CFD":         1,
		"MarginMode_Futures":     2,
		"MarginMode_CfdIndex":    3,
		"MarginMode_CfdLeverage": 4,
	}
)

func (x MarginMode) Enum() *MarginMode {
	p := new(MarginMode)
	*p = x
	return p
}

func (x MarginMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MarginMode) Descriptor() protoreflect.EnumDescriptor {
	return file_mt4_proto_enumTypes[5].Descriptor()
}

func (MarginMode) Type() protoreflect.EnumType {
	return &file_mt4_proto_enumTypes[5]
}

func (x MarginMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MarginMode.Descriptor instead.
func (MarginMode) EnumDescriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{5}
}

// Timeframe for quote history download.
type Timeframe int32

const (
	Timeframe_TIMEFRAME_M0 Timeframe = 0
	// 1 minute.
	Timeframe_Timeframe_M1 Timeframe = 1
	// 5 minutes.
	Timeframe_Timeframe_M5 Timeframe = 5
	// 15 minutes.
	Timeframe_Timeframe_M15 Timeframe = 15
	// 30 minutes.
	Timeframe_Timeframe_M30 Timeframe = 30
	// 1 hour.
	Timeframe_Timeframe_H1 Timeframe = 60
	// 4 hour.
	Timeframe_Timeframe_H4 Timeframe = 240
	// Daily.
	Timeframe_Timeframe_D1 Timeframe = 1440
	// Weekly.
	Timeframe_Timeframe_W1 Timeframe = 10080
	// Monthly.
	Timeframe_Timeframe_MN1 Timeframe = 43200
)

// Enum value maps for Timeframe.
var (
	Timeframe_name = map[int32]string{
		0:     "TIMEFRAME_M0",
		1:     "Timeframe_M1",
		5:     "Timeframe_M5",
		15:    "Timeframe_M15",
		30:    "Timeframe_M30",
		60:    "Timeframe_H1",
		240:   "Timeframe_H4",
		1440:  "Timeframe_D1",
		10080: "Timeframe_W1",
		43200: "Timeframe_MN1",
	}
	Timeframe_value = map[string]int32{
		"TIMEFRAME_M0":  0,
		"Timeframe_M1":  1,
		"Timeframe_M5":  5,
		"Timeframe_M15": 15,
		"Timeframe_M30": 30,
		"Timeframe_H1":  60,
		"Timeframe_H4":  240,
		"Timeframe_D1":  1440,
		"Timeframe_W1":  10080,
		"Timeframe_MN1": 43200,
	}
)

func (x Timeframe) Enum() *Timeframe {
	p := new(Timeframe)
	*p = x
	return p
}

func (x Timeframe) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Timeframe) Descriptor() protoreflect.EnumDescriptor {
	return file_mt4_proto_enumTypes[6].Descriptor()
}

func (Timeframe) Type() protoreflect.EnumType {
	return &file_mt4_proto_enumTypes[6]
}

func (x Timeframe) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Timeframe.Descriptor instead.
func (Timeframe) EnumDescriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{6}
}

type LogEventLevel int32

const (
	LogEventLevel_LogEventLevel_Verbose     LogEventLevel = 0
	LogEventLevel_LogEventLevel_Debug       LogEventLevel = 1
	LogEventLevel_LogEventLevel_Information LogEventLevel = 2
	LogEventLevel_LogEventLevel_Warning     LogEventLevel = 3
	LogEventLevel_LogEventLevel_Error       LogEventLevel = 4
	LogEventLevel_LogEventLevel_Fatal       LogEventLevel = 5
)

// Enum value maps for LogEventLevel.
var (
	LogEventLevel_name = map[int32]string{
		0: "LogEventLevel_Verbose",
		1: "LogEventLevel_Debug",
		2: "LogEventLevel_Information",
		3: "LogEventLevel_Warning",
		4: "LogEventLevel_Error",
		5: "LogEventLevel_Fatal",
	}
	LogEventLevel_value = map[string]int32{
		"LogEventLevel_Verbose":     0,
		"LogEventLevel_Debug":       1,
		"LogEventLevel_Information": 2,
		"LogEventLevel_Warning":     3,
		"LogEventLevel_Error":       4,
		"LogEventLevel_Fatal":       5,
	}
)

func (x LogEventLevel) Enum() *LogEventLevel {
	p := new(LogEventLevel)
	*p = x
	return p
}

func (x LogEventLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogEventLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_mt4_proto_enumTypes[7].Descriptor()
}

func (LogEventLevel) Type() protoreflect.EnumType {
	return &file_mt4_proto_enumTypes[7]
}

func (x LogEventLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogEventLevel.Descriptor instead.
func (LogEventLevel) EnumDescriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{7}
}

// Type of update action for OrderUpdate event.
type UpdateAction int32

const (
	// New postion.
	UpdateAction_UpdateAction_PositionOpen UpdateAction = 0
	// Position closed full or partially.
	UpdateAction_UpdateAction_PositionClose UpdateAction = 1
	// Position was modified.
	UpdateAction_UpdateAction_PositionModify UpdateAction = 2
	// New pening order.
	UpdateAction_UpdateAction_PendingOpen UpdateAction = 3
	// Pending order was deleted.
	UpdateAction_UpdateAction_PendingClose UpdateAction = 4
	// Pending order was modified.
	UpdateAction_UpdateAction_PendingModify UpdateAction = 5
	// Pending order was filled.
	UpdateAction_UpdateAction_PendingFill UpdateAction = 6
	// Balance update(deposit, withdraw).
	UpdateAction_UpdateAction_Balance UpdateAction = 7
	// Credit update.
	UpdateAction_UpdateAction_Credit UpdateAction = 8
)

// Enum value maps for UpdateAction.
var (
	UpdateAction_name = map[int32]string{
		0: "UpdateAction_PositionOpen",
		1: "UpdateAction_PositionClose",
		2: "UpdateAction_PositionModify",
		3: "UpdateAction_PendingOpen",
		4: "UpdateAction_PendingClose",
		5: "UpdateAction_PendingModify",
		6: "UpdateAction_PendingFill",
		7: "UpdateAction_Balance",
		8: "UpdateAction_Credit",
	}
	UpdateAction_value = map[string]int32{
		"UpdateAction_PositionOpen":   0,
		"UpdateAction_PositionClose":  1,
		"UpdateAction_PositionModify": 2,
		"UpdateAction_PendingOpen":    3,
		"UpdateAction_PendingClose":   4,
		"UpdateAction_PendingModify":  5,
		"UpdateAction_PendingFill":    6,
		"UpdateAction_Balance":        7,
		"UpdateAction_Credit":         8,
	}
)

func (x UpdateAction) Enum() *UpdateAction {
	p := new(UpdateAction)
	*p = x
	return p
}

func (x UpdateAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateAction) Descriptor() protoreflect.EnumDescriptor {
	return file_mt4_proto_enumTypes[8].Descriptor()
}

func (UpdateAction) Type() protoreflect.EnumType {
	return &file_mt4_proto_enumTypes[8]
}

func (x UpdateAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateAction.Descriptor instead.
func (UpdateAction) EnumDescriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{8}
}

type ErrorCode int32

const (
	ErrorCode_INTERNAL_ERROR           ErrorCode = 0
	ErrorCode_COMMON_ERROR             ErrorCode = 2
	ErrorCode_INVALID_PARAM            ErrorCode = 3
	ErrorCode_SERVER_BUSY              ErrorCode = 4
	ErrorCode_OLD_VERSION              ErrorCode = 5
	ErrorCode_NO_CONNECT               ErrorCode = 6
	ErrorCode_NOT_ENOUGH_RIGHTS        ErrorCode = 7
	ErrorCode_TOO_FREQUENT_REQUEST     ErrorCode = 8
	ErrorCode_NO_CONNECTION            ErrorCode = 10
	ErrorCode_SERVICE_NOT_AVAILABLE    ErrorCode = 11
	ErrorCode_TOO_FREQUENT_REQUESTS    ErrorCode = 12
	ErrorCode_SECRET_KEY_REQUIRED      ErrorCode = 13
	ErrorCode_INVALID_ONETIME_PASSWORD ErrorCode = 14
	ErrorCode_ACCOUNT_DISABLED         ErrorCode = 64
	ErrorCode_INVALID_ACCOUNT          ErrorCode = 65
	ErrorCode_PUBLIC_KEY_NOT_FOUND     ErrorCode = 66
	ErrorCode_TRADE_TIMEOUT            ErrorCode = 128
	ErrorCode_INVALID_PRICES           ErrorCode = 129
	ErrorCode_INVALID_SL_TP            ErrorCode = 130
	ErrorCode_INVALID_VOLUME           ErrorCode = 131
	ErrorCode_MARKET_CLOSED            ErrorCode = 132
	ErrorCode_TRADE_DISABLED           ErrorCode = 133
	ErrorCode_NOT_MONEY                ErrorCode = 134
	ErrorCode_PRICE_CHANGED            ErrorCode = 135
	ErrorCode_OFF_QUOTES               ErrorCode = 136
	ErrorCode_BROKER_BUSY              ErrorCode = 137
	ErrorCode_REQUOTE                  ErrorCode = 138
	ErrorCode_ORDER_LOCKED             ErrorCode = 139
	ErrorCode_LONG_POS_ALLOWED         ErrorCode = 140
	ErrorCode_TOO_MANY_REQUESTS        ErrorCode = 141
	ErrorCode_ORDER_ACCEPTED           ErrorCode = 142
	ErrorCode_ORDER_IN_PROCESS         ErrorCode = 143
	ErrorCode_REQUEST_CANCELLED        ErrorCode = 144
	ErrorCode_MODIFICATIONS_DENIED     ErrorCode = 145
	ErrorCode_TRADE_CONTEXT_BUSY       ErrorCode = 146
	ErrorCode_EXPIRATION_DISABLED      ErrorCode = 147
	ErrorCode_TOO_MANY_ORDERS          ErrorCode = 148
	ErrorCode_HEDGE_PROHIBITED         ErrorCode = 149
	ErrorCode_RPROHIBITED_FIFO         ErrorCode = 150
	// Custom error codes
	ErrorCode_INVALID_TOKEN  ErrorCode = 256
	ErrorCode_INVALID_SYMBOL ErrorCode = 257
	ErrorCode_INVALID_TICKET ErrorCode = 258
	ErrorCode_SAME_PARAMS    ErrorCode = 259
	ErrorCode_CONNECT_ERROR  ErrorCode = 260
	ErrorCode_TIMEOUT        ErrorCode = 261
)

// Enum value maps for ErrorCode.
var (
	ErrorCode_name = map[int32]string{
		0:   "INTERNAL_ERROR",
		2:   "COMMON_ERROR",
		3:   "INVALID_PARAM",
		4:   "SERVER_BUSY",
		5:   "OLD_VERSION",
		6:   "NO_CONNECT",
		7:   "NOT_ENOUGH_RIGHTS",
		8:   "TOO_FREQUENT_REQUEST",
		10:  "NO_CONNECTION",
		11:  "SERVICE_NOT_AVAILABLE",
		12:  "TOO_FREQUENT_REQUESTS",
		13:  "SECRET_KEY_REQUIRED",
		14:  "INVALID_ONETIME_PASSWORD",
		64:  "ACCOUNT_DISABLED",
		65:  "INVALID_ACCOUNT",
		66:  "PUBLIC_KEY_NOT_FOUND",
		128: "TRADE_TIMEOUT",
		129: "INVALID_PRICES",
		130: "INVALID_SL_TP",
		131: "INVALID_VOLUME",
		132: "MARKET_CLOSED",
		133: "TRADE_DISABLED",
		134: "NOT_MONEY",
		135: "PRICE_CHANGED",
		136: "OFF_QUOTES",
		137: "BROKER_BUSY",
		138: "REQUOTE",
		139: "ORDER_LOCKED",
		140: "LONG_POS_ALLOWED",
		141: "TOO_MANY_REQUESTS",
		142: "ORDER_ACCEPTED",
		143: "ORDER_IN_PROCESS",
		144: "REQUEST_CANCELLED",
		145: "MODIFICATIONS_DENIED",
		146: "TRADE_CONTEXT_BUSY",
		147: "EXPIRATION_DISABLED",
		148: "TOO_MANY_ORDERS",
		149: "HEDGE_PROHIBITED",
		150: "RPROHIBITED_FIFO",
		256: "INVALID_TOKEN",
		257: "INVALID_SYMBOL",
		258: "INVALID_TICKET",
		259: "SAME_PARAMS",
		260: "CONNECT_ERROR",
		261: "TIMEOUT",
	}
	ErrorCode_value = map[string]int32{
		"INTERNAL_ERROR":           0,
		"COMMON_ERROR":             2,
		"INVALID_PARAM":            3,
		"SERVER_BUSY":              4,
		"OLD_VERSION":              5,
		"NO_CONNECT":               6,
		"NOT_ENOUGH_RIGHTS":        7,
		"TOO_FREQUENT_REQUEST":     8,
		"NO_CONNECTION":            10,
		"SERVICE_NOT_AVAILABLE":    11,
		"TOO_FREQUENT_REQUESTS":    12,
		"SECRET_KEY_REQUIRED":      13,
		"INVALID_ONETIME_PASSWORD": 14,
		"ACCOUNT_DISABLED":         64,
		"INVALID_ACCOUNT":          65,
		"PUBLIC_KEY_NOT_FOUND":     66,
		"TRADE_TIMEOUT":            128,
		"INVALID_PRICES":           129,
		"INVALID_SL_TP":            130,
		"INVALID_VOLUME":           131,
		"MARKET_CLOSED":            132,
		"TRADE_DISABLED":           133,
		"NOT_MONEY":                134,
		"PRICE_CHANGED":            135,
		"OFF_QUOTES":               136,
		"BROKER_BUSY":              137,
		"REQUOTE":                  138,
		"ORDER_LOCKED":             139,
		"LONG_POS_ALLOWED":         140,
		"TOO_MANY_REQUESTS":        141,
		"ORDER_ACCEPTED":           142,
		"ORDER_IN_PROCESS":         143,
		"REQUEST_CANCELLED":        144,
		"MODIFICATIONS_DENIED":     145,
		"TRADE_CONTEXT_BUSY":       146,
		"EXPIRATION_DISABLED":      147,
		"TOO_MANY_ORDERS":          148,
		"HEDGE_PROHIBITED":         149,
		"RPROHIBITED_FIFO":         150,
		"INVALID_TOKEN":            256,
		"INVALID_SYMBOL":           257,
		"INVALID_TICKET":           258,
		"SAME_PARAMS":              259,
		"CONNECT_ERROR":            260,
		"TIMEOUT":                  261,
	}
)

func (x ErrorCode) Enum() *ErrorCode {
	p := new(ErrorCode)
	*p = x
	return p
}

func (x ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_mt4_proto_enumTypes[9].Descriptor()
}

func (ErrorCode) Type() protoreflect.EnumType {
	return &file_mt4_proto_enumTypes[9]
}

func (x ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorCode.Descriptor instead.
func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{9}
}

type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code       ErrorCode `protobuf:"varint,1,opt,name=code,proto3,enum=mt4grpc.ErrorCode" json:"code,omitempty"`
	Message    string    `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	StackTrace string    `protobuf:"bytes,3,opt,name=stackTrace,proto3" json:"stackTrace,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{0}
}

func (x *Error) GetCode() ErrorCode {
	if x != nil {
		return x.Code
	}
	return ErrorCode_INTERNAL_ERROR
}

func (x *Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Error) GetStackTrace() string {
	if x != nil {
		return x.StackTrace
	}
	return ""
}

// [Example]
//
//	{
//	 "user": "500476959",
//	 "password": "ehj4bod",
//	 "host": "mt4-demo.roboforex.com",
//	 "port": "443"
//	}
type ConnectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Account number [Required]
	User int32 `protobuf:"varint,1,opt,name=user,proto3" json:"user,omitempty"`
	// Password [Required]
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	// Host - ip adddress or dns name [Required]
	Host string `protobuf:"bytes,3,opt,name=host,proto3" json:"host,omitempty"`
	// Port [Required]
	Port int32 `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *ConnectRequest) Reset() {
	*x = ConnectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectRequest) ProtoMessage() {}

func (x *ConnectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectRequest.ProtoReflect.Descriptor instead.
func (*ConnectRequest) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{1}
}

func (x *ConnectRequest) GetUser() int32 {
	if x != nil {
		return x.User
	}
	return 0
}

func (x *ConnectRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *ConnectRequest) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *ConnectRequest) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type ConnectReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result string `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Error  *Error `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ConnectReply) Reset() {
	*x = ConnectReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectReply) ProtoMessage() {}

func (x *ConnectReply) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectReply.ProtoReflect.Descriptor instead.
func (*ConnectReply) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{2}
}

func (x *ConnectReply) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *ConnectReply) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// [Example]
//
//	{
//	 "id": "demo-token-mt4"
//	}
type CheckConnectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Token returned by 'Connect' method [Required]
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CheckConnectRequest) Reset() {
	*x = CheckConnectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckConnectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckConnectRequest) ProtoMessage() {}

func (x *CheckConnectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckConnectRequest.ProtoReflect.Descriptor instead.
func (*CheckConnectRequest) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{3}
}

func (x *CheckConnectRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CheckConnectReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result string `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Error  *Error `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *CheckConnectReply) Reset() {
	*x = CheckConnectReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckConnectReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckConnectReply) ProtoMessage() {}

func (x *CheckConnectReply) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckConnectReply.ProtoReflect.Descriptor instead.
func (*CheckConnectReply) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{4}
}

func (x *CheckConnectReply) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *CheckConnectReply) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// [Example]
//
//	{
//	 "id": "demo-token-mt4"
//	}
type DisconnectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Token returned by 'Connect' method [Required]
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DisconnectRequest) Reset() {
	*x = DisconnectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisconnectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisconnectRequest) ProtoMessage() {}

func (x *DisconnectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisconnectRequest.ProtoReflect.Descriptor instead.
func (*DisconnectRequest) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{5}
}

func (x *DisconnectRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DisconnectReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result string `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Error  *Error `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *DisconnectReply) Reset() {
	*x = DisconnectReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisconnectReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisconnectReply) ProtoMessage() {}

func (x *DisconnectReply) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisconnectReply.ProtoReflect.Descriptor instead.
func (*DisconnectReply) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{6}
}

func (x *DisconnectReply) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *DisconnectReply) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// [Example]
//
//	{
//	 "id": "demo-token-mt4"
//	}
type AccountSummaryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Token returned by 'Connect' method [Required]
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *AccountSummaryRequest) Reset() {
	*x = AccountSummaryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountSummaryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountSummaryRequest) ProtoMessage() {}

func (x *AccountSummaryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountSummaryRequest.ProtoReflect.Descriptor instead.
func (*AccountSummaryRequest) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{7}
}

func (x *AccountSummaryRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Account summary trading information
type AccountSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Balance
	Balance float64 `protobuf:"fixed64,1,opt,name=Balance,proto3" json:"Balance,omitempty"`
	// Credit
	Credit float64 `protobuf:"fixed64,2,opt,name=Credit,proto3" json:"Credit,omitempty"`
	// Profit
	Profit float64 `protobuf:"fixed64,3,opt,name=Profit,proto3" json:"Profit,omitempty"`
	// Equity
	Equity float64 `protobuf:"fixed64,4,opt,name=Equity,proto3" json:"Equity,omitempty"`
	// Used margin
	Margin float64 `protobuf:"fixed64,5,opt,name=Margin,proto3" json:"Margin,omitempty"`
	// Free margin
	FreeMargin float64 `protobuf:"fixed64,6,opt,name=FreeMargin,proto3" json:"FreeMargin,omitempty"`
	// Margin percent
	MarginLevel float64 `protobuf:"fixed64,7,opt,name=MarginLevel,proto3" json:"MarginLevel,omitempty"`
	// Leverage
	Leverage float64 `protobuf:"fixed64,8,opt,name=Leverage,proto3" json:"Leverage,omitempty"`
	// Currency
	Currency string `protobuf:"bytes,9,opt,name=Currency,proto3" json:"Currency,omitempty"`
	// Demo, contest, real
	Type AccountType `protobuf:"varint,10,opt,name=Type,proto3,enum=mt4grpc.AccountType" json:"Type,omitempty"`
	// Investor mode (without trading)
	IsInvestor bool `protobuf:"varint,11,opt,name=IsInvestor,proto3" json:"IsInvestor,omitempty"`
}

func (x *AccountSummary) Reset() {
	*x = AccountSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountSummary) ProtoMessage() {}

func (x *AccountSummary) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountSummary.ProtoReflect.Descriptor instead.
func (*AccountSummary) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{8}
}

func (x *AccountSummary) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *AccountSummary) GetCredit() float64 {
	if x != nil {
		return x.Credit
	}
	return 0
}

func (x *AccountSummary) GetProfit() float64 {
	if x != nil {
		return x.Profit
	}
	return 0
}

func (x *AccountSummary) GetEquity() float64 {
	if x != nil {
		return x.Equity
	}
	return 0
}

func (x *AccountSummary) GetMargin() float64 {
	if x != nil {
		return x.Margin
	}
	return 0
}

func (x *AccountSummary) GetFreeMargin() float64 {
	if x != nil {
		return x.FreeMargin
	}
	return 0
}

func (x *AccountSummary) GetMarginLevel() float64 {
	if x != nil {
		return x.MarginLevel
	}
	return 0
}

func (x *AccountSummary) GetLeverage() float64 {
	if x != nil {
		return x.Leverage
	}
	return 0
}

func (x *AccountSummary) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *AccountSummary) GetType() AccountType {
	if x != nil {
		return x.Type
	}
	return AccountType_AccountType_Real
}

func (x *AccountSummary) GetIsInvestor() bool {
	if x != nil {
		return x.IsInvestor
	}
	return false
}

type AccountSummaryReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *AccountSummary `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Error  *Error          `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *AccountSummaryReply) Reset() {
	*x = AccountSummaryReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountSummaryReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountSummaryReply) ProtoMessage() {}

func (x *AccountSummaryReply) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountSummaryReply.ProtoReflect.Descriptor instead.
func (*AccountSummaryReply) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{9}
}

func (x *AccountSummaryReply) GetResult() *AccountSummary {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *AccountSummaryReply) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// [Example]
//
//	{
//	 "id": "demo-token-mt4"
//	}
type GroupsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Token returned by 'Connect' method [Required]
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GroupsRequest) Reset() {
	*x = GroupsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupsRequest) ProtoMessage() {}

func (x *GroupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupsRequest.ProtoReflect.Descriptor instead.
func (*GroupsRequest) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{10}
}

func (x *GroupsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Symbol groups
type ConSymbolGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// group name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// group description
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *ConSymbolGroup) Reset() {
	*x = ConSymbolGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConSymbolGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConSymbolGroup) ProtoMessage() {}

func (x *ConSymbolGroup) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConSymbolGroup.ProtoReflect.Descriptor instead.
func (*ConSymbolGroup) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{11}
}

func (x *ConSymbolGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ConSymbolGroup) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type GroupsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*ConSymbolGroup `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
	Error  *Error            `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *GroupsReply) Reset() {
	*x = GroupsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupsReply) ProtoMessage() {}

func (x *GroupsReply) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupsReply.ProtoReflect.Descriptor instead.
func (*GroupsReply) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{12}
}

func (x *GroupsReply) GetResult() []*ConSymbolGroup {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *GroupsReply) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// [Example]
//
//	{
//	 "id": "demo-token-mt4",
//	 "symbol": "EURUSD"
//	}
type QuoteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Token returned by 'Connect' method [Required]
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Symbol [Required]
	Symbol string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
}

func (x *QuoteRequest) Reset() {
	*x = QuoteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuoteRequest) ProtoMessage() {}

func (x *QuoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuoteRequest.ProtoReflect.Descriptor instead.
func (*QuoteRequest) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{13}
}

func (x *QuoteRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *QuoteRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

// New quote event arguments.
type QuoteEventArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Trading instrument.
	Symbol string `protobuf:"bytes,1,opt,name=Symbol,proto3" json:"Symbol,omitempty"`
	// Bid.
	Bid float64 `protobuf:"fixed64,2,opt,name=Bid,proto3" json:"Bid,omitempty"`
	// Ask.
	Ask float64 `protobuf:"fixed64,3,opt,name=Ask,proto3" json:"Ask,omitempty"`
	// Server time.
	Time *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=Time,proto3" json:"Time,omitempty"`
	// High.
	High float64 `protobuf:"fixed64,5,opt,name=High,proto3" json:"High,omitempty"`
	// Low.
	Low float64 `protobuf:"fixed64,6,opt,name=Low,proto3" json:"Low,omitempty"`
}

func (x *QuoteEventArgs) Reset() {
	*x = QuoteEventArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuoteEventArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuoteEventArgs) ProtoMessage() {}

func (x *QuoteEventArgs) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuoteEventArgs.ProtoReflect.Descriptor instead.
func (*QuoteEventArgs) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{14}
}

func (x *QuoteEventArgs) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *QuoteEventArgs) GetBid() float64 {
	if x != nil {
		return x.Bid
	}
	return 0
}

func (x *QuoteEventArgs) GetAsk() float64 {
	if x != nil {
		return x.Ask
	}
	return 0
}

func (x *QuoteEventArgs) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *QuoteEventArgs) GetHigh() float64 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *QuoteEventArgs) GetLow() float64 {
	if x != nil {
		return x.Low
	}
	return 0
}

type QuoteReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *QuoteEventArgs `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Error  *Error          `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *QuoteReply) Reset() {
	*x = QuoteReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuoteReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuoteReply) ProtoMessage() {}

func (x *QuoteReply) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuoteReply.ProtoReflect.Descriptor instead.
func (*QuoteReply) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{15}
}

func (x *QuoteReply) GetResult() *QuoteEventArgs {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *QuoteReply) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// [Example]
//
//	{
//	 "id": "demo-token-mt4"
//	}
type OpenedOrdersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Token returned by 'Connect' method [Required]
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *OpenedOrdersRequest) Reset() {
	*x = OpenedOrdersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenedOrdersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenedOrdersRequest) ProtoMessage() {}

func (x *OpenedOrdersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenedOrdersRequest.ProtoReflect.Descriptor instead.
func (*OpenedOrdersRequest) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{16}
}

func (x *OpenedOrdersRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Contains order data.
type Order struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Placed manually or by expert
	PlacedType PlacedType `protobuf:"varint,1,opt,name=PlacedType,proto3,enum=mt4grpc.PlacedType" json:"PlacedType,omitempty"`
	// Ticket number.
	Ticket int32 `protobuf:"varint,2,opt,name=Ticket,proto3" json:"Ticket,omitempty"`
	// Open time.
	OpenTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=OpenTime,proto3" json:"OpenTime,omitempty"`
	// Close time. Just for history orders.
	CloseTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=CloseTime,proto3" json:"CloseTime,omitempty"`
	// Expiration time of pending order.
	Expiration *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=Expiration,proto3" json:"Expiration,omitempty"`
	// Order type.
	Type Op `protobuf:"varint,6,opt,name=Type,proto3,enum=mt4grpc.Op" json:"Type,omitempty"`
	// Amount of lots. Be carefull some brokers use non standart lots.
	Lots float64 `protobuf:"fixed64,7,opt,name=Lots,proto3" json:"Lots,omitempty"`
	// Trading instrument.
	Symbol string `protobuf:"bytes,8,opt,name=Symbol,proto3" json:"Symbol,omitempty"`
	// Open price.
	OpenPrice float64 `protobuf:"fixed64,9,opt,name=OpenPrice,proto3" json:"OpenPrice,omitempty"`
	// Stop loss.
	StopLoss float64 `protobuf:"fixed64,10,opt,name=StopLoss,proto3" json:"StopLoss,omitempty"`
	// Take profit.
	TakeProfit float64 `protobuf:"fixed64,11,opt,name=TakeProfit,proto3" json:"TakeProfit,omitempty"`
	// Close price. Just for history orders.
	ClosePrice float64 `protobuf:"fixed64,12,opt,name=ClosePrice,proto3" json:"ClosePrice,omitempty"`
	// Identifying (magic) number.
	MagicNumber int32 `protobuf:"varint,13,opt,name=MagicNumber,proto3" json:"MagicNumber,omitempty"`
	// Swap value.
	Swap float64 `protobuf:"fixed64,14,opt,name=Swap,proto3" json:"Swap,omitempty"`
	// Commission value.
	Commission float64 `protobuf:"fixed64,15,opt,name=Commission,proto3" json:"Commission,omitempty"`
	// Order comment.
	Comment string `protobuf:"bytes,16,opt,name=Comment,proto3" json:"Comment,omitempty"`
	// Net profit value (without swaps or commissions) in base currency.
	Profit float64 `protobuf:"fixed64,17,opt,name=Profit,proto3" json:"Profit,omitempty"`
	// Convertation rate from profit currency to group deposit currency for open time.
	RateOpen float64 `protobuf:"fixed64,18,opt,name=RateOpen,proto3" json:"RateOpen,omitempty"`
	// Convertation rate from profit currency to group deposit currency for close time.
	RateClose float64 `protobuf:"fixed64,19,opt,name=RateClose,proto3" json:"RateClose,omitempty"`
	// Rate of convertation from margin currency to deposit one.
	RateMargin float64 `protobuf:"fixed64,20,opt,name=RateMargin,proto3" json:"RateMargin,omitempty"`
}

func (x *Order) Reset() {
	*x = Order{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Order) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Order) ProtoMessage() {}

func (x *Order) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Order.ProtoReflect.Descriptor instead.
func (*Order) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{17}
}

func (x *Order) GetPlacedType() PlacedType {
	if x != nil {
		return x.PlacedType
	}
	return PlacedType_PlacedType_Client
}

func (x *Order) GetTicket() int32 {
	if x != nil {
		return x.Ticket
	}
	return 0
}

func (x *Order) GetOpenTime() *timestamppb.Timestamp {
	if x != nil {
		return x.OpenTime
	}
	return nil
}

func (x *Order) GetCloseTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CloseTime
	}
	return nil
}

func (x *Order) GetExpiration() *timestamppb.Timestamp {
	if x != nil {
		return x.Expiration
	}
	return nil
}

func (x *Order) GetType() Op {
	if x != nil {
		return x.Type
	}
	return Op_Op_Buy
}

func (x *Order) GetLots() float64 {
	if x != nil {
		return x.Lots
	}
	return 0
}

func (x *Order) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Order) GetOpenPrice() float64 {
	if x != nil {
		return x.OpenPrice
	}
	return 0
}

func (x *Order) GetStopLoss() float64 {
	if x != nil {
		return x.StopLoss
	}
	return 0
}

func (x *Order) GetTakeProfit() float64 {
	if x != nil {
		return x.TakeProfit
	}
	return 0
}

func (x *Order) GetClosePrice() float64 {
	if x != nil {
		return x.ClosePrice
	}
	return 0
}

func (x *Order) GetMagicNumber() int32 {
	if x != nil {
		return x.MagicNumber
	}
	return 0
}

func (x *Order) GetSwap() float64 {
	if x != nil {
		return x.Swap
	}
	return 0
}

func (x *Order) GetCommission() float64 {
	if x != nil {
		return x.Commission
	}
	return 0
}

func (x *Order) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *Order) GetProfit() float64 {
	if x != nil {
		return x.Profit
	}
	return 0
}

func (x *Order) GetRateOpen() float64 {
	if x != nil {
		return x.RateOpen
	}
	return 0
}

func (x *Order) GetRateClose() float64 {
	if x != nil {
		return x.RateClose
	}
	return 0
}

func (x *Order) GetRateMargin() float64 {
	if x != nil {
		return x.RateMargin
	}
	return 0
}

type OpenedOrdersReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*Order `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
	Error  *Error   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *OpenedOrdersReply) Reset() {
	*x = OpenedOrdersReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenedOrdersReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenedOrdersReply) ProtoMessage() {}

func (x *OpenedOrdersReply) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenedOrdersReply.ProtoReflect.Descriptor instead.
func (*OpenedOrdersReply) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{18}
}

func (x *OpenedOrdersReply) GetResult() []*Order {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *OpenedOrdersReply) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// [Example]
//
//	{
//	 "id": "demo-token-mt4"
//	}
type SymbolsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Token returned by 'Connect' method [Required]
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SymbolsRequest) Reset() {
	*x = SymbolsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymbolsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolsRequest) ProtoMessage() {}

func (x *SymbolsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolsRequest.ProtoReflect.Descriptor instead.
func (*SymbolsRequest) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{19}
}

func (x *SymbolsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type SymbolsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []string `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
	Error  *Error   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *SymbolsReply) Reset() {
	*x = SymbolsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymbolsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolsReply) ProtoMessage() {}

func (x *SymbolsReply) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolsReply.ProtoReflect.Descriptor instead.
func (*SymbolsReply) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{20}
}

func (x *SymbolsReply) GetResult() []string {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *SymbolsReply) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// [Example]
//
//	{
//	 "id": "demo-token-mt4",
//	 "symbol": "EURUSD"
//	}
type SymbolParamsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Token returned by 'Connect' method [Required]
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Symbol [Required]
	Symbol string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
}

func (x *SymbolParamsRequest) Reset() {
	*x = SymbolParamsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymbolParamsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolParamsRequest) ProtoMessage() {}

func (x *SymbolParamsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolParamsRequest.ProtoReflect.Descriptor instead.
func (*SymbolParamsRequest) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{21}
}

func (x *SymbolParamsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SymbolParamsRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

// Information about symbol and his group.
type SymbolParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Symbol name
	SymbolName string `protobuf:"bytes,1,opt,name=SymbolName,proto3" json:"SymbolName,omitempty"`
	// Symbol name
	Symbol *SymbolInfo `protobuf:"bytes,2,opt,name=Symbol,proto3" json:"Symbol,omitempty"`
	// Symbol group
	Group *ConSymbolGroup `protobuf:"bytes,3,opt,name=Group,proto3" json:"Group,omitempty"`
	// Symbol group parameters
	GroupParams *ConGroupSec `protobuf:"bytes,4,opt,name=GroupParams,proto3" json:"GroupParams,omitempty"`
}

func (x *SymbolParams) Reset() {
	*x = SymbolParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymbolParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolParams) ProtoMessage() {}

func (x *SymbolParams) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolParams.ProtoReflect.Descriptor instead.
func (*SymbolParams) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{22}
}

func (x *SymbolParams) GetSymbolName() string {
	if x != nil {
		return x.SymbolName
	}
	return ""
}

func (x *SymbolParams) GetSymbol() *SymbolInfo {
	if x != nil {
		return x.Symbol
	}
	return nil
}

func (x *SymbolParams) GetGroup() *ConSymbolGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *SymbolParams) GetGroupParams() *ConGroupSec {
	if x != nil {
		return x.GroupParams
	}
	return nil
}

// Instrument parameters.
type SymbolInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Execution type.
	Execution Execution `protobuf:"varint,1,opt,name=Execution,proto3,enum=mt4grpc.Execution" json:"Execution,omitempty"`
	// Stop level in points.
	StopsLevel int32 `protobuf:"varint,2,opt,name=StopsLevel,proto3" json:"StopsLevel,omitempty"`
	// Count of digits after decimal point in the symbol prices.
	Digits int32 `protobuf:"varint,3,opt,name=Digits,proto3" json:"Digits,omitempty"`
	// Point size in the quote currency.
	Point float64 `protobuf:"fixed64,4,opt,name=Point,proto3" json:"Point,omitempty"`
	// Swap of the long position.
	SwapLong float64 `protobuf:"fixed64,5,opt,name=SwapLong,proto3" json:"SwapLong,omitempty"`
	// Swap of the short position.
	SwapShort float64 `protobuf:"fixed64,6,opt,name=SwapShort,proto3" json:"SwapShort,omitempty"`
	// Spread value in pips.QuoteClient QC
	Spread int32 `protobuf:"varint,7,opt,name=Spread,proto3" json:"Spread,omitempty"`
	// Order freeze level in points. If the execution price lies within the range defined by the freeze level, the order cannot be modified, cancelled or closed.
	FreezeLevel int32 `protobuf:"varint,8,opt,name=FreezeLevel,proto3" json:"FreezeLevel,omitempty"`
	// Currency of margin requirments.
	MarginCurrency string `protobuf:"bytes,9,opt,name=MarginCurrency,proto3" json:"MarginCurrency,omitempty"`
	// Profit calculation mode.
	ProfitMode ProfitMode `protobuf:"varint,10,opt,name=ProfitMode,proto3,enum=mt4grpc.ProfitMode" json:"ProfitMode,omitempty"`
	// Margin calculation mode.
	MarginMode MarginMode `protobuf:"varint,11,opt,name=MarginMode,proto3,enum=mt4grpc.MarginMode" json:"MarginMode,omitempty"`
	// Contract size.
	ContractSize float64 `protobuf:"fixed64,12,opt,name=ContractSize,proto3" json:"ContractSize,omitempty"`
	// Currency.
	Currency string `protobuf:"bytes,13,opt,name=Currency,proto3" json:"Currency,omitempty"`
	// Margin divider.
	MarginDivider float64 `protobuf:"fixed64,14,opt,name=MarginDivider,proto3" json:"MarginDivider,omitempty"`
	// Internal code.
	Code int32 `protobuf:"varint,15,opt,name=Code,proto3" json:"Code,omitempty"`
}

func (x *SymbolInfo) Reset() {
	*x = SymbolInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymbolInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolInfo) ProtoMessage() {}

func (x *SymbolInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolInfo.ProtoReflect.Descriptor instead.
func (*SymbolInfo) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{23}
}

func (x *SymbolInfo) GetExecution() Execution {
	if x != nil {
		return x.Execution
	}
	return Execution_Execution_Request
}

func (x *SymbolInfo) GetStopsLevel() int32 {
	if x != nil {
		return x.StopsLevel
	}
	return 0
}

func (x *SymbolInfo) GetDigits() int32 {
	if x != nil {
		return x.Digits
	}
	return 0
}

func (x *SymbolInfo) GetPoint() float64 {
	if x != nil {
		return x.Point
	}
	return 0
}

func (x *SymbolInfo) GetSwapLong() float64 {
	if x != nil {
		return x.SwapLong
	}
	return 0
}

func (x *SymbolInfo) GetSwapShort() float64 {
	if x != nil {
		return x.SwapShort
	}
	return 0
}

func (x *SymbolInfo) GetSpread() int32 {
	if x != nil {
		return x.Spread
	}
	return 0
}

func (x *SymbolInfo) GetFreezeLevel() int32 {
	if x != nil {
		return x.FreezeLevel
	}
	return 0
}

func (x *SymbolInfo) GetMarginCurrency() string {
	if x != nil {
		return x.MarginCurrency
	}
	return ""
}

func (x *SymbolInfo) GetProfitMode() ProfitMode {
	if x != nil {
		return x.ProfitMode
	}
	return ProfitMode_ProfitMode_Forex
}

func (x *SymbolInfo) GetMarginMode() MarginMode {
	if x != nil {
		return x.MarginMode
	}
	return MarginMode_MarginMode_Forex
}

func (x *SymbolInfo) GetContractSize() float64 {
	if x != nil {
		return x.ContractSize
	}
	return 0
}

func (x *SymbolInfo) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *SymbolInfo) GetMarginDivider() float64 {
	if x != nil {
		return x.MarginDivider
	}
	return 0
}

func (x *SymbolInfo) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

// Security group configuration for  client group
type ConGroupSec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Minimum lot size
	MinLot float64 `protobuf:"fixed64,1,opt,name=MinLot,proto3" json:"MinLot,omitempty"`
	// Maximum lot size
	MaxLot float64 `protobuf:"fixed64,2,opt,name=MaxLot,proto3" json:"MaxLot,omitempty"`
	// Lot step
	LotStep float64 `protobuf:"fixed64,3,opt,name=LotStep,proto3" json:"LotStep,omitempty"`
	// enable show and trade for this group of securites
	Show int32 `protobuf:"varint,4,opt,name=show,proto3" json:"show,omitempty"`
	// enable show and trade for this group of securites
	Trade int32 `protobuf:"varint,5,opt,name=trade,proto3" json:"trade,omitempty"`
	// dealing mode-EXECUTION_MANUAL,EXECUTION_AUTO,EXECUTION_ACTIVITY
	Execution int32 `protobuf:"varint,6,opt,name=execution,proto3" json:"execution,omitempty"`
	// standart commission
	CommBase float64 `protobuf:"fixed64,7,opt,name=comm_base,json=commBase,proto3" json:"comm_base,omitempty"`
	// commission type-COMM_TYPE_MONEY,COMM_TYPE_PIPS,COMM_TYPE_PERCENT
	CommType int32 `protobuf:"varint,8,opt,name=comm_type,json=commType,proto3" json:"comm_type,omitempty"`
	// commission lots mode-COMMISSION_PER_LOT,COMMISSION_PER_DEAL
	CommLots int32 `protobuf:"varint,9,opt,name=comm_lots,json=commLots,proto3" json:"comm_lots,omitempty"`
	// agent commission
	CommAgent float64 `protobuf:"fixed64,10,opt,name=comm_agent,json=commAgent,proto3" json:"comm_agent,omitempty"`
	// agent commission mode-COMM_TYPE_MONEY, COMM_TYPE_PIPS
	CommAgentType int32 `protobuf:"varint,11,opt,name=comm_agent_type,json=commAgentType,proto3" json:"comm_agent_type,omitempty"`
	// spread difference in compare with default security spread
	SpreadDiff int32 `protobuf:"varint,12,opt,name=spread_diff,json=spreadDiff,proto3" json:"spread_diff,omitempty"`
	// allowed minimal and maximal lot values
	LotMin int32 `protobuf:"varint,13,opt,name=lot_min,json=lotMin,proto3" json:"lot_min,omitempty"`
	// allowed minimal and maximal lot values
	LotMax int32 `protobuf:"varint,14,opt,name=lot_max,json=lotMax,proto3" json:"lot_max,omitempty"`
	// maximum price deviation in Instant Execution mode
	IeDeviation int32 `protobuf:"varint,15,opt,name=ie_deviation,json=ieDeviation,proto3" json:"ie_deviation,omitempty"`
	// use confirmation in Request mode
	Confirmation int32 `protobuf:"varint,16,opt,name=confirmation,proto3" json:"confirmation,omitempty"`
	// clients trade rights-bit mask see TRADE_DENY_NONE,TRADE_DENY_CLOSEBY,TRADE_DENY_MUCLOSEBY
	TradeRights int32 `protobuf:"varint,17,opt,name=trade_rights,json=tradeRights,proto3" json:"trade_rights,omitempty"`
	// ie quick mode
	IeQuickMode int32 `protobuf:"varint,18,opt,name=ie_quick_mode,json=ieQuickMode,proto3" json:"ie_quick_mode,omitempty"`
	// auto close-out modes see CLOSE_OUT_NONE,CLOSE_OUT_HIHI, CLOSE_OUT_LOLO, CLOSE_OUT_HILO, CLOSE_OUT_LOHI,CLOSE_OUT_LOHI,CLOSE_OUT_FIFO,CLOSE_OUT_LIFO,CLOSE_OUT_INTRDAY_FIFO
	AutocloseoutMode int32 `protobuf:"varint,19,opt,name=autocloseout_mode,json=autocloseoutMode,proto3" json:"autocloseout_mode,omitempty"`
	// commission taxes
	CommTax float64 `protobuf:"fixed64,20,opt,name=comm_tax,json=commTax,proto3" json:"comm_tax,omitempty"`
	// agent commission lots mode-COMMISSION_PER_LOT,COMMISSION_PER_DEAL
	CommAgentLots int32 `protobuf:"varint,21,opt,name=comm_agent_lots,json=commAgentLots,proto3" json:"comm_agent_lots,omitempty"`
	// free margin check mode
	FreemarginMode int32 `protobuf:"varint,22,opt,name=freemargin_mode,json=freemarginMode,proto3" json:"freemargin_mode,omitempty"`
	// reserved
	Reserved []int32 `protobuf:"varint,23,rep,packed,name=reserved,proto3" json:"reserved,omitempty"`
}

func (x *ConGroupSec) Reset() {
	*x = ConGroupSec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConGroupSec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConGroupSec) ProtoMessage() {}

func (x *ConGroupSec) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConGroupSec.ProtoReflect.Descriptor instead.
func (*ConGroupSec) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{24}
}

func (x *ConGroupSec) GetMinLot() float64 {
	if x != nil {
		return x.MinLot
	}
	return 0
}

func (x *ConGroupSec) GetMaxLot() float64 {
	if x != nil {
		return x.MaxLot
	}
	return 0
}

func (x *ConGroupSec) GetLotStep() float64 {
	if x != nil {
		return x.LotStep
	}
	return 0
}

func (x *ConGroupSec) GetShow() int32 {
	if x != nil {
		return x.Show
	}
	return 0
}

func (x *ConGroupSec) GetTrade() int32 {
	if x != nil {
		return x.Trade
	}
	return 0
}

func (x *ConGroupSec) GetExecution() int32 {
	if x != nil {
		return x.Execution
	}
	return 0
}

func (x *ConGroupSec) GetCommBase() float64 {
	if x != nil {
		return x.CommBase
	}
	return 0
}

func (x *ConGroupSec) GetCommType() int32 {
	if x != nil {
		return x.CommType
	}
	return 0
}

func (x *ConGroupSec) GetCommLots() int32 {
	if x != nil {
		return x.CommLots
	}
	return 0
}

func (x *ConGroupSec) GetCommAgent() float64 {
	if x != nil {
		return x.CommAgent
	}
	return 0
}

func (x *ConGroupSec) GetCommAgentType() int32 {
	if x != nil {
		return x.CommAgentType
	}
	return 0
}

func (x *ConGroupSec) GetSpreadDiff() int32 {
	if x != nil {
		return x.SpreadDiff
	}
	return 0
}

func (x *ConGroupSec) GetLotMin() int32 {
	if x != nil {
		return x.LotMin
	}
	return 0
}

func (x *ConGroupSec) GetLotMax() int32 {
	if x != nil {
		return x.LotMax
	}
	return 0
}

func (x *ConGroupSec) GetIeDeviation() int32 {
	if x != nil {
		return x.IeDeviation
	}
	return 0
}

func (x *ConGroupSec) GetConfirmation() int32 {
	if x != nil {
		return x.Confirmation
	}
	return 0
}

func (x *ConGroupSec) GetTradeRights() int32 {
	if x != nil {
		return x.TradeRights
	}
	return 0
}

func (x *ConGroupSec) GetIeQuickMode() int32 {
	if x != nil {
		return x.IeQuickMode
	}
	return 0
}

func (x *ConGroupSec) GetAutocloseoutMode() int32 {
	if x != nil {
		return x.AutocloseoutMode
	}
	return 0
}

func (x *ConGroupSec) GetCommTax() float64 {
	if x != nil {
		return x.CommTax
	}
	return 0
}

func (x *ConGroupSec) GetCommAgentLots() int32 {
	if x != nil {
		return x.CommAgentLots
	}
	return 0
}

func (x *ConGroupSec) GetFreemarginMode() int32 {
	if x != nil {
		return x.FreemarginMode
	}
	return 0
}

func (x *ConGroupSec) GetReserved() []int32 {
	if x != nil {
		return x.Reserved
	}
	return nil
}

type SymbolParamsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *SymbolParams `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Error  *Error        `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *SymbolParamsReply) Reset() {
	*x = SymbolParamsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymbolParamsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolParamsReply) ProtoMessage() {}

func (x *SymbolParamsReply) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolParamsReply.ProtoReflect.Descriptor instead.
func (*SymbolParamsReply) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{25}
}

func (x *SymbolParamsReply) GetResult() *SymbolParams {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *SymbolParamsReply) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// [Example]
//
//	{
//	 "id": "demo-token-mt4"
//	}
type ServerTimezoneRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Token returned by 'Connect' method [Required]
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ServerTimezoneRequest) Reset() {
	*x = ServerTimezoneRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerTimezoneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerTimezoneRequest) ProtoMessage() {}

func (x *ServerTimezoneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerTimezoneRequest.ProtoReflect.Descriptor instead.
func (*ServerTimezoneRequest) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{26}
}

func (x *ServerTimezoneRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ServerTimezoneReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int32  `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	Error  *Error `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ServerTimezoneReply) Reset() {
	*x = ServerTimezoneReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerTimezoneReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerTimezoneReply) ProtoMessage() {}

func (x *ServerTimezoneReply) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerTimezoneReply.ProtoReflect.Descriptor instead.
func (*ServerTimezoneReply) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{27}
}

func (x *ServerTimezoneReply) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *ServerTimezoneReply) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// [Example]
//
//	{
//	 "id": "demo-token-mt4"
//	}
type IsInvestorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Token returned by 'Connect' method [Required]
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *IsInvestorRequest) Reset() {
	*x = IsInvestorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsInvestorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsInvestorRequest) ProtoMessage() {}

func (x *IsInvestorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsInvestorRequest.ProtoReflect.Descriptor instead.
func (*IsInvestorRequest) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{28}
}

func (x *IsInvestorRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type IsInvestorReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool   `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	Error  *Error `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *IsInvestorReply) Reset() {
	*x = IsInvestorReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsInvestorReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsInvestorReply) ProtoMessage() {}

func (x *IsInvestorReply) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsInvestorReply.ProtoReflect.Descriptor instead.
func (*IsInvestorReply) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{29}
}

func (x *IsInvestorReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *IsInvestorReply) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// [Example]
//
//	{
//	 "id": "demo-token-mt4"
//	}
type SymbolParamsManyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Token returned by 'Connect' method [Required]
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Required symbols
	Symbols []string `protobuf:"bytes,2,rep,name=symbols,proto3" json:"symbols,omitempty"`
}

func (x *SymbolParamsManyRequest) Reset() {
	*x = SymbolParamsManyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymbolParamsManyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolParamsManyRequest) ProtoMessage() {}

func (x *SymbolParamsManyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolParamsManyRequest.ProtoReflect.Descriptor instead.
func (*SymbolParamsManyRequest) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{30}
}

func (x *SymbolParamsManyRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SymbolParamsManyRequest) GetSymbols() []string {
	if x != nil {
		return x.Symbols
	}
	return nil
}

type SymbolParamsManyReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*SymbolParams `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
	Error  *Error          `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *SymbolParamsManyReply) Reset() {
	*x = SymbolParamsManyReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymbolParamsManyReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolParamsManyReply) ProtoMessage() {}

func (x *SymbolParamsManyReply) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolParamsManyReply.ProtoReflect.Descriptor instead.
func (*SymbolParamsManyReply) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{31}
}

func (x *SymbolParamsManyReply) GetResult() []*SymbolParams {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *SymbolParamsManyReply) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// [Example]
//
//	{
//	 "id": "demo-token-mt4",
//	 "ticket": "0"
//	}
type OpenedOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Token returned by 'Connect' method [Required]
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Ticket number [Required]
	Ticket int32 `protobuf:"varint,2,opt,name=ticket,proto3" json:"ticket,omitempty"`
}

func (x *OpenedOrderRequest) Reset() {
	*x = OpenedOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenedOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenedOrderRequest) ProtoMessage() {}

func (x *OpenedOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenedOrderRequest.ProtoReflect.Descriptor instead.
func (*OpenedOrderRequest) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{32}
}

func (x *OpenedOrderRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *OpenedOrderRequest) GetTicket() int32 {
	if x != nil {
		return x.Ticket
	}
	return 0
}

type OpenedOrderReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *Order `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Error  *Error `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *OpenedOrderReply) Reset() {
	*x = OpenedOrderReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenedOrderReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenedOrderReply) ProtoMessage() {}

func (x *OpenedOrderReply) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenedOrderReply.ProtoReflect.Descriptor instead.
func (*OpenedOrderReply) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{33}
}

func (x *OpenedOrderReply) GetResult() *Order {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *OpenedOrderReply) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// [Example]
//
//	{
//	 "id": "demo-token-mt4",
//	 "from": "2022-01-01T00:00:00",
//	 "to": "2023-06-01T00:00:00"
//	}
type OrderHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Token returned by 'Connect' method [Required]
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// 'From date' in format: yyyy-MM-ddTHH:mm:ss [Required]
	From string `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	// 'To date' in format: yyyy-MM-ddTHH:mm:ss
	To string `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
}

func (x *OrderHistoryRequest) Reset() {
	*x = OrderHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderHistoryRequest) ProtoMessage() {}

func (x *OrderHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderHistoryRequest.ProtoReflect.Descriptor instead.
func (*OrderHistoryRequest) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{34}
}

func (x *OrderHistoryRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *OrderHistoryRequest) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *OrderHistoryRequest) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

type OrderHistoryReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*Order `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
	Error  *Error   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *OrderHistoryReply) Reset() {
	*x = OrderHistoryReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderHistoryReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderHistoryReply) ProtoMessage() {}

func (x *OrderHistoryReply) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderHistoryReply.ProtoReflect.Descriptor instead.
func (*OrderHistoryReply) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{35}
}

func (x *OrderHistoryReply) GetResult() []*Order {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *OrderHistoryReply) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// [Example]
//
//	{
//	 "id": "demo-token-mt4",
//	 "symbol": "EURUSD",
//	 "timeframe": "D1",
//	 "from": "2022-10-01T00:00:00",
//	 "count": "10"
//	}
type QuoteHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Token returned by 'Connect' method [Required]
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Symbol [Required]
	Symbol string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	// Timeframe. M1,M5,M15,M30,H1,H4,D1,W1,MN1 [Required]
	Timeframe Timeframe `protobuf:"varint,3,opt,name=timeframe,proto3,enum=mt4grpc.Timeframe" json:"timeframe,omitempty"`
	// 'From date' in format: yyyy-MM-ddTHH:mm:ss [Required]
	From string `protobuf:"bytes,4,opt,name=from,proto3" json:"from,omitempty"`
	// Number of bars back from specified date. [Required]
	Count int32 `protobuf:"varint,5,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *QuoteHistoryRequest) Reset() {
	*x = QuoteHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuoteHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuoteHistoryRequest) ProtoMessage() {}

func (x *QuoteHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuoteHistoryRequest.ProtoReflect.Descriptor instead.
func (*QuoteHistoryRequest) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{36}
}

func (x *QuoteHistoryRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *QuoteHistoryRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *QuoteHistoryRequest) GetTimeframe() Timeframe {
	if x != nil {
		return x.Timeframe
	}
	return Timeframe_TIMEFRAME_M0
}

func (x *QuoteHistoryRequest) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *QuoteHistoryRequest) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

// Quote history bar.
type Bar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Bar open time.
	Time *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=Time,proto3" json:"Time,omitempty"`
	// Open price.
	Open float64 `protobuf:"fixed64,2,opt,name=Open,proto3" json:"Open,omitempty"`
	// Maximum price.
	High float64 `protobuf:"fixed64,3,opt,name=High,proto3" json:"High,omitempty"`
	// Minimum price.
	Low float64 `protobuf:"fixed64,4,opt,name=Low,proto3" json:"Low,omitempty"`
	// Close price.
	Close float64 `protobuf:"fixed64,5,opt,name=Close,proto3" json:"Close,omitempty"`
	// Volume.
	Volume float64 `protobuf:"fixed64,6,opt,name=Volume,proto3" json:"Volume,omitempty"`
}

func (x *Bar) Reset() {
	*x = Bar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bar) ProtoMessage() {}

func (x *Bar) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bar.ProtoReflect.Descriptor instead.
func (*Bar) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{37}
}

func (x *Bar) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *Bar) GetOpen() float64 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *Bar) GetHigh() float64 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *Bar) GetLow() float64 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *Bar) GetClose() float64 {
	if x != nil {
		return x.Close
	}
	return 0
}

func (x *Bar) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

type QuoteHistoryReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*Bar `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
	Error  *Error `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *QuoteHistoryReply) Reset() {
	*x = QuoteHistoryReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuoteHistoryReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuoteHistoryReply) ProtoMessage() {}

func (x *QuoteHistoryReply) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuoteHistoryReply.ProtoReflect.Descriptor instead.
func (*QuoteHistoryReply) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{38}
}

func (x *QuoteHistoryReply) GetResult() []*Bar {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *QuoteHistoryReply) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// [Example]
//
//	{
//	 "id": "demo-token-mt4",
//	 "timeframe": "D1",
//	 "from": "2022-10-01T00:00:00",
//	 "count": "10"
//	}
type QuoteHistoryManyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Token returned by 'Connect' method [Required]
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Symbol [Required]
	Symbol []string `protobuf:"bytes,2,rep,name=symbol,proto3" json:"symbol,omitempty"`
	// Timeframe. M1,M5,M15,M30,H1,H4,D1,W1,MN1 [Required]
	Timeframe Timeframe `protobuf:"varint,3,opt,name=timeframe,proto3,enum=mt4grpc.Timeframe" json:"timeframe,omitempty"`
	// 'From date' in format: yyyy-MM-ddTHH:mm:ss [Required]
	From string `protobuf:"bytes,4,opt,name=from,proto3" json:"from,omitempty"`
	// Number of bars back from specified date. [Required]
	Count int32 `protobuf:"varint,5,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *QuoteHistoryManyRequest) Reset() {
	*x = QuoteHistoryManyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuoteHistoryManyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuoteHistoryManyRequest) ProtoMessage() {}

func (x *QuoteHistoryManyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuoteHistoryManyRequest.ProtoReflect.Descriptor instead.
func (*QuoteHistoryManyRequest) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{39}
}

func (x *QuoteHistoryManyRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *QuoteHistoryManyRequest) GetSymbol() []string {
	if x != nil {
		return x.Symbol
	}
	return nil
}

func (x *QuoteHistoryManyRequest) GetTimeframe() Timeframe {
	if x != nil {
		return x.Timeframe
	}
	return Timeframe_TIMEFRAME_M0
}

func (x *QuoteHistoryManyRequest) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *QuoteHistoryManyRequest) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

// QuoteHistoryMany reply
type BarsForSymbol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Symbols
	Symbol string `protobuf:"bytes,1,opt,name=Symbol,proto3" json:"Symbol,omitempty"`
	// Bars
	Bars []*Bar `protobuf:"bytes,2,rep,name=Bars,proto3" json:"Bars,omitempty"`
	// Error details
	Exception string `protobuf:"bytes,3,opt,name=Exception,proto3" json:"Exception,omitempty"`
}

func (x *BarsForSymbol) Reset() {
	*x = BarsForSymbol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BarsForSymbol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BarsForSymbol) ProtoMessage() {}

func (x *BarsForSymbol) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BarsForSymbol.ProtoReflect.Descriptor instead.
func (*BarsForSymbol) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{40}
}

func (x *BarsForSymbol) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *BarsForSymbol) GetBars() []*Bar {
	if x != nil {
		return x.Bars
	}
	return nil
}

func (x *BarsForSymbol) GetException() string {
	if x != nil {
		return x.Exception
	}
	return ""
}

type QuoteHistoryManyReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*BarsForSymbol `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
	Error  *Error           `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *QuoteHistoryManyReply) Reset() {
	*x = QuoteHistoryManyReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuoteHistoryManyReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuoteHistoryManyReply) ProtoMessage() {}

func (x *QuoteHistoryManyReply) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuoteHistoryManyReply.ProtoReflect.Descriptor instead.
func (*QuoteHistoryManyReply) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{41}
}

func (x *QuoteHistoryManyReply) GetResult() []*BarsForSymbol {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *QuoteHistoryManyReply) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// [Example]
//
//	{
//	 "id": "demo-token-mt4"
//	}
type ClosedOrdersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Token returned by 'Connect' method [Required]
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ClosedOrdersRequest) Reset() {
	*x = ClosedOrdersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClosedOrdersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClosedOrdersRequest) ProtoMessage() {}

func (x *ClosedOrdersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClosedOrdersRequest.ProtoReflect.Descriptor instead.
func (*ClosedOrdersRequest) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{42}
}

func (x *ClosedOrdersRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ClosedOrdersReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*Order `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
	Error  *Error   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ClosedOrdersReply) Reset() {
	*x = ClosedOrdersReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClosedOrdersReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClosedOrdersReply) ProtoMessage() {}

func (x *ClosedOrdersReply) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClosedOrdersReply.ProtoReflect.Descriptor instead.
func (*ClosedOrdersReply) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{43}
}

func (x *ClosedOrdersReply) GetResult() []*Order {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ClosedOrdersReply) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// [Example]
//
//	{
//	 "id": "demo-token-mt4",
//	 "symbol": "EURUSD",
//	 "timeframe": "D1",
//	 "from": "2022-10-01T00:00:00",
//	 "count": "10"
//	}
type RequestQuoteHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Token returned by 'Connect' method [Required]
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Symbol [Required]
	Symbol string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	// Timeframe. M1,M5,M15,M30,H1,H4,D1,W1,MN1 [Required]
	Timeframe Timeframe `protobuf:"varint,3,opt,name=timeframe,proto3,enum=mt4grpc.Timeframe" json:"timeframe,omitempty"`
	// 'From date' in format: yyyy-MM-ddTHH:mm:ss [Required]
	From string `protobuf:"bytes,4,opt,name=from,proto3" json:"from,omitempty"`
	// Number of bars back from specified date. [Required]
	Count int32 `protobuf:"varint,5,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *RequestQuoteHistoryRequest) Reset() {
	*x = RequestQuoteHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestQuoteHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestQuoteHistoryRequest) ProtoMessage() {}

func (x *RequestQuoteHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestQuoteHistoryRequest.ProtoReflect.Descriptor instead.
func (*RequestQuoteHistoryRequest) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{44}
}

func (x *RequestQuoteHistoryRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RequestQuoteHistoryRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *RequestQuoteHistoryRequest) GetTimeframe() Timeframe {
	if x != nil {
		return x.Timeframe
	}
	return Timeframe_TIMEFRAME_M0
}

func (x *RequestQuoteHistoryRequest) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *RequestQuoteHistoryRequest) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type RequestQuoteHistoryReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result string `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Error  *Error `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *RequestQuoteHistoryReply) Reset() {
	*x = RequestQuoteHistoryReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestQuoteHistoryReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestQuoteHistoryReply) ProtoMessage() {}

func (x *RequestQuoteHistoryReply) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestQuoteHistoryReply.ProtoReflect.Descriptor instead.
func (*RequestQuoteHistoryReply) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{45}
}

func (x *RequestQuoteHistoryReply) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *RequestQuoteHistoryReply) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// [Example]
//
//	{
//	 "id": "demo-token-mt4",
//	 "type": "Client"
//	}
type SetPlacedTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Token returned by 'Connect' method [Required]
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Placed type
	Type PlacedType `protobuf:"varint,2,opt,name=type,proto3,enum=mt4grpc.PlacedType" json:"type,omitempty"`
}

func (x *SetPlacedTypeRequest) Reset() {
	*x = SetPlacedTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPlacedTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPlacedTypeRequest) ProtoMessage() {}

func (x *SetPlacedTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPlacedTypeRequest.ProtoReflect.Descriptor instead.
func (*SetPlacedTypeRequest) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{46}
}

func (x *SetPlacedTypeRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SetPlacedTypeRequest) GetType() PlacedType {
	if x != nil {
		return x.Type
	}
	return PlacedType_PlacedType_Client
}

type SetPlacedTypeReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*Order `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
	Error  *Error   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *SetPlacedTypeReply) Reset() {
	*x = SetPlacedTypeReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPlacedTypeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPlacedTypeReply) ProtoMessage() {}

func (x *SetPlacedTypeReply) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPlacedTypeReply.ProtoReflect.Descriptor instead.
func (*SetPlacedTypeReply) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{47}
}

func (x *SetPlacedTypeReply) GetResult() []*Order {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *SetPlacedTypeReply) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type PingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PingRequest) Reset() {
	*x = PingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingRequest) ProtoMessage() {}

func (x *PingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingRequest.ProtoReflect.Descriptor instead.
func (*PingRequest) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{48}
}

type PingReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result string `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Error  *Error `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *PingReply) Reset() {
	*x = PingReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingReply) ProtoMessage() {}

func (x *PingReply) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingReply.ProtoReflect.Descriptor instead.
func (*PingReply) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{49}
}

func (x *PingReply) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *PingReply) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// [Example]
//
//	{
//	 "id": "demo-token-mt4"
//	}
type GetLogsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Token returned by 'Connect' method [Required]
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetLogsRequest) Reset() {
	*x = GetLogsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLogsRequest) ProtoMessage() {}

func (x *GetLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLogsRequest.ProtoReflect.Descriptor instead.
func (*GetLogsRequest) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{50}
}

func (x *GetLogsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type LogRec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time     *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=Time,proto3" json:"Time,omitempty"`
	Level    LogEventLevel          `protobuf:"varint,2,opt,name=Level,proto3,enum=mt4grpc.LogEventLevel" json:"Level,omitempty"`
	Message  string                 `protobuf:"bytes,3,opt,name=Message,proto3" json:"Message,omitempty"`
	Id       string                 `protobuf:"bytes,4,opt,name=Id,proto3" json:"Id,omitempty"`
	User     int32                  `protobuf:"varint,5,opt,name=User,proto3" json:"User,omitempty"`
	Password string                 `protobuf:"bytes,6,opt,name=Password,proto3" json:"Password,omitempty"`
}

func (x *LogRec) Reset() {
	*x = LogRec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogRec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogRec) ProtoMessage() {}

func (x *LogRec) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogRec.ProtoReflect.Descriptor instead.
func (*LogRec) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{51}
}

func (x *LogRec) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *LogRec) GetLevel() LogEventLevel {
	if x != nil {
		return x.Level
	}
	return LogEventLevel_LogEventLevel_Verbose
}

func (x *LogRec) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *LogRec) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *LogRec) GetUser() int32 {
	if x != nil {
		return x.User
	}
	return 0
}

func (x *LogRec) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type GetLogsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*LogRec `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
	Error  *Error    `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *GetLogsReply) Reset() {
	*x = GetLogsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLogsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLogsReply) ProtoMessage() {}

func (x *GetLogsReply) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLogsReply.ProtoReflect.Descriptor instead.
func (*GetLogsReply) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{52}
}

func (x *GetLogsReply) GetResult() []*LogRec {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *GetLogsReply) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// [Example]
//
//	{
//	 "user": "500476959",
//	 "password": "ehj4bod"
//	}
type GetLogsByUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Account number [Required]
	User int32 `protobuf:"varint,1,opt,name=user,proto3" json:"user,omitempty"`
	// Password [Required]
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *GetLogsByUserRequest) Reset() {
	*x = GetLogsByUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLogsByUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLogsByUserRequest) ProtoMessage() {}

func (x *GetLogsByUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLogsByUserRequest.ProtoReflect.Descriptor instead.
func (*GetLogsByUserRequest) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{53}
}

func (x *GetLogsByUserRequest) GetUser() int32 {
	if x != nil {
		return x.User
	}
	return 0
}

func (x *GetLogsByUserRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type GetLogsByUserReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*LogRec `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
	Error  *Error    `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *GetLogsByUserReply) Reset() {
	*x = GetLogsByUserReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLogsByUserReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLogsByUserReply) ProtoMessage() {}

func (x *GetLogsByUserReply) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLogsByUserReply.ProtoReflect.Descriptor instead.
func (*GetLogsByUserReply) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{54}
}

func (x *GetLogsByUserReply) GetResult() []*LogRec {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *GetLogsByUserReply) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type MemorySnapshotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MemorySnapshotRequest) Reset() {
	*x = MemorySnapshotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemorySnapshotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemorySnapshotRequest) ProtoMessage() {}

func (x *MemorySnapshotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemorySnapshotRequest.ProtoReflect.Descriptor instead.
func (*MemorySnapshotRequest) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{55}
}

type MemorySnapshotReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result string `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Error  *Error `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *MemorySnapshotReply) Reset() {
	*x = MemorySnapshotReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemorySnapshotReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemorySnapshotReply) ProtoMessage() {}

func (x *MemorySnapshotReply) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemorySnapshotReply.ProtoReflect.Descriptor instead.
func (*MemorySnapshotReply) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{56}
}

func (x *MemorySnapshotReply) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *MemorySnapshotReply) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// [Example]
//
//	{
//	 "company": ""
//	}
type SearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Company name [Required]
	Company string `protobuf:"bytes,1,opt,name=company,proto3" json:"company,omitempty"`
}

func (x *SearchRequest) Reset() {
	*x = SearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRequest) ProtoMessage() {}

func (x *SearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRequest.ProtoReflect.Descriptor instead.
func (*SearchRequest) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{57}
}

func (x *SearchRequest) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

type BrokerSerachResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*BrokerCompany `protobuf:"bytes,1,rep,name=Result,proto3" json:"Result,omitempty"`
}

func (x *BrokerSerachResult) Reset() {
	*x = BrokerSerachResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrokerSerachResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrokerSerachResult) ProtoMessage() {}

func (x *BrokerSerachResult) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrokerSerachResult.ProtoReflect.Descriptor instead.
func (*BrokerSerachResult) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{58}
}

func (x *BrokerSerachResult) GetResult() []*BrokerCompany {
	if x != nil {
		return x.Result
	}
	return nil
}

type BrokerCompany struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Company string          `protobuf:"bytes,1,opt,name=Company,proto3" json:"Company,omitempty"`
	Results []*BrokerServer `protobuf:"bytes,2,rep,name=Results,proto3" json:"Results,omitempty"`
}

func (x *BrokerCompany) Reset() {
	*x = BrokerCompany{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrokerCompany) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrokerCompany) ProtoMessage() {}

func (x *BrokerCompany) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrokerCompany.ProtoReflect.Descriptor instead.
func (*BrokerCompany) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{59}
}

func (x *BrokerCompany) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *BrokerCompany) GetResults() []*BrokerServer {
	if x != nil {
		return x.Results
	}
	return nil
}

type BrokerServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Access []string `protobuf:"bytes,2,rep,name=Access,proto3" json:"Access,omitempty"`
	IsDemo string   `protobuf:"bytes,3,opt,name=Is_demo,json=IsDemo,proto3" json:"Is_demo,omitempty"`
}

func (x *BrokerServer) Reset() {
	*x = BrokerServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrokerServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrokerServer) ProtoMessage() {}

func (x *BrokerServer) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrokerServer.ProtoReflect.Descriptor instead.
func (*BrokerServer) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{60}
}

func (x *BrokerServer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BrokerServer) GetAccess() []string {
	if x != nil {
		return x.Access
	}
	return nil
}

func (x *BrokerServer) GetIsDemo() string {
	if x != nil {
		return x.IsDemo
	}
	return ""
}

type SearchReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *BrokerSerachResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Error  *Error              `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *SearchReply) Reset() {
	*x = SearchReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchReply) ProtoMessage() {}

func (x *SearchReply) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchReply.ProtoReflect.Descriptor instead.
func (*SearchReply) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{61}
}

func (x *SearchReply) GetResult() *BrokerSerachResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *SearchReply) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type GetClientsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetClientsRequest) Reset() {
	*x = GetClientsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClientsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClientsRequest) ProtoMessage() {}

func (x *GetClientsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClientsRequest.ProtoReflect.Descriptor instead.
func (*GetClientsRequest) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{62}
}

// Client ID with connection status
type ClientStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Token
	Id string `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	// Connection status
	Connected bool `protobuf:"varint,2,opt,name=Connected,proto3" json:"Connected,omitempty"`
	// User
	User int32 `protobuf:"varint,3,opt,name=User,proto3" json:"User,omitempty"`
	// Host
	Host string `protobuf:"bytes,4,opt,name=Host,proto3" json:"Host,omitempty"`
	// Port
	Port int32 `protobuf:"varint,5,opt,name=Port,proto3" json:"Port,omitempty"`
}

func (x *ClientStatus) Reset() {
	*x = ClientStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientStatus) ProtoMessage() {}

func (x *ClientStatus) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientStatus.ProtoReflect.Descriptor instead.
func (*ClientStatus) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{63}
}

func (x *ClientStatus) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ClientStatus) GetConnected() bool {
	if x != nil {
		return x.Connected
	}
	return false
}

func (x *ClientStatus) GetUser() int32 {
	if x != nil {
		return x.User
	}
	return 0
}

func (x *ClientStatus) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *ClientStatus) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type GetClientsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*ClientStatus `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
	Error  *Error          `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *GetClientsReply) Reset() {
	*x = GetClientsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClientsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClientsReply) ProtoMessage() {}

func (x *GetClientsReply) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClientsReply.ProtoReflect.Descriptor instead.
func (*GetClientsReply) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{64}
}

func (x *GetClientsReply) GetResult() []*ClientStatus {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *GetClientsReply) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type MemoryUsageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MemoryUsageRequest) Reset() {
	*x = MemoryUsageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemoryUsageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemoryUsageRequest) ProtoMessage() {}

func (x *MemoryUsageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemoryUsageRequest.ProtoReflect.Descriptor instead.
func (*MemoryUsageRequest) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{65}
}

type MemUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Is64BitProcess               bool   `protobuf:"varint,1,opt,name=Is64BitProcess,proto3" json:"Is64BitProcess,omitempty"`
	PhysicalMemoryUsage          int32  `protobuf:"varint,2,opt,name=PhysicalMemoryUsage,proto3" json:"PhysicalMemoryUsage,omitempty"`
	BasePriority                 int32  `protobuf:"varint,3,opt,name=BasePriority,proto3" json:"BasePriority,omitempty"`
	PriorityClass                string `protobuf:"bytes,4,opt,name=PriorityClass,proto3" json:"PriorityClass,omitempty"`
	UserProcessorTime            string `protobuf:"bytes,5,opt,name=UserProcessorTime,proto3" json:"UserProcessorTime,omitempty"`
	PrivilegedProcessorTime      string `protobuf:"bytes,6,opt,name=PrivilegedProcessorTime,proto3" json:"PrivilegedProcessorTime,omitempty"`
	TotalProcessorTime           string `protobuf:"bytes,7,opt,name=TotalProcessorTime,proto3" json:"TotalProcessorTime,omitempty"`
	PagedSystemMemorySize        int32  `protobuf:"varint,8,opt,name=PagedSystemMemorySize,proto3" json:"PagedSystemMemorySize,omitempty"`
	PagedMemorySize              int32  `protobuf:"varint,9,opt,name=PagedMemorySize,proto3" json:"PagedMemorySize,omitempty"`
	PeakPagedMem                 int32  `protobuf:"varint,10,opt,name=PeakPagedMem,proto3" json:"PeakPagedMem,omitempty"`
	PeakVirtualMem               int32  `protobuf:"varint,11,opt,name=PeakVirtualMem,proto3" json:"PeakVirtualMem,omitempty"`
	PeakWorkingSet               int32  `protobuf:"varint,12,opt,name=PeakWorkingSet,proto3" json:"PeakWorkingSet,omitempty"`
	MemoryLoadBytes              int32  `protobuf:"varint,13,opt,name=MemoryLoadBytes,proto3" json:"MemoryLoadBytes,omitempty"`
	HeapSizeBytes                int32  `protobuf:"varint,14,opt,name=HeapSizeBytes,proto3" json:"HeapSizeBytes,omitempty"`
	FragmentedBytes              int32  `protobuf:"varint,15,opt,name=FragmentedBytes,proto3" json:"FragmentedBytes,omitempty"`
	HighMemoryLoadThresholdBytes int32  `protobuf:"varint,16,opt,name=HighMemoryLoadThresholdBytes,proto3" json:"HighMemoryLoadThresholdBytes,omitempty"`
	TotalAvailableMemoryBytes    int32  `protobuf:"varint,17,opt,name=TotalAvailableMemoryBytes,proto3" json:"TotalAvailableMemoryBytes,omitempty"`
	Responding                   bool   `protobuf:"varint,18,opt,name=Responding,proto3" json:"Responding,omitempty"`
}

func (x *MemUsage) Reset() {
	*x = MemUsage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemUsage) ProtoMessage() {}

func (x *MemUsage) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemUsage.ProtoReflect.Descriptor instead.
func (*MemUsage) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{66}
}

func (x *MemUsage) GetIs64BitProcess() bool {
	if x != nil {
		return x.Is64BitProcess
	}
	return false
}

func (x *MemUsage) GetPhysicalMemoryUsage() int32 {
	if x != nil {
		return x.PhysicalMemoryUsage
	}
	return 0
}

func (x *MemUsage) GetBasePriority() int32 {
	if x != nil {
		return x.BasePriority
	}
	return 0
}

func (x *MemUsage) GetPriorityClass() string {
	if x != nil {
		return x.PriorityClass
	}
	return ""
}

func (x *MemUsage) GetUserProcessorTime() string {
	if x != nil {
		return x.UserProcessorTime
	}
	return ""
}

func (x *MemUsage) GetPrivilegedProcessorTime() string {
	if x != nil {
		return x.PrivilegedProcessorTime
	}
	return ""
}

func (x *MemUsage) GetTotalProcessorTime() string {
	if x != nil {
		return x.TotalProcessorTime
	}
	return ""
}

func (x *MemUsage) GetPagedSystemMemorySize() int32 {
	if x != nil {
		return x.PagedSystemMemorySize
	}
	return 0
}

func (x *MemUsage) GetPagedMemorySize() int32 {
	if x != nil {
		return x.PagedMemorySize
	}
	return 0
}

func (x *MemUsage) GetPeakPagedMem() int32 {
	if x != nil {
		return x.PeakPagedMem
	}
	return 0
}

func (x *MemUsage) GetPeakVirtualMem() int32 {
	if x != nil {
		return x.PeakVirtualMem
	}
	return 0
}

func (x *MemUsage) GetPeakWorkingSet() int32 {
	if x != nil {
		return x.PeakWorkingSet
	}
	return 0
}

func (x *MemUsage) GetMemoryLoadBytes() int32 {
	if x != nil {
		return x.MemoryLoadBytes
	}
	return 0
}

func (x *MemUsage) GetHeapSizeBytes() int32 {
	if x != nil {
		return x.HeapSizeBytes
	}
	return 0
}

func (x *MemUsage) GetFragmentedBytes() int32 {
	if x != nil {
		return x.FragmentedBytes
	}
	return 0
}

func (x *MemUsage) GetHighMemoryLoadThresholdBytes() int32 {
	if x != nil {
		return x.HighMemoryLoadThresholdBytes
	}
	return 0
}

func (x *MemUsage) GetTotalAvailableMemoryBytes() int32 {
	if x != nil {
		return x.TotalAvailableMemoryBytes
	}
	return 0
}

func (x *MemUsage) GetResponding() bool {
	if x != nil {
		return x.Responding
	}
	return false
}

type MemoryUsageReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *MemUsage `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Error  *Error    `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *MemoryUsageReply) Reset() {
	*x = MemoryUsageReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemoryUsageReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemoryUsageReply) ProtoMessage() {}

func (x *MemoryUsageReply) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemoryUsageReply.ProtoReflect.Descriptor instead.
func (*MemoryUsageReply) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{67}
}

func (x *MemoryUsageReply) GetResult() *MemUsage {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *MemoryUsageReply) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// [Example]
//
//	{
//	 "id": "demo-token-mt4",
//	 "symbol": "EURUSD",
//	 "interval": "0"
//	}
type SubscribeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Token returned by 'Connect' method [Required]
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Symbol [Required]
	Symbol string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	// Minimum interval between events in milliseconds
	Interval int32 `protobuf:"varint,3,opt,name=interval,proto3" json:"interval,omitempty"`
}

func (x *SubscribeRequest) Reset() {
	*x = SubscribeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeRequest) ProtoMessage() {}

func (x *SubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeRequest.ProtoReflect.Descriptor instead.
func (*SubscribeRequest) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{68}
}

func (x *SubscribeRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SubscribeRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *SubscribeRequest) GetInterval() int32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

type SubscribeReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result string `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Error  *Error `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *SubscribeReply) Reset() {
	*x = SubscribeReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeReply) ProtoMessage() {}

func (x *SubscribeReply) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeReply.ProtoReflect.Descriptor instead.
func (*SubscribeReply) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{69}
}

func (x *SubscribeReply) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *SubscribeReply) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// [Example]
//
//	{
//	 "id": "demo-token-mt4",
//	 "interval": "0"
//	}
type SubscribeManyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Token returned by 'Connect' method [Required]
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Required symbols
	Symbols []string `protobuf:"bytes,2,rep,name=symbols,proto3" json:"symbols,omitempty"`
	// Minimum interval between events in milliseconds
	Interval int32 `protobuf:"varint,3,opt,name=interval,proto3" json:"interval,omitempty"`
}

func (x *SubscribeManyRequest) Reset() {
	*x = SubscribeManyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeManyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeManyRequest) ProtoMessage() {}

func (x *SubscribeManyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeManyRequest.ProtoReflect.Descriptor instead.
func (*SubscribeManyRequest) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{70}
}

func (x *SubscribeManyRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SubscribeManyRequest) GetSymbols() []string {
	if x != nil {
		return x.Symbols
	}
	return nil
}

func (x *SubscribeManyRequest) GetInterval() int32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

type SubscribeManyReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result string `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Error  *Error `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *SubscribeManyReply) Reset() {
	*x = SubscribeManyReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeManyReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeManyReply) ProtoMessage() {}

func (x *SubscribeManyReply) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeManyReply.ProtoReflect.Descriptor instead.
func (*SubscribeManyReply) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{71}
}

func (x *SubscribeManyReply) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *SubscribeManyReply) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// [Example]
//
//	{
//	 "id": "demo-token-mt4",
//	 "symbol": "EURUSD"
//	}
type UnSubscribeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Token returned by 'Connect' method [Required]
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Symbol [Required]
	Symbol string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
}

func (x *UnSubscribeRequest) Reset() {
	*x = UnSubscribeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnSubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnSubscribeRequest) ProtoMessage() {}

func (x *UnSubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnSubscribeRequest.ProtoReflect.Descriptor instead.
func (*UnSubscribeRequest) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{72}
}

func (x *UnSubscribeRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UnSubscribeRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

type UnSubscribeReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result string `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Error  *Error `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *UnSubscribeReply) Reset() {
	*x = UnSubscribeReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnSubscribeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnSubscribeReply) ProtoMessage() {}

func (x *UnSubscribeReply) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnSubscribeReply.ProtoReflect.Descriptor instead.
func (*UnSubscribeReply) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{73}
}

func (x *UnSubscribeReply) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *UnSubscribeReply) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// [Example]
//
//	{
//	 "id": "demo-token-mt4"
//	}
type UnSubscribeManyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Token returned by 'Connect' method [Required]
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Required symbols [Required]
	Symbols []string `protobuf:"bytes,2,rep,name=symbols,proto3" json:"symbols,omitempty"`
}

func (x *UnSubscribeManyRequest) Reset() {
	*x = UnSubscribeManyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnSubscribeManyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnSubscribeManyRequest) ProtoMessage() {}

func (x *UnSubscribeManyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnSubscribeManyRequest.ProtoReflect.Descriptor instead.
func (*UnSubscribeManyRequest) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{74}
}

func (x *UnSubscribeManyRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UnSubscribeManyRequest) GetSymbols() []string {
	if x != nil {
		return x.Symbols
	}
	return nil
}

type UnSubscribeManyReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result string `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Error  *Error `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *UnSubscribeManyReply) Reset() {
	*x = UnSubscribeManyReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnSubscribeManyReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnSubscribeManyReply) ProtoMessage() {}

func (x *UnSubscribeManyReply) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnSubscribeManyReply.ProtoReflect.Descriptor instead.
func (*UnSubscribeManyReply) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{75}
}

func (x *UnSubscribeManyReply) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *UnSubscribeManyReply) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// [Example]
//
//	{
//	 "id": "demo-token-mt4"
//	}
type SubscribeOrderProfitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Token returned by 'Connect' method [Required]
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SubscribeOrderProfitRequest) Reset() {
	*x = SubscribeOrderProfitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeOrderProfitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeOrderProfitRequest) ProtoMessage() {}

func (x *SubscribeOrderProfitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeOrderProfitRequest.ProtoReflect.Descriptor instead.
func (*SubscribeOrderProfitRequest) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{76}
}

func (x *SubscribeOrderProfitRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type SubscribeOrderProfitReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*Order `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
	Error  *Error   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *SubscribeOrderProfitReply) Reset() {
	*x = SubscribeOrderProfitReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeOrderProfitReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeOrderProfitReply) ProtoMessage() {}

func (x *SubscribeOrderProfitReply) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeOrderProfitReply.ProtoReflect.Descriptor instead.
func (*SubscribeOrderProfitReply) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{77}
}

func (x *SubscribeOrderProfitReply) GetResult() []*Order {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *SubscribeOrderProfitReply) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// [Example]
//
//	{
//	 "id": "demo-token-mt4",
//	 "symbol": "EURUSD",
//	 "interval": "0"
//	}
type SubscribeTickValueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Token returned by 'Connect' method [Required]
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Symbol [Required]
	Symbol string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	// Minimum interval between events in milliseconds
	Interval int32 `protobuf:"varint,3,opt,name=interval,proto3" json:"interval,omitempty"`
}

func (x *SubscribeTickValueRequest) Reset() {
	*x = SubscribeTickValueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeTickValueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeTickValueRequest) ProtoMessage() {}

func (x *SubscribeTickValueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeTickValueRequest.ProtoReflect.Descriptor instead.
func (*SubscribeTickValueRequest) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{78}
}

func (x *SubscribeTickValueRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SubscribeTickValueRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *SubscribeTickValueRequest) GetInterval() int32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

type SubscribeTickValueReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result string `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Error  *Error `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *SubscribeTickValueReply) Reset() {
	*x = SubscribeTickValueReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeTickValueReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeTickValueReply) ProtoMessage() {}

func (x *SubscribeTickValueReply) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeTickValueReply.ProtoReflect.Descriptor instead.
func (*SubscribeTickValueReply) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{79}
}

func (x *SubscribeTickValueReply) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *SubscribeTickValueReply) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// [Example]
//
//	{
//	 "id": "demo-token-mt4"
//	}
type SubscribeOrderUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Token returned by 'Connect' method [Required]
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SubscribeOrderUpdateRequest) Reset() {
	*x = SubscribeOrderUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeOrderUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeOrderUpdateRequest) ProtoMessage() {}

func (x *SubscribeOrderUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeOrderUpdateRequest.ProtoReflect.Descriptor instead.
func (*SubscribeOrderUpdateRequest) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{80}
}

func (x *SubscribeOrderUpdateRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type SubscribeOrderUpdateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*Order `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
	Error  *Error   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *SubscribeOrderUpdateReply) Reset() {
	*x = SubscribeOrderUpdateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeOrderUpdateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeOrderUpdateReply) ProtoMessage() {}

func (x *SubscribeOrderUpdateReply) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeOrderUpdateReply.ProtoReflect.Descriptor instead.
func (*SubscribeOrderUpdateReply) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{81}
}

func (x *SubscribeOrderUpdateReply) GetResult() []*Order {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *SubscribeOrderUpdateReply) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// [Example]
//
//	{
//	 "id": "demo-token-mt4"
//	}
type SubscribeQuoteHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Token returned by 'Connect' method [Required]
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SubscribeQuoteHistoryRequest) Reset() {
	*x = SubscribeQuoteHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeQuoteHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeQuoteHistoryRequest) ProtoMessage() {}

func (x *SubscribeQuoteHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeQuoteHistoryRequest.ProtoReflect.Descriptor instead.
func (*SubscribeQuoteHistoryRequest) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{82}
}

func (x *SubscribeQuoteHistoryRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type SubscribeQuoteHistoryReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result string `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Error  *Error `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *SubscribeQuoteHistoryReply) Reset() {
	*x = SubscribeQuoteHistoryReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeQuoteHistoryReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeQuoteHistoryReply) ProtoMessage() {}

func (x *SubscribeQuoteHistoryReply) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeQuoteHistoryReply.ProtoReflect.Descriptor instead.
func (*SubscribeQuoteHistoryReply) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{83}
}

func (x *SubscribeQuoteHistoryReply) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *SubscribeQuoteHistoryReply) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// [Example]
//
//	{
//	 "id": "demo-token-mt4",
//	 "symbol": "EURUSD",
//	 "operation": "Buy",
//	 "volume": "0.1",
//	 "price": "0",
//	 "slippage": "0",
//	 "stoploss": "0",
//	 "takeprofit": "0",
//	 "magic": "0",
//	 "placedType": "Client"
//	}
type OrderSendRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Token returned by 'Connect' method [Required]
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Symbol [Required]
	Symbol string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	// Buy, Sell, BuyLimit, SellLimit, BuyStop, SellStop [Required]
	Operation Op `protobuf:"varint,3,opt,name=operation,proto3,enum=mt4grpc.Op" json:"operation,omitempty"`
	// Lots [Required]
	Volume float64 `protobuf:"fixed64,4,opt,name=volume,proto3" json:"volume,omitempty"`
	// Price. Optional, but required in case of Instant Execution.
	Price float64 `protobuf:"fixed64,5,opt,name=price,proto3" json:"price,omitempty"`
	// Slippage. Optional.
	Slippage int32 `protobuf:"varint,6,opt,name=slippage,proto3" json:"slippage,omitempty"`
	// StopLoss. Optional.
	Stoploss float64 `protobuf:"fixed64,7,opt,name=stoploss,proto3" json:"stoploss,omitempty"`
	// TakeProfit. Optional.
	Takeprofit float64 `protobuf:"fixed64,8,opt,name=takeprofit,proto3" json:"takeprofit,omitempty"`
	// Comment. Optional.
	Comment string `protobuf:"bytes,9,opt,name=comment,proto3" json:"comment,omitempty"`
	// Magic. Optional.
	Magic int32 `protobuf:"varint,10,opt,name=magic,proto3" json:"magic,omitempty"`
	// Expiartion in format: yyyy-MM-ddTHH:mm:ss. Optional.
	Expiration string `protobuf:"bytes,11,opt,name=expiration,proto3" json:"expiration,omitempty"`
	// Placed type
	PlacedType PlacedType `protobuf:"varint,12,opt,name=placedType,proto3,enum=mt4grpc.PlacedType" json:"placedType,omitempty"`
}

func (x *OrderSendRequest) Reset() {
	*x = OrderSendRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderSendRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderSendRequest) ProtoMessage() {}

func (x *OrderSendRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderSendRequest.ProtoReflect.Descriptor instead.
func (*OrderSendRequest) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{84}
}

func (x *OrderSendRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *OrderSendRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *OrderSendRequest) GetOperation() Op {
	if x != nil {
		return x.Operation
	}
	return Op_Op_Buy
}

func (x *OrderSendRequest) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *OrderSendRequest) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *OrderSendRequest) GetSlippage() int32 {
	if x != nil {
		return x.Slippage
	}
	return 0
}

func (x *OrderSendRequest) GetStoploss() float64 {
	if x != nil {
		return x.Stoploss
	}
	return 0
}

func (x *OrderSendRequest) GetTakeprofit() float64 {
	if x != nil {
		return x.Takeprofit
	}
	return 0
}

func (x *OrderSendRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *OrderSendRequest) GetMagic() int32 {
	if x != nil {
		return x.Magic
	}
	return 0
}

func (x *OrderSendRequest) GetExpiration() string {
	if x != nil {
		return x.Expiration
	}
	return ""
}

func (x *OrderSendRequest) GetPlacedType() PlacedType {
	if x != nil {
		return x.PlacedType
	}
	return PlacedType_PlacedType_Client
}

type OrderSendReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *Order `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Error  *Error `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *OrderSendReply) Reset() {
	*x = OrderSendReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderSendReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderSendReply) ProtoMessage() {}

func (x *OrderSendReply) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderSendReply.ProtoReflect.Descriptor instead.
func (*OrderSendReply) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{85}
}

func (x *OrderSendReply) GetResult() *Order {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *OrderSendReply) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// [Example]
//
//	{
//	 "id": "demo-token-mt4",
//	 "ticket": "0",
//	 "stoploss": "0",
//	 "takeprofit": "0",
//	 "price": "0"
//	}
type OrderModifyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Token returned by 'Connect' method [Required]
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Ticket number [Required]
	Ticket int32 `protobuf:"varint,2,opt,name=ticket,proto3" json:"ticket,omitempty"`
	// StopLoss. Optional. [Required]
	Stoploss float64 `protobuf:"fixed64,3,opt,name=stoploss,proto3" json:"stoploss,omitempty"`
	// TakeProfit. Optional. [Required]
	Takeprofit float64 `protobuf:"fixed64,4,opt,name=takeprofit,proto3" json:"takeprofit,omitempty"`
	// Price. Optional, but required in case of Instant Execution.
	Price float64 `protobuf:"fixed64,5,opt,name=price,proto3" json:"price,omitempty"`
	// Expiartion in format: yyyy-MM-ddTHH:mm:ss. Optional.
	Expiration string `protobuf:"bytes,6,opt,name=expiration,proto3" json:"expiration,omitempty"`
}

func (x *OrderModifyRequest) Reset() {
	*x = OrderModifyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderModifyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderModifyRequest) ProtoMessage() {}

func (x *OrderModifyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderModifyRequest.ProtoReflect.Descriptor instead.
func (*OrderModifyRequest) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{86}
}

func (x *OrderModifyRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *OrderModifyRequest) GetTicket() int32 {
	if x != nil {
		return x.Ticket
	}
	return 0
}

func (x *OrderModifyRequest) GetStoploss() float64 {
	if x != nil {
		return x.Stoploss
	}
	return 0
}

func (x *OrderModifyRequest) GetTakeprofit() float64 {
	if x != nil {
		return x.Takeprofit
	}
	return 0
}

func (x *OrderModifyRequest) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *OrderModifyRequest) GetExpiration() string {
	if x != nil {
		return x.Expiration
	}
	return ""
}

type OrderModifyReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *Order `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Error  *Error `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *OrderModifyReply) Reset() {
	*x = OrderModifyReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderModifyReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderModifyReply) ProtoMessage() {}

func (x *OrderModifyReply) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderModifyReply.ProtoReflect.Descriptor instead.
func (*OrderModifyReply) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{87}
}

func (x *OrderModifyReply) GetResult() *Order {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *OrderModifyReply) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// [Example]
//
//	{
//	 "id": "demo-token-mt4",
//	 "ticket1": "0",
//	 "ticket2": "0"
//	}
type OrderCloseByRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Token returned by 'Connect' method [Required]
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Order ticket [Required]
	Ticket1 int32 `protobuf:"varint,2,opt,name=ticket1,proto3" json:"ticket1,omitempty"`
	// Order ticket [Required]
	Ticket2 int32 `protobuf:"varint,3,opt,name=ticket2,proto3" json:"ticket2,omitempty"`
}

func (x *OrderCloseByRequest) Reset() {
	*x = OrderCloseByRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderCloseByRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderCloseByRequest) ProtoMessage() {}

func (x *OrderCloseByRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderCloseByRequest.ProtoReflect.Descriptor instead.
func (*OrderCloseByRequest) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{88}
}

func (x *OrderCloseByRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *OrderCloseByRequest) GetTicket1() int32 {
	if x != nil {
		return x.Ticket1
	}
	return 0
}

func (x *OrderCloseByRequest) GetTicket2() int32 {
	if x != nil {
		return x.Ticket2
	}
	return 0
}

type OrderCloseByReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result string `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Error  *Error `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *OrderCloseByReply) Reset() {
	*x = OrderCloseByReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderCloseByReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderCloseByReply) ProtoMessage() {}

func (x *OrderCloseByReply) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderCloseByReply.ProtoReflect.Descriptor instead.
func (*OrderCloseByReply) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{89}
}

func (x *OrderCloseByReply) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *OrderCloseByReply) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// [Example]
//
//	{
//	 "id": "demo-token-mt4",
//	 "ticket": "0"
//	}
type OrderDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Token returned by 'Connect' method [Required]
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Ticket number [Required]
	Ticket int32 `protobuf:"varint,2,opt,name=ticket,proto3" json:"ticket,omitempty"`
}

func (x *OrderDeleteRequest) Reset() {
	*x = OrderDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderDeleteRequest) ProtoMessage() {}

func (x *OrderDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderDeleteRequest.ProtoReflect.Descriptor instead.
func (*OrderDeleteRequest) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{90}
}

func (x *OrderDeleteRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *OrderDeleteRequest) GetTicket() int32 {
	if x != nil {
		return x.Ticket
	}
	return 0
}

type OrderDeleteReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result string `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Error  *Error `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *OrderDeleteReply) Reset() {
	*x = OrderDeleteReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderDeleteReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderDeleteReply) ProtoMessage() {}

func (x *OrderDeleteReply) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderDeleteReply.ProtoReflect.Descriptor instead.
func (*OrderDeleteReply) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{91}
}

func (x *OrderDeleteReply) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *OrderDeleteReply) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// [Example]
//
//	{
//	 "id": "demo-token-mt4",
//	 "ticket": "0",
//	 "lots": "0",
//	 "price": "0",
//	 "slippage": "0"
//	}
type OrderCloseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Token returned by 'Connect' method [Required]
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Ticket number [Required]
	Ticket int32 `protobuf:"varint,2,opt,name=ticket,proto3" json:"ticket,omitempty"`
	// Lots
	Lots float64 `protobuf:"fixed64,3,opt,name=lots,proto3" json:"lots,omitempty"`
	// Price. Optional, but required in case of Instant Execution.
	Price float64 `protobuf:"fixed64,4,opt,name=price,proto3" json:"price,omitempty"`
	// Slippage. Optional.
	Slippage int32 `protobuf:"varint,5,opt,name=slippage,proto3" json:"slippage,omitempty"`
}

func (x *OrderCloseRequest) Reset() {
	*x = OrderCloseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderCloseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderCloseRequest) ProtoMessage() {}

func (x *OrderCloseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderCloseRequest.ProtoReflect.Descriptor instead.
func (*OrderCloseRequest) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{92}
}

func (x *OrderCloseRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *OrderCloseRequest) GetTicket() int32 {
	if x != nil {
		return x.Ticket
	}
	return 0
}

func (x *OrderCloseRequest) GetLots() float64 {
	if x != nil {
		return x.Lots
	}
	return 0
}

func (x *OrderCloseRequest) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *OrderCloseRequest) GetSlippage() int32 {
	if x != nil {
		return x.Slippage
	}
	return 0
}

type OrderCloseReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *Order `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Error  *Error `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *OrderCloseReply) Reset() {
	*x = OrderCloseReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderCloseReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderCloseReply) ProtoMessage() {}

func (x *OrderCloseReply) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderCloseReply.ProtoReflect.Descriptor instead.
func (*OrderCloseReply) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{93}
}

func (x *OrderCloseReply) GetResult() *Order {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *OrderCloseReply) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// [Example]
//
//	{
//	 "id": "demo-token-mt4"
//	}
type EventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Token returned by 'Connect' method
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *EventsRequest) Reset() {
	*x = EventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventsRequest) ProtoMessage() {}

func (x *EventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventsRequest.ProtoReflect.Descriptor instead.
func (*EventsRequest) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{94}
}

func (x *EventsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type EventsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result string `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Error  *Error `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *EventsReply) Reset() {
	*x = EventsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventsReply) ProtoMessage() {}

func (x *EventsReply) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventsReply.ProtoReflect.Descriptor instead.
func (*EventsReply) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{95}
}

func (x *EventsReply) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *EventsReply) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// [Example]
//
//	{
//	 "id": "demo-token-mt4"
//	}
type OnOrderUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Token returned by 'Connect' method
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *OnOrderUpdateRequest) Reset() {
	*x = OnOrderUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnOrderUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnOrderUpdateRequest) ProtoMessage() {}

func (x *OnOrderUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnOrderUpdateRequest.ProtoReflect.Descriptor instead.
func (*OnOrderUpdateRequest) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{96}
}

func (x *OnOrderUpdateRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Order update event details
type OrderUpdateSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Order and update action
	Update *OrderUpdateEventArgs `protobuf:"bytes,1,opt,name=Update,proto3" json:"Update,omitempty"`
	// Balance
	Balance float64 `protobuf:"fixed64,2,opt,name=Balance,proto3" json:"Balance,omitempty"`
	// Equity
	Equity float64 `protobuf:"fixed64,3,opt,name=Equity,proto3" json:"Equity,omitempty"`
	// Used margin
	Margin float64 `protobuf:"fixed64,4,opt,name=Margin,proto3" json:"Margin,omitempty"`
	// Free margin
	FreeMargin float64 `protobuf:"fixed64,5,opt,name=FreeMargin,proto3" json:"FreeMargin,omitempty"`
	// Account profit
	Profit float64 `protobuf:"fixed64,6,opt,name=Profit,proto3" json:"Profit,omitempty"`
	// Opened orders
	OpenedOrders []*Order `protobuf:"bytes,7,rep,name=OpenedOrders,proto3" json:"OpenedOrders,omitempty"`
}

func (x *OrderUpdateSummary) Reset() {
	*x = OrderUpdateSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderUpdateSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderUpdateSummary) ProtoMessage() {}

func (x *OrderUpdateSummary) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderUpdateSummary.ProtoReflect.Descriptor instead.
func (*OrderUpdateSummary) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{97}
}

func (x *OrderUpdateSummary) GetUpdate() *OrderUpdateEventArgs {
	if x != nil {
		return x.Update
	}
	return nil
}

func (x *OrderUpdateSummary) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *OrderUpdateSummary) GetEquity() float64 {
	if x != nil {
		return x.Equity
	}
	return 0
}

func (x *OrderUpdateSummary) GetMargin() float64 {
	if x != nil {
		return x.Margin
	}
	return 0
}

func (x *OrderUpdateSummary) GetFreeMargin() float64 {
	if x != nil {
		return x.FreeMargin
	}
	return 0
}

func (x *OrderUpdateSummary) GetProfit() float64 {
	if x != nil {
		return x.Profit
	}
	return 0
}

func (x *OrderUpdateSummary) GetOpenedOrders() []*Order {
	if x != nil {
		return x.OpenedOrders
	}
	return nil
}

// Arguments for OrderUpdate event.
type OrderUpdateEventArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Updated order.
	Order *Order `protobuf:"bytes,1,opt,name=Order,proto3" json:"Order,omitempty"`
	// Update action.
	Action UpdateAction `protobuf:"varint,2,opt,name=Action,proto3,enum=mt4grpc.UpdateAction" json:"Action,omitempty"`
}

func (x *OrderUpdateEventArgs) Reset() {
	*x = OrderUpdateEventArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderUpdateEventArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderUpdateEventArgs) ProtoMessage() {}

func (x *OrderUpdateEventArgs) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderUpdateEventArgs.ProtoReflect.Descriptor instead.
func (*OrderUpdateEventArgs) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{98}
}

func (x *OrderUpdateEventArgs) GetOrder() *Order {
	if x != nil {
		return x.Order
	}
	return nil
}

func (x *OrderUpdateEventArgs) GetAction() UpdateAction {
	if x != nil {
		return x.Action
	}
	return UpdateAction_UpdateAction_PositionOpen
}

type OnOrderUpdateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *OrderUpdateSummary `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Error  *Error              `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *OnOrderUpdateReply) Reset() {
	*x = OnOrderUpdateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnOrderUpdateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnOrderUpdateReply) ProtoMessage() {}

func (x *OnOrderUpdateReply) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnOrderUpdateReply.ProtoReflect.Descriptor instead.
func (*OnOrderUpdateReply) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{99}
}

func (x *OnOrderUpdateReply) GetResult() *OrderUpdateSummary {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *OnOrderUpdateReply) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// [Example]
//
//	{
//	 "id": "demo-token-mt4"
//	}
type OnQuoteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Token returned by 'Connect' method
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *OnQuoteRequest) Reset() {
	*x = OnQuoteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnQuoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnQuoteRequest) ProtoMessage() {}

func (x *OnQuoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnQuoteRequest.ProtoReflect.Descriptor instead.
func (*OnQuoteRequest) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{100}
}

func (x *OnQuoteRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type OnQuoteReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *QuoteEventArgs `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Error  *Error          `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *OnQuoteReply) Reset() {
	*x = OnQuoteReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnQuoteReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnQuoteReply) ProtoMessage() {}

func (x *OnQuoteReply) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnQuoteReply.ProtoReflect.Descriptor instead.
func (*OnQuoteReply) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{101}
}

func (x *OnQuoteReply) GetResult() *QuoteEventArgs {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *OnQuoteReply) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// [Example]
//
//	{
//	 "id": "demo-token-mt4"
//	}
type OnTickValueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Token returned by 'Connect' method
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *OnTickValueRequest) Reset() {
	*x = OnTickValueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnTickValueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnTickValueRequest) ProtoMessage() {}

func (x *OnTickValueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnTickValueRequest.ProtoReflect.Descriptor instead.
func (*OnTickValueRequest) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{102}
}

func (x *OnTickValueRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Tick value update
type SymbolTickValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Symbol
	Symbol string `protobuf:"bytes,1,opt,name=Symbol,proto3" json:"Symbol,omitempty"`
	// Tick value
	TickValue float64 `protobuf:"fixed64,2,opt,name=TickValue,proto3" json:"TickValue,omitempty"`
}

func (x *SymbolTickValue) Reset() {
	*x = SymbolTickValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymbolTickValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolTickValue) ProtoMessage() {}

func (x *SymbolTickValue) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolTickValue.ProtoReflect.Descriptor instead.
func (*SymbolTickValue) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{103}
}

func (x *SymbolTickValue) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *SymbolTickValue) GetTickValue() float64 {
	if x != nil {
		return x.TickValue
	}
	return 0
}

type OnTickValueReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *SymbolTickValue `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Error  *Error           `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *OnTickValueReply) Reset() {
	*x = OnTickValueReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnTickValueReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnTickValueReply) ProtoMessage() {}

func (x *OnTickValueReply) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnTickValueReply.ProtoReflect.Descriptor instead.
func (*OnTickValueReply) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{104}
}

func (x *OnTickValueReply) GetResult() *SymbolTickValue {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *OnTickValueReply) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// [Example]
//
//	{
//	 "id": "demo-token-mt4"
//	}
type OnOrderProfitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Token returned by 'Connect' method
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *OnOrderProfitRequest) Reset() {
	*x = OnOrderProfitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnOrderProfitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnOrderProfitRequest) ProtoMessage() {}

func (x *OnOrderProfitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnOrderProfitRequest.ProtoReflect.Descriptor instead.
func (*OnOrderProfitRequest) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{105}
}

func (x *OnOrderProfitRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Profit update message
type ProfitUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Balace
	Balance float64 `protobuf:"fixed64,1,opt,name=Balance,proto3" json:"Balance,omitempty"`
	// Equity
	Equity float64 `protobuf:"fixed64,2,opt,name=Equity,proto3" json:"Equity,omitempty"`
	// User margin
	Margin float64 `protobuf:"fixed64,3,opt,name=Margin,proto3" json:"Margin,omitempty"`
	// Free margin
	FreeMargin float64 `protobuf:"fixed64,4,opt,name=FreeMargin,proto3" json:"FreeMargin,omitempty"`
	// Account profit
	Profit float64 `protobuf:"fixed64,5,opt,name=Profit,proto3" json:"Profit,omitempty"`
	// Opened orders
	Orders []*Order `protobuf:"bytes,6,rep,name=Orders,proto3" json:"Orders,omitempty"`
}

func (x *ProfitUpdate) Reset() {
	*x = ProfitUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfitUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfitUpdate) ProtoMessage() {}

func (x *ProfitUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfitUpdate.ProtoReflect.Descriptor instead.
func (*ProfitUpdate) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{106}
}

func (x *ProfitUpdate) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *ProfitUpdate) GetEquity() float64 {
	if x != nil {
		return x.Equity
	}
	return 0
}

func (x *ProfitUpdate) GetMargin() float64 {
	if x != nil {
		return x.Margin
	}
	return 0
}

func (x *ProfitUpdate) GetFreeMargin() float64 {
	if x != nil {
		return x.FreeMargin
	}
	return 0
}

func (x *ProfitUpdate) GetProfit() float64 {
	if x != nil {
		return x.Profit
	}
	return 0
}

func (x *ProfitUpdate) GetOrders() []*Order {
	if x != nil {
		return x.Orders
	}
	return nil
}

type OnOrderProfitReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *ProfitUpdate `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Error  *Error        `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *OnOrderProfitReply) Reset() {
	*x = OnOrderProfitReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnOrderProfitReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnOrderProfitReply) ProtoMessage() {}

func (x *OnOrderProfitReply) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnOrderProfitReply.ProtoReflect.Descriptor instead.
func (*OnOrderProfitReply) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{107}
}

func (x *OnOrderProfitReply) GetResult() *ProfitUpdate {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *OnOrderProfitReply) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// [Example]
//
//	{
//	 "id": "demo-token-mt4"
//	}
type OnQuoteHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Token returned by 'Connect' method
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *OnQuoteHistoryRequest) Reset() {
	*x = OnQuoteHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnQuoteHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnQuoteHistoryRequest) ProtoMessage() {}

func (x *OnQuoteHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnQuoteHistoryRequest.ProtoReflect.Descriptor instead.
func (*OnQuoteHistoryRequest) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{108}
}

func (x *OnQuoteHistoryRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Quote history event args.
type QuoteHistoryEventArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Instrument.
	Symbol string `protobuf:"bytes,1,opt,name=Symbol,proto3" json:"Symbol,omitempty"`
	// Timeframe.
	Timeframe Timeframe `protobuf:"varint,2,opt,name=Timeframe,proto3,enum=mt4grpc.Timeframe" json:"Timeframe,omitempty"`
	// History bars.
	Bars []*Bar `protobuf:"bytes,3,rep,name=Bars,proto3" json:"Bars,omitempty"`
}

func (x *QuoteHistoryEventArgs) Reset() {
	*x = QuoteHistoryEventArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuoteHistoryEventArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuoteHistoryEventArgs) ProtoMessage() {}

func (x *QuoteHistoryEventArgs) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuoteHistoryEventArgs.ProtoReflect.Descriptor instead.
func (*QuoteHistoryEventArgs) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{109}
}

func (x *QuoteHistoryEventArgs) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *QuoteHistoryEventArgs) GetTimeframe() Timeframe {
	if x != nil {
		return x.Timeframe
	}
	return Timeframe_TIMEFRAME_M0
}

func (x *QuoteHistoryEventArgs) GetBars() []*Bar {
	if x != nil {
		return x.Bars
	}
	return nil
}

type OnQuoteHistoryReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *QuoteHistoryEventArgs `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Error  *Error                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *OnQuoteHistoryReply) Reset() {
	*x = OnQuoteHistoryReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnQuoteHistoryReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnQuoteHistoryReply) ProtoMessage() {}

func (x *OnQuoteHistoryReply) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnQuoteHistoryReply.ProtoReflect.Descriptor instead.
func (*OnQuoteHistoryReply) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{110}
}

func (x *OnQuoteHistoryReply) GetResult() *QuoteHistoryEventArgs {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *OnQuoteHistoryReply) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// [Example]
//
//	{
//	 "id": "demo-token-mt4"
//	}
type OnDisconnectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Token returned by 'Connect' method
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *OnDisconnectRequest) Reset() {
	*x = OnDisconnectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnDisconnectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnDisconnectRequest) ProtoMessage() {}

func (x *OnDisconnectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnDisconnectRequest.ProtoReflect.Descriptor instead.
func (*OnDisconnectRequest) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{111}
}

func (x *OnDisconnectRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type OnDisconnectReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result string `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Error  *Error `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *OnDisconnectReply) Reset() {
	*x = OnDisconnectReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mt4_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnDisconnectReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnDisconnectReply) ProtoMessage() {}

func (x *OnDisconnectReply) ProtoReflect() protoreflect.Message {
	mi := &file_mt4_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnDisconnectReply.ProtoReflect.Descriptor instead.
func (*OnDisconnectReply) Descriptor() ([]byte, []int) {
	return file_mt4_proto_rawDescGZIP(), []int{112}
}

func (x *OnDisconnectReply) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *OnDisconnectReply) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

var File_mt4_proto protoreflect.FileDescriptor

var file_mt4_proto_rawDesc = []byte{
	0x0a, 0x09, 0x6d, 0x74, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x6d, 0x74, 0x34,
	0x67, 0x72, 0x70, 0x63, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x69, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x26,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d,
	0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x22, 0x68, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x4c, 0x0a, 0x0c, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x25, 0x0a, 0x13, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x51, 0x0a, 0x11, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x24, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x74,
	0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0x23, 0x0a, 0x11, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4f, 0x0a, 0x0f, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x27, 0x0a, 0x15, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x22, 0xce, 0x02, 0x0a, 0x0e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06,
	0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x45, 0x71, 0x75, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06,
	0x45, 0x71, 0x75, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x1e,
	0x0a, 0x0a, 0x46, 0x72, 0x65, 0x65, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0a, 0x46, 0x72, 0x65, 0x65, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x20,
	0x0a, 0x0b, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0b, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x65, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x4c, 0x65, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x28, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x73, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x49, 0x73, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x22, 0x6c, 0x0a, 0x13, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2f, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x74, 0x34, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x74, 0x34, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x22, 0x1f, 0x0a, 0x0d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x46, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x64, 0x0a, 0x0b, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2f, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22,
	0x36, 0x0a, 0x0c, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x22, 0xa2, 0x01, 0x0a, 0x0e, 0x51, 0x75, 0x6f, 0x74,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x72, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x42, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x03, 0x42, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x41, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x03, 0x41, 0x73, 0x6b, 0x12, 0x2e, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x69, 0x67, 0x68, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x48, 0x69, 0x67, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x4c, 0x6f,
	0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x4c, 0x6f, 0x77, 0x22, 0x63, 0x0a, 0x0a,
	0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2f, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x74, 0x34,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41,
	0x72, 0x67, 0x73, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x74, 0x34,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x22, 0x25, 0x0a, 0x13, 0x4f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xab, 0x05, 0x0a, 0x05, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x33, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12,
	0x36, 0x0a, 0x08, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x4f,
	0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0a, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x6d, 0x74,
	0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x70, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x4c, 0x6f, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x4c, 0x6f,
	0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x70,
	0x65, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x4f,
	0x70, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x74, 0x6f, 0x70,
	0x4c, 0x6f, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x53, 0x74, 0x6f, 0x70,
	0x4c, 0x6f, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x61, 0x6b, 0x65, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x54, 0x61, 0x6b, 0x65, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x4d, 0x61, 0x67, 0x69, 0x63,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x77, 0x61, 0x70, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x53, 0x77, 0x61, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x52, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x52, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x61, 0x74, 0x65,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x52, 0x61, 0x74,
	0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x61, 0x74, 0x65, 0x4d, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x52, 0x61, 0x74, 0x65,
	0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x22, 0x61, 0x0a, 0x11, 0x4f, 0x70, 0x65, 0x6e, 0x65, 0x64,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x26, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x74,
	0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x20, 0x0a, 0x0e, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4c, 0x0a, 0x0c, 0x53,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x3d, 0x0a, 0x13, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x22, 0xc2, 0x01, 0x0a, 0x0c, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x74, 0x34, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06,
	0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x2d, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x43, 0x6f, 0x6e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x36, 0x0a, 0x0b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x74, 0x34,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x63,
	0x52, 0x0b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x8c, 0x04,
	0x0a, 0x0a, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x09,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x12, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e,
	0x0a, 0x0a, 0x53, 0x74, 0x6f, 0x70, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x53, 0x74, 0x6f, 0x70, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x16,
	0x0a, 0x06, 0x44, 0x69, 0x67, 0x69, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x44, 0x69, 0x67, 0x69, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x53, 0x77, 0x61, 0x70, 0x4c, 0x6f, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x53, 0x77, 0x61, 0x70, 0x4c, 0x6f, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x77, 0x61, 0x70,
	0x53, 0x68, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x53, 0x77, 0x61,
	0x70, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x46, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x46, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x26, 0x0a, 0x0e, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x33, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6d,
	0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x52, 0x0a, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x33, 0x0a,
	0x0a, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x13, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x44, 0x69, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x4d, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xd3, 0x05, 0x0a,
	0x0b, 0x43, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x63, 0x12, 0x16, 0x0a, 0x06,
	0x4d, 0x69, 0x6e, 0x4c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x4d, 0x69,
	0x6e, 0x4c, 0x6f, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x61, 0x78, 0x4c, 0x6f, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x4d, 0x61, 0x78, 0x4c, 0x6f, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x4c, 0x6f, 0x74, 0x53, 0x74, 0x65, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x4c,
	0x6f, 0x74, 0x53, 0x74, 0x65, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x68, 0x6f, 0x77, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x68, 0x6f, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x42, 0x61, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x6f, 0x6d, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x63, 0x6f, 0x6d, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d,
	0x5f, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6f, 0x6d,
	0x6d, 0x4c, 0x6f, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x5f, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x5f, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63,
	0x6f, 0x6d, 0x6d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x44, 0x69, 0x66, 0x66, 0x12, 0x17, 0x0a,
	0x07, 0x6c, 0x6f, 0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x6c, 0x6f, 0x74, 0x4d, 0x69, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x6f, 0x74, 0x5f, 0x6d, 0x61,
	0x78, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6c, 0x6f, 0x74, 0x4d, 0x61, 0x78, 0x12,
	0x21, 0x0a, 0x0c, 0x69, 0x65, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x69, 0x65, 0x44, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x65, 0x5f,
	0x71, 0x75, 0x69, 0x63, 0x6b, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x69, 0x65, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a,
	0x11, 0x61, 0x75, 0x74, 0x6f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6f,
	0x6d, 0x6d, 0x5f, 0x74, 0x61, 0x78, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x54, 0x61, 0x78, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x5f, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x63, 0x6f, 0x6d, 0x6d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x74, 0x73, 0x12, 0x27, 0x0a,
	0x0f, 0x66, 0x72, 0x65, 0x65, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x66, 0x72, 0x65, 0x65, 0x6d, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x18, 0x17, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x22, 0x68, 0x0a, 0x11, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2d, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x27, 0x0a, 0x15,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x53, 0x0a, 0x13, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54,
	0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x23, 0x0a, 0x11, 0x49, 0x73,
	0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x4f, 0x0a, 0x0f, 0x49, 0x73, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x74, 0x34, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x22, 0x43, 0x0a, 0x17, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x4d, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x22, 0x6c, 0x0a, 0x15, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x4d, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2d,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x24, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d,
	0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x22, 0x3c, 0x0a, 0x12, 0x4f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x22, 0x60, 0x0a, 0x10, 0x4f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x24, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d,
	0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x22, 0x49, 0x0a, 0x13, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e,
	0x0a, 0x02, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x22, 0x61,
	0x0a, 0x11, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x74, 0x34,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x22, 0x99, 0x01, 0x0a, 0x13, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x12, 0x30, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x9d, 0x01,
	0x0a, 0x03, 0x42, 0x61, 0x72, 0x12, 0x2e, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4f, 0x70, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x04, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x69, 0x67,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x48, 0x69, 0x67, 0x68, 0x12, 0x10, 0x0a,
	0x03, 0x4c, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x4c, 0x6f, 0x77, 0x12,
	0x14, 0x0a, 0x05, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0x5f, 0x0a,
	0x11, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x24, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x61, 0x72,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x9d,
	0x01, 0x0a, 0x17, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d,
	0x61, 0x6e, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x12, 0x30, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x67,
	0x0a, 0x0d, 0x42, 0x61, 0x72, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12,
	0x16, 0x0a, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x20, 0x0a, 0x04, 0x42, 0x61, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x42, 0x61, 0x72, 0x52, 0x04, 0x42, 0x61, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x78, 0x63,
	0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x45, 0x78,
	0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6d, 0x0a, 0x15, 0x51, 0x75, 0x6f, 0x74, 0x65,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x2e, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x61, 0x72, 0x73, 0x46,
	0x6f, 0x72, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x24, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x25, 0x0a, 0x13, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x61, 0x0a,
	0x11, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x74, 0x34, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x22, 0xa0, 0x01, 0x0a, 0x1a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x51, 0x75, 0x6f, 0x74,
	0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x30, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x34,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x58, 0x0a, 0x18, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x51, 0x75,
	0x6f, 0x74, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x4f, 0x0a,
	0x14, 0x53, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x62,
	0x0a, 0x12, 0x53, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x24, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x74,
	0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0x0d, 0x0a, 0x0b, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x49, 0x0a, 0x09, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x20, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xc0,
	0x01, 0x0a, 0x06, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x63, 0x12, 0x2e, 0x0a, 0x04, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x4c, 0x6f, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x22, 0x5d, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x27, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x6f, 0x67, 0x52,
	0x65, 0x63, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x74, 0x34, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x22, 0x46, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x63, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4c,
	0x6f, 0x67, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x27,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x63, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x17, 0x0a,
	0x15, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x53, 0x0a, 0x13, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x29, 0x0a, 0x0d, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x22, 0x44, 0x0a, 0x12, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x61, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2e, 0x0a, 0x06,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d,
	0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x5a, 0x0a, 0x0d,
	0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x18, 0x0a,
	0x07, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x2f, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52,
	0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x53, 0x0a, 0x0c, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x49, 0x73, 0x5f, 0x64, 0x65, 0x6d, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x49, 0x73, 0x44, 0x65, 0x6d, 0x6f, 0x22, 0x68, 0x0a,
	0x0b, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x33, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d,
	0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x61, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x24, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x13, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x78, 0x0a, 0x0c,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x73,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x6f,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x22, 0x66, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2d, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x74, 0x34, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x14,
	0x0a, 0x12, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0xb6, 0x06, 0x0a, 0x08, 0x4d, 0x65, 0x6d, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x49, 0x73, 0x36, 0x34, 0x42, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x49, 0x73, 0x36, 0x34, 0x42,
	0x69, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x50, 0x68, 0x79,
	0x73, 0x69, 0x63, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x42,
	0x61, 0x73, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x24, 0x0a, 0x0d, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65,
	0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x64,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a,
	0x12, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a,
	0x15, 0x50, 0x61, 0x67, 0x65, 0x64, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x50, 0x61,
	0x67, 0x65, 0x64, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x50, 0x61, 0x67, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x50, 0x61,
	0x67, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x50, 0x65, 0x61, 0x6b, 0x50, 0x61, 0x67, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x50, 0x65, 0x61, 0x6b, 0x50, 0x61, 0x67, 0x65, 0x64, 0x4d, 0x65,
	0x6d, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x65, 0x61, 0x6b, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x4d, 0x65, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x50, 0x65, 0x61, 0x6b, 0x56,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x65, 0x61,
	0x6b, 0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x50, 0x65, 0x61, 0x6b, 0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x65,
	0x74, 0x12, 0x28, 0x0a, 0x0f, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x6f, 0x61, 0x64, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x48,
	0x65, 0x61, 0x70, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x48, 0x65, 0x61, 0x70, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x12, 0x28, 0x0a, 0x0f, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x46, 0x72, 0x61, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x1c, 0x48,
	0x69, 0x67, 0x68, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x6f, 0x61, 0x64, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x1c, 0x48, 0x69, 0x67, 0x68, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x6f, 0x61,
	0x64, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x3c, 0x0a, 0x19, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x19, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x63, 0x0a,
	0x10, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x29, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x6d, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x24, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x74,
	0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0x56, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0x4e, 0x0a, 0x0e, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x5c, 0x0a, 0x14, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0x52, 0x0a, 0x12, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x3c, 0x0a, 0x12,
	0x55, 0x6e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x22, 0x50, 0x0a, 0x10, 0x55, 0x6e,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x42, 0x0a, 0x16,
	0x55, 0x6e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x61, 0x6e, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73,
	0x22, 0x54, 0x0a, 0x14, 0x55, 0x6e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d,
	0x61, 0x6e, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x24, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x2d, 0x0a, 0x1b, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x69, 0x0a, 0x19, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x74, 0x34, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x22, 0x5f, 0x0a, 0x19, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x69, 0x63,
	0x6b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x22, 0x57, 0x0a, 0x17, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x69,
	0x63, 0x6b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x2d, 0x0a, 0x1b, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x69, 0x0a, 0x19, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x24,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x22, 0x2e, 0x0a, 0x1c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x5a, 0x0a, 0x1a, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x74, 0x34, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x22, 0xf0, 0x02, 0x0a, 0x10, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x29, 0x0a,
	0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0b, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x70, 0x52, 0x09, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6c, 0x69, 0x70, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x6c, 0x69, 0x70, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x6c, 0x6f, 0x73, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x6c, 0x6f, 0x73, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x74, 0x61, 0x6b, 0x65, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0a, 0x74, 0x61, 0x6b, 0x65, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x67, 0x69,
	0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x12, 0x1e,
	0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33,
	0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x5e, 0x0a, 0x0e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x65, 0x6e, 0x64,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x24, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d,
	0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x22, 0xae, 0x01, 0x0a, 0x12, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x6c, 0x6f, 0x73, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x6c, 0x6f, 0x73, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x74, 0x61, 0x6b, 0x65, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0a, 0x74, 0x61, 0x6b, 0x65, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x60, 0x0a, 0x10, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x24, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x59, 0x0a, 0x13, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x42, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x31, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x32, 0x22, 0x51, 0x0a, 0x11, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x42,
	0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x24,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x22, 0x3c, 0x0a, 0x12, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x22, 0x50, 0x0a, 0x10, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x24,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x22, 0x81, 0x01, 0x0a, 0x11, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x04, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x6c, 0x69, 0x70, 0x70, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x73, 0x6c, 0x69, 0x70, 0x70, 0x61, 0x67, 0x65, 0x22, 0x5f, 0x0a, 0x0f, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x26, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x74,
	0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x1f, 0x0a, 0x0d, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4b, 0x0a, 0x0b, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x24, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x26, 0x0a, 0x14, 0x4f, 0x6e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x81, 0x02, 0x0a, 0x12, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x35, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x41, 0x72, 0x67, 0x73, 0x52, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x45, 0x71, 0x75, 0x69, 0x74,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x45, 0x71, 0x75, 0x69, 0x74, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x06, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x72, 0x65, 0x65, 0x4d,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x46, 0x72, 0x65,
	0x65, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12,
	0x32, 0x0a, 0x0c, 0x4f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x0c, 0x4f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x22, 0x6b, 0x0a, 0x14, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x72, 0x67, 0x73, 0x12, 0x24, 0x0a, 0x05, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x74, 0x34,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x2d, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x6f, 0x0a, 0x12, 0x4f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x33, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x74, 0x34,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x22, 0x20, 0x0a, 0x0e, 0x4f, 0x6e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x65, 0x0a, 0x0c, 0x4f, 0x6e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x2f, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x51, 0x75,
	0x6f, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x72, 0x67, 0x73, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x24, 0x0a, 0x12, 0x4f, 0x6e,
	0x54, 0x69, 0x63, 0x6b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x47, 0x0a, 0x0f, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x54, 0x69, 0x63, 0x6b, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x54,
	0x69, 0x63, 0x6b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x54, 0x69, 0x63, 0x6b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x6a, 0x0a, 0x10, 0x4f, 0x6e, 0x54,
	0x69, 0x63, 0x6b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x30, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x54, 0x69,
	0x63, 0x6b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x24, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x26, 0x0a, 0x14, 0x4f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xb8, 0x01,
	0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x07, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x45, 0x71, 0x75, 0x69,
	0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x45, 0x71, 0x75, 0x69, 0x74, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x06, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x72, 0x65, 0x65,
	0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x46, 0x72,
	0x65, 0x65, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74,
	0x12, 0x26, 0x0a, 0x06, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x06, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x22, 0x69, 0x0a, 0x12, 0x4f, 0x6e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2d,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x24, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d,
	0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x22, 0x27, 0x0a, 0x15, 0x4f, 0x6e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x83, 0x01, 0x0a,
	0x15, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x41, 0x72, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x30,
	0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x04, 0x42, 0x61, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x61, 0x72, 0x52, 0x04, 0x42, 0x61,
	0x72, 0x73, 0x22, 0x73, 0x0a, 0x13, 0x4f, 0x6e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x36, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x74, 0x34, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x72, 0x67, 0x73, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x24, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x25, 0x0a, 0x13, 0x4f, 0x6e, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x51,
	0x0a, 0x11, 0x4f, 0x6e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x74, 0x34,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x2a, 0x52, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x10, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x52, 0x65, 0x61, 0x6c, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x10, 0x01, 0x12,
	0x14, 0x0a, 0x10, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44,
	0x65, 0x6d, 0x6f, 0x10, 0x02, 0x2a, 0xd7, 0x01, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x78, 0x70, 0x65, 0x72, 0x74,
	0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x10, 0x03,
	0x12, 0x16, 0x0a, 0x12, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x10, 0x05, 0x12,
	0x12, 0x0a, 0x0e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x57, 0x65,
	0x62, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x41, 0x70, 0x69, 0x10, 0x07, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x08, 0x2a,
	0x80, 0x01, 0x0a, 0x02, 0x4f, 0x70, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x70, 0x5f, 0x42, 0x75, 0x79,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x70, 0x5f, 0x53, 0x65, 0x6c, 0x6c, 0x10, 0x01, 0x12,
	0x0f, 0x0a, 0x0b, 0x4f, 0x70, 0x5f, 0x42, 0x75, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x10, 0x02,
	0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x70, 0x5f, 0x53, 0x65, 0x6c, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x70, 0x5f, 0x42, 0x75, 0x79, 0x53, 0x74, 0x6f, 0x70,
	0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x70, 0x5f, 0x53, 0x65, 0x6c, 0x6c, 0x53, 0x74, 0x6f,
	0x70, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x70, 0x5f, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x70, 0x5f, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x10, 0x07, 0x2a, 0x4f, 0x0a, 0x09, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x15, 0x0a, 0x11, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x10, 0x01, 0x12, 0x14, 0x0a,
	0x10, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x10, 0x02, 0x2a, 0x4e, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x5f,
	0x46, 0x6f, 0x72, 0x65, 0x78, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x46, 0x44, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x10, 0x02, 0x2a, 0x83, 0x01, 0x0a, 0x0a, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x4d, 0x6f, 0x64, 0x65,
	0x5f, 0x46, 0x6f, 0x72, 0x65, 0x78, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x46, 0x44, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12,
	0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x46, 0x75, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x4d, 0x6f,
	0x64, 0x65, 0x5f, 0x43, 0x66, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x10, 0x03, 0x12, 0x1a, 0x0a,
	0x16, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x66, 0x64, 0x4c,
	0x65, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x10, 0x04, 0x2a, 0xc7, 0x01, 0x0a, 0x09, 0x54, 0x69,
	0x6d, 0x65, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x49, 0x4d, 0x45, 0x46,
	0x52, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x30, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x69, 0x6d,
	0x65, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x4d, 0x31, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x54,
	0x69, 0x6d, 0x65, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x4d, 0x35, 0x10, 0x05, 0x12, 0x11, 0x0a,
	0x0d, 0x54, 0x69, 0x6d, 0x65, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x4d, 0x31, 0x35, 0x10, 0x0f,
	0x12, 0x11, 0x0a, 0x0d, 0x54, 0x69, 0x6d, 0x65, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x4d, 0x33,
	0x30, 0x10, 0x1e, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x69, 0x6d, 0x65, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x5f, 0x48, 0x31, 0x10, 0x3c, 0x12, 0x11, 0x0a, 0x0c, 0x54, 0x69, 0x6d, 0x65, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x5f, 0x48, 0x34, 0x10, 0xf0, 0x01, 0x12, 0x11, 0x0a, 0x0c, 0x54, 0x69, 0x6d, 0x65,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x44, 0x31, 0x10, 0xa0, 0x0b, 0x12, 0x11, 0x0a, 0x0c, 0x54,
	0x69, 0x6d, 0x65, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x57, 0x31, 0x10, 0xe0, 0x4e, 0x12, 0x13,
	0x0a, 0x0d, 0x54, 0x69, 0x6d, 0x65, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x4d, 0x4e, 0x31, 0x10,
	0xc0, 0xd1, 0x02, 0x2a, 0xaf, 0x01, 0x0a, 0x0d, 0x4c, 0x6f, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x19, 0x0a, 0x15, 0x4c, 0x6f, 0x67, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x10, 0x00,
	0x12, 0x17, 0x0a, 0x13, 0x4c, 0x6f, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x5f, 0x44, 0x65, 0x62, 0x75, 0x67, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x4c, 0x6f, 0x67,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x4c, 0x6f, 0x67, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x4c, 0x6f, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x5f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13,
	0x4c, 0x6f, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x46, 0x61,
	0x74, 0x61, 0x6c, 0x10, 0x05, 0x2a, 0x9c, 0x02, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x70, 0x65, 0x6e, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x79, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4f, 0x70,
	0x65, 0x6e, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x79, 0x10, 0x05, 0x12, 0x1c, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x6c, 0x10,
	0x06, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x10, 0x07, 0x12, 0x17, 0x0a, 0x13, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x43, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x10, 0x08, 0x2a, 0xc6, 0x07, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x53,
	0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x42, 0x55, 0x53, 0x59, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b,
	0x4f, 0x4c, 0x44, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x0e, 0x0a,
	0x0a, 0x4e, 0x4f, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x10, 0x06, 0x12, 0x15, 0x0a,
	0x11, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x4e, 0x4f, 0x55, 0x47, 0x48, 0x5f, 0x52, 0x49, 0x47, 0x48,
	0x54, 0x53, 0x10, 0x07, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x4f, 0x4f, 0x5f, 0x46, 0x52, 0x45, 0x51,
	0x55, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x08, 0x12, 0x11,
	0x0a, 0x0d, 0x4e, 0x4f, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x0a, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x0b, 0x12, 0x19, 0x0a, 0x15,
	0x54, 0x4f, 0x4f, 0x5f, 0x46, 0x52, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x53, 0x10, 0x0c, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x45, 0x43, 0x52, 0x45,
	0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x0d,
	0x12, 0x1c, 0x0a, 0x18, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4f, 0x4e, 0x45, 0x54,
	0x49, 0x4d, 0x45, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x10, 0x0e, 0x12, 0x14,
	0x0a, 0x10, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c,
	0x45, 0x44, 0x10, 0x40, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x41, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x55, 0x42,
	0x4c, 0x49, 0x43, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e,
	0x44, 0x10, 0x42, 0x12, 0x12, 0x0a, 0x0d, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x54, 0x49, 0x4d,
	0x45, 0x4f, 0x55, 0x54, 0x10, 0x80, 0x01, 0x12, 0x13, 0x0a, 0x0e, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x53, 0x10, 0x81, 0x01, 0x12, 0x12, 0x0a, 0x0d,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x53, 0x4c, 0x5f, 0x54, 0x50, 0x10, 0x82, 0x01,
	0x12, 0x13, 0x0a, 0x0e, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x56, 0x4f, 0x4c, 0x55,
	0x4d, 0x45, 0x10, 0x83, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f,
	0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x84, 0x01, 0x12, 0x13, 0x0a, 0x0e, 0x54, 0x52, 0x41,
	0x44, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x85, 0x01, 0x12, 0x0e,
	0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x4d, 0x4f, 0x4e, 0x45, 0x59, 0x10, 0x86, 0x01, 0x12, 0x12,
	0x0a, 0x0d, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x10,
	0x87, 0x01, 0x12, 0x0f, 0x0a, 0x0a, 0x4f, 0x46, 0x46, 0x5f, 0x51, 0x55, 0x4f, 0x54, 0x45, 0x53,
	0x10, 0x88, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x42, 0x52, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x42, 0x55,
	0x53, 0x59, 0x10, 0x89, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x52, 0x45, 0x51, 0x55, 0x4f, 0x54, 0x45,
	0x10, 0x8a, 0x01, 0x12, 0x11, 0x0a, 0x0c, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x4c, 0x4f, 0x43,
	0x4b, 0x45, 0x44, 0x10, 0x8b, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x4c, 0x4f, 0x4e, 0x47, 0x5f, 0x50,
	0x4f, 0x53, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x8c, 0x01, 0x12, 0x16, 0x0a,
	0x11, 0x54, 0x4f, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x59, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x53, 0x10, 0x8d, 0x01, 0x12, 0x13, 0x0a, 0x0e, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x41,
	0x43, 0x43, 0x45, 0x50, 0x54, 0x45, 0x44, 0x10, 0x8e, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x10, 0x8f,
	0x01, 0x12, 0x16, 0x0a, 0x11, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x43, 0x41, 0x4e,
	0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x90, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x4d, 0x4f, 0x44,
	0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45,
	0x44, 0x10, 0x91, 0x01, 0x12, 0x17, 0x0a, 0x12, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x43, 0x4f,
	0x4e, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x42, 0x55, 0x53, 0x59, 0x10, 0x92, 0x01, 0x12, 0x18, 0x0a,
	0x13, 0x45, 0x58, 0x50, 0x49, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x53, 0x41,
	0x42, 0x4c, 0x45, 0x44, 0x10, 0x93, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x54, 0x4f, 0x4f, 0x5f, 0x4d,
	0x41, 0x4e, 0x59, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x53, 0x10, 0x94, 0x01, 0x12, 0x15, 0x0a,
	0x10, 0x48, 0x45, 0x44, 0x47, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x48, 0x49, 0x42, 0x49, 0x54, 0x45,
	0x44, 0x10, 0x95, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x52, 0x50, 0x52, 0x4f, 0x48, 0x49, 0x42, 0x49,
	0x54, 0x45, 0x44, 0x5f, 0x46, 0x49, 0x46, 0x4f, 0x10, 0x96, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x80, 0x02, 0x12,
	0x13, 0x0a, 0x0e, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f,
	0x4c, 0x10, 0x81, 0x02, 0x12, 0x13, 0x0a, 0x0e, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x54, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x10, 0x82, 0x02, 0x12, 0x10, 0x0a, 0x0b, 0x53, 0x41, 0x4d,
	0x45, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x53, 0x10, 0x83, 0x02, 0x12, 0x12, 0x0a, 0x0d, 0x43,
	0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x84, 0x02, 0x12,
	0x0c, 0x0a, 0x07, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x85, 0x02, 0x32, 0xd5, 0x01,
	0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x07,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x17, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x15, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x48, 0x0a, 0x0c, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x1c, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x42, 0x0a, 0x0a, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12,
	0x1a, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x6d, 0x74,
	0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x32, 0xa2, 0x09, 0x0a, 0x03, 0x4d, 0x54, 0x34, 0x12, 0x4e, 0x0a,
	0x0e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12,
	0x1e, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1c, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x36, 0x0a,
	0x06, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x16, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x14, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x15,
	0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x48, 0x0a, 0x0c, 0x4f, 0x70,
	0x65, 0x6e, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1c, 0x2e, 0x6d, 0x74, 0x34,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x39, 0x0a, 0x07, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x12,
	0x17, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x48, 0x0a, 0x0c, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x1c, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e,
	0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4e, 0x0a, 0x0e, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x1e, 0x2e, 0x6d, 0x74,
	0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65,
	0x7a, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6d, 0x74,
	0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65,
	0x7a, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x54, 0x0a, 0x10, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x4d, 0x61, 0x6e, 0x79, 0x12, 0x20, 0x2e,
	0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x4d, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1e, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x4d, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x45, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1b,
	0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x6d, 0x74,
	0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x48, 0x0a, 0x0c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1c, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x48, 0x0a, 0x0c, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x12, 0x1c, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a,
	0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x54, 0x0a, 0x10, 0x51, 0x75,
	0x6f, 0x74, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x61, 0x6e, 0x79, 0x12, 0x20,
	0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1e, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x48, 0x0a, 0x0c, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x12, 0x1c, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a,
	0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x5d, 0x0a, 0x13, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x23, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4b, 0x0a, 0x0d, 0x53, 0x65, 0x74,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x2e, 0x6d, 0x74, 0x34,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6d, 0x74, 0x34, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x42, 0x0a, 0x0a, 0x49, 0x73, 0x49, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x12, 0x1a, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x49,
	0x73, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x18, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x73, 0x49, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x32, 0xd6, 0x03, 0x0a, 0x07, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x14,
	0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x39, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4c,
	0x6f, 0x67, 0x73, 0x12, 0x17, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65,
	0x74, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x6d,
	0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x4b, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x42, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x1d, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47,
	0x65, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65,
	0x74, 0x4c, 0x6f, 0x67, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x4e, 0x0a, 0x0e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x12, 0x1e, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x36, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x16, 0x2e, 0x6d, 0x74, 0x34,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x14, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x42, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1a, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x18, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x45, 0x0a, 0x0b,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x2e, 0x6d, 0x74,
	0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x32, 0xbc, 0x05, 0x0a, 0x0d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3f, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x12, 0x19, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e,
	0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4b, 0x0a, 0x0d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x4d, 0x61, 0x6e, 0x79, 0x12, 0x1d, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x61, 0x6e, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x61, 0x6e, 0x79, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x45, 0x0a, 0x0b, 0x55, 0x6e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x12, 0x1b, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x6e, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x19, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x6e, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x51, 0x0a, 0x0f, 0x55, 0x6e,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x61, 0x6e, 0x79, 0x12, 0x1f, 0x2e,
	0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x6e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x4d, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d,
	0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x6e, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x4d, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x60, 0x0a,
	0x14, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x24, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6d, 0x74,
	0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x5a, 0x0a, 0x12, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x69, 0x63, 0x6b,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x22, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6d, 0x74, 0x34, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x69, 0x63,
	0x6b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x60, 0x0a, 0x14, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x24, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6d, 0x74, 0x34, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x63, 0x0a,
	0x15, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x25, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e,
	0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x32, 0xe6, 0x02, 0x0a, 0x07, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x3f,
	0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x19, 0x2e, 0x6d, 0x74,
	0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x65, 0x6e, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x45, 0x0a, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x12, 0x1b,
	0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x6d, 0x74,
	0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x48, 0x0a, 0x0c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x42, 0x79, 0x12, 0x1c, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x42, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x42, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x45, 0x0a, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12,
	0x1b, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x6d,
	0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x42, 0x0a, 0x0a, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x1a, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x18, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x32, 0xad, 0x02, 0x0a, 0x07,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x4d, 0x0a, 0x0d, 0x4f, 0x6e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x4f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x4f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x30, 0x01, 0x12, 0x3b, 0x0a, 0x07, 0x4f, 0x6e, 0x51, 0x75, 0x6f, 0x74,
	0x65, 0x12, 0x17, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x6e, 0x51, 0x75,
	0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x6d, 0x74, 0x34,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x6e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x30, 0x01, 0x12, 0x47, 0x0a, 0x0b, 0x4f, 0x6e, 0x54, 0x69, 0x63, 0x6b, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x1b, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x6e, 0x54,
	0x69, 0x63, 0x6b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x19, 0x2e, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x6e, 0x54, 0x69, 0x63, 0x6b,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x30, 0x01, 0x12, 0x4d, 0x0a, 0x0d,
	0x4f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x1d, 0x2e,
	0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6d,
	0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x30, 0x01, 0x42, 0x2c, 0x5a, 0x2a, 0x67,
	0x69, 0x74, 0x2e, 0x67, 0x65, 0x6e, 0x64, 0x6f, 0x63, 0x75, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d,
	0x74, 0x61, 0x70, 0x69, 0x69, 0x6f, 0x2f, 0x6d, 0x74, 0x34, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x67,
	0x69, 0x74, 0x2f, 0x73, 0x64, 0x6b, 0x2f, 0x67, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_mt4_proto_rawDescOnce sync.Once
	file_mt4_proto_rawDescData = file_mt4_proto_rawDesc
)

func file_mt4_proto_rawDescGZIP() []byte {
	file_mt4_proto_rawDescOnce.Do(func() {
		file_mt4_proto_rawDescData = protoimpl.X.CompressGZIP(file_mt4_proto_rawDescData)
	})
	return file_mt4_proto_rawDescData
}

var file_mt4_proto_enumTypes = make([]protoimpl.EnumInfo, 10)
var file_mt4_proto_msgTypes = make([]protoimpl.MessageInfo, 113)
var file_mt4_proto_goTypes = []interface{}{
	(AccountType)(0),                     // 0: mt4grpc.AccountType
	(PlacedType)(0),                      // 1: mt4grpc.PlacedType
	(Op)(0),                              // 2: mt4grpc.Op
	(Execution)(0),                       // 3: mt4grpc.Execution
	(ProfitMode)(0),                      // 4: mt4grpc.ProfitMode
	(MarginMode)(0),                      // 5: mt4grpc.MarginMode
	(Timeframe)(0),                       // 6: mt4grpc.Timeframe
	(LogEventLevel)(0),                   // 7: mt4grpc.LogEventLevel
	(UpdateAction)(0),                    // 8: mt4grpc.UpdateAction
	(ErrorCode)(0),                       // 9: mt4grpc.ErrorCode
	(*Error)(nil),                        // 10: mt4grpc.Error
	(*ConnectRequest)(nil),               // 11: mt4grpc.ConnectRequest
	(*ConnectReply)(nil),                 // 12: mt4grpc.ConnectReply
	(*CheckConnectRequest)(nil),          // 13: mt4grpc.CheckConnectRequest
	(*CheckConnectReply)(nil),            // 14: mt4grpc.CheckConnectReply
	(*DisconnectRequest)(nil),            // 15: mt4grpc.DisconnectRequest
	(*DisconnectReply)(nil),              // 16: mt4grpc.DisconnectReply
	(*AccountSummaryRequest)(nil),        // 17: mt4grpc.AccountSummaryRequest
	(*AccountSummary)(nil),               // 18: mt4grpc.AccountSummary
	(*AccountSummaryReply)(nil),          // 19: mt4grpc.AccountSummaryReply
	(*GroupsRequest)(nil),                // 20: mt4grpc.GroupsRequest
	(*ConSymbolGroup)(nil),               // 21: mt4grpc.ConSymbolGroup
	(*GroupsReply)(nil),                  // 22: mt4grpc.GroupsReply
	(*QuoteRequest)(nil),                 // 23: mt4grpc.QuoteRequest
	(*QuoteEventArgs)(nil),               // 24: mt4grpc.QuoteEventArgs
	(*QuoteReply)(nil),                   // 25: mt4grpc.QuoteReply
	(*OpenedOrdersRequest)(nil),          // 26: mt4grpc.OpenedOrdersRequest
	(*Order)(nil),                        // 27: mt4grpc.Order
	(*OpenedOrdersReply)(nil),            // 28: mt4grpc.OpenedOrdersReply
	(*SymbolsRequest)(nil),               // 29: mt4grpc.SymbolsRequest
	(*SymbolsReply)(nil),                 // 30: mt4grpc.SymbolsReply
	(*SymbolParamsRequest)(nil),          // 31: mt4grpc.SymbolParamsRequest
	(*SymbolParams)(nil),                 // 32: mt4grpc.SymbolParams
	(*SymbolInfo)(nil),                   // 33: mt4grpc.SymbolInfo
	(*ConGroupSec)(nil),                  // 34: mt4grpc.ConGroupSec
	(*SymbolParamsReply)(nil),            // 35: mt4grpc.SymbolParamsReply
	(*ServerTimezoneRequest)(nil),        // 36: mt4grpc.ServerTimezoneRequest
	(*ServerTimezoneReply)(nil),          // 37: mt4grpc.ServerTimezoneReply
	(*IsInvestorRequest)(nil),            // 38: mt4grpc.IsInvestorRequest
	(*IsInvestorReply)(nil),              // 39: mt4grpc.IsInvestorReply
	(*SymbolParamsManyRequest)(nil),      // 40: mt4grpc.SymbolParamsManyRequest
	(*SymbolParamsManyReply)(nil),        // 41: mt4grpc.SymbolParamsManyReply
	(*OpenedOrderRequest)(nil),           // 42: mt4grpc.OpenedOrderRequest
	(*OpenedOrderReply)(nil),             // 43: mt4grpc.OpenedOrderReply
	(*OrderHistoryRequest)(nil),          // 44: mt4grpc.OrderHistoryRequest
	(*OrderHistoryReply)(nil),            // 45: mt4grpc.OrderHistoryReply
	(*QuoteHistoryRequest)(nil),          // 46: mt4grpc.QuoteHistoryRequest
	(*Bar)(nil),                          // 47: mt4grpc.Bar
	(*QuoteHistoryReply)(nil),            // 48: mt4grpc.QuoteHistoryReply
	(*QuoteHistoryManyRequest)(nil),      // 49: mt4grpc.QuoteHistoryManyRequest
	(*BarsForSymbol)(nil),                // 50: mt4grpc.BarsForSymbol
	(*QuoteHistoryManyReply)(nil),        // 51: mt4grpc.QuoteHistoryManyReply
	(*ClosedOrdersRequest)(nil),          // 52: mt4grpc.ClosedOrdersRequest
	(*ClosedOrdersReply)(nil),            // 53: mt4grpc.ClosedOrdersReply
	(*RequestQuoteHistoryRequest)(nil),   // 54: mt4grpc.RequestQuoteHistoryRequest
	(*RequestQuoteHistoryReply)(nil),     // 55: mt4grpc.RequestQuoteHistoryReply
	(*SetPlacedTypeRequest)(nil),         // 56: mt4grpc.SetPlacedTypeRequest
	(*SetPlacedTypeReply)(nil),           // 57: mt4grpc.SetPlacedTypeReply
	(*PingRequest)(nil),                  // 58: mt4grpc.PingRequest
	(*PingReply)(nil),                    // 59: mt4grpc.PingReply
	(*GetLogsRequest)(nil),               // 60: mt4grpc.GetLogsRequest
	(*LogRec)(nil),                       // 61: mt4grpc.LogRec
	(*GetLogsReply)(nil),                 // 62: mt4grpc.GetLogsReply
	(*GetLogsByUserRequest)(nil),         // 63: mt4grpc.GetLogsByUserRequest
	(*GetLogsByUserReply)(nil),           // 64: mt4grpc.GetLogsByUserReply
	(*MemorySnapshotRequest)(nil),        // 65: mt4grpc.MemorySnapshotRequest
	(*MemorySnapshotReply)(nil),          // 66: mt4grpc.MemorySnapshotReply
	(*SearchRequest)(nil),                // 67: mt4grpc.SearchRequest
	(*BrokerSerachResult)(nil),           // 68: mt4grpc.BrokerSerachResult
	(*BrokerCompany)(nil),                // 69: mt4grpc.BrokerCompany
	(*BrokerServer)(nil),                 // 70: mt4grpc.BrokerServer
	(*SearchReply)(nil),                  // 71: mt4grpc.SearchReply
	(*GetClientsRequest)(nil),            // 72: mt4grpc.GetClientsRequest
	(*ClientStatus)(nil),                 // 73: mt4grpc.ClientStatus
	(*GetClientsReply)(nil),              // 74: mt4grpc.GetClientsReply
	(*MemoryUsageRequest)(nil),           // 75: mt4grpc.MemoryUsageRequest
	(*MemUsage)(nil),                     // 76: mt4grpc.MemUsage
	(*MemoryUsageReply)(nil),             // 77: mt4grpc.MemoryUsageReply
	(*SubscribeRequest)(nil),             // 78: mt4grpc.SubscribeRequest
	(*SubscribeReply)(nil),               // 79: mt4grpc.SubscribeReply
	(*SubscribeManyRequest)(nil),         // 80: mt4grpc.SubscribeManyRequest
	(*SubscribeManyReply)(nil),           // 81: mt4grpc.SubscribeManyReply
	(*UnSubscribeRequest)(nil),           // 82: mt4grpc.UnSubscribeRequest
	(*UnSubscribeReply)(nil),             // 83: mt4grpc.UnSubscribeReply
	(*UnSubscribeManyRequest)(nil),       // 84: mt4grpc.UnSubscribeManyRequest
	(*UnSubscribeManyReply)(nil),         // 85: mt4grpc.UnSubscribeManyReply
	(*SubscribeOrderProfitRequest)(nil),  // 86: mt4grpc.SubscribeOrderProfitRequest
	(*SubscribeOrderProfitReply)(nil),    // 87: mt4grpc.SubscribeOrderProfitReply
	(*SubscribeTickValueRequest)(nil),    // 88: mt4grpc.SubscribeTickValueRequest
	(*SubscribeTickValueReply)(nil),      // 89: mt4grpc.SubscribeTickValueReply
	(*SubscribeOrderUpdateRequest)(nil),  // 90: mt4grpc.SubscribeOrderUpdateRequest
	(*SubscribeOrderUpdateReply)(nil),    // 91: mt4grpc.SubscribeOrderUpdateReply
	(*SubscribeQuoteHistoryRequest)(nil), // 92: mt4grpc.SubscribeQuoteHistoryRequest
	(*SubscribeQuoteHistoryReply)(nil),   // 93: mt4grpc.SubscribeQuoteHistoryReply
	(*OrderSendRequest)(nil),             // 94: mt4grpc.OrderSendRequest
	(*OrderSendReply)(nil),               // 95: mt4grpc.OrderSendReply
	(*OrderModifyRequest)(nil),           // 96: mt4grpc.OrderModifyRequest
	(*OrderModifyReply)(nil),             // 97: mt4grpc.OrderModifyReply
	(*OrderCloseByRequest)(nil),          // 98: mt4grpc.OrderCloseByRequest
	(*OrderCloseByReply)(nil),            // 99: mt4grpc.OrderCloseByReply
	(*OrderDeleteRequest)(nil),           // 100: mt4grpc.OrderDeleteRequest
	(*OrderDeleteReply)(nil),             // 101: mt4grpc.OrderDeleteReply
	(*OrderCloseRequest)(nil),            // 102: mt4grpc.OrderCloseRequest
	(*OrderCloseReply)(nil),              // 103: mt4grpc.OrderCloseReply
	(*EventsRequest)(nil),                // 104: mt4grpc.EventsRequest
	(*EventsReply)(nil),                  // 105: mt4grpc.EventsReply
	(*OnOrderUpdateRequest)(nil),         // 106: mt4grpc.OnOrderUpdateRequest
	(*OrderUpdateSummary)(nil),           // 107: mt4grpc.OrderUpdateSummary
	(*OrderUpdateEventArgs)(nil),         // 108: mt4grpc.OrderUpdateEventArgs
	(*OnOrderUpdateReply)(nil),           // 109: mt4grpc.OnOrderUpdateReply
	(*OnQuoteRequest)(nil),               // 110: mt4grpc.OnQuoteRequest
	(*OnQuoteReply)(nil),                 // 111: mt4grpc.OnQuoteReply
	(*OnTickValueRequest)(nil),           // 112: mt4grpc.OnTickValueRequest
	(*SymbolTickValue)(nil),              // 113: mt4grpc.SymbolTickValue
	(*OnTickValueReply)(nil),             // 114: mt4grpc.OnTickValueReply
	(*OnOrderProfitRequest)(nil),         // 115: mt4grpc.OnOrderProfitRequest
	(*ProfitUpdate)(nil),                 // 116: mt4grpc.ProfitUpdate
	(*OnOrderProfitReply)(nil),           // 117: mt4grpc.OnOrderProfitReply
	(*OnQuoteHistoryRequest)(nil),        // 118: mt4grpc.OnQuoteHistoryRequest
	(*QuoteHistoryEventArgs)(nil),        // 119: mt4grpc.QuoteHistoryEventArgs
	(*OnQuoteHistoryReply)(nil),          // 120: mt4grpc.OnQuoteHistoryReply
	(*OnDisconnectRequest)(nil),          // 121: mt4grpc.OnDisconnectRequest
	(*OnDisconnectReply)(nil),            // 122: mt4grpc.OnDisconnectReply
	(*timestamppb.Timestamp)(nil),        // 123: google.protobuf.Timestamp
}
var file_mt4_proto_depIdxs = []int32{
	9,   // 0: mt4grpc.Error.code:type_name -> mt4grpc.ErrorCode
	10,  // 1: mt4grpc.ConnectReply.error:type_name -> mt4grpc.Error
	10,  // 2: mt4grpc.CheckConnectReply.error:type_name -> mt4grpc.Error
	10,  // 3: mt4grpc.DisconnectReply.error:type_name -> mt4grpc.Error
	0,   // 4: mt4grpc.AccountSummary.Type:type_name -> mt4grpc.AccountType
	18,  // 5: mt4grpc.AccountSummaryReply.result:type_name -> mt4grpc.AccountSummary
	10,  // 6: mt4grpc.AccountSummaryReply.error:type_name -> mt4grpc.Error
	21,  // 7: mt4grpc.GroupsReply.result:type_name -> mt4grpc.ConSymbolGroup
	10,  // 8: mt4grpc.GroupsReply.error:type_name -> mt4grpc.Error
	123, // 9: mt4grpc.QuoteEventArgs.Time:type_name -> google.protobuf.Timestamp
	24,  // 10: mt4grpc.QuoteReply.result:type_name -> mt4grpc.QuoteEventArgs
	10,  // 11: mt4grpc.QuoteReply.error:type_name -> mt4grpc.Error
	1,   // 12: mt4grpc.Order.PlacedType:type_name -> mt4grpc.PlacedType
	123, // 13: mt4grpc.Order.OpenTime:type_name -> google.protobuf.Timestamp
	123, // 14: mt4grpc.Order.CloseTime:type_name -> google.protobuf.Timestamp
	123, // 15: mt4grpc.Order.Expiration:type_name -> google.protobuf.Timestamp
	2,   // 16: mt4grpc.Order.Type:type_name -> mt4grpc.Op
	27,  // 17: mt4grpc.OpenedOrdersReply.result:type_name -> mt4grpc.Order
	10,  // 18: mt4grpc.OpenedOrdersReply.error:type_name -> mt4grpc.Error
	10,  // 19: mt4grpc.SymbolsReply.error:type_name -> mt4grpc.Error
	33,  // 20: mt4grpc.SymbolParams.Symbol:type_name -> mt4grpc.SymbolInfo
	21,  // 21: mt4grpc.SymbolParams.Group:type_name -> mt4grpc.ConSymbolGroup
	34,  // 22: mt4grpc.SymbolParams.GroupParams:type_name -> mt4grpc.ConGroupSec
	3,   // 23: mt4grpc.SymbolInfo.Execution:type_name -> mt4grpc.Execution
	4,   // 24: mt4grpc.SymbolInfo.ProfitMode:type_name -> mt4grpc.ProfitMode
	5,   // 25: mt4grpc.SymbolInfo.MarginMode:type_name -> mt4grpc.MarginMode
	32,  // 26: mt4grpc.SymbolParamsReply.result:type_name -> mt4grpc.SymbolParams
	10,  // 27: mt4grpc.SymbolParamsReply.error:type_name -> mt4grpc.Error
	10,  // 28: mt4grpc.ServerTimezoneReply.error:type_name -> mt4grpc.Error
	10,  // 29: mt4grpc.IsInvestorReply.error:type_name -> mt4grpc.Error
	32,  // 30: mt4grpc.SymbolParamsManyReply.result:type_name -> mt4grpc.SymbolParams
	10,  // 31: mt4grpc.SymbolParamsManyReply.error:type_name -> mt4grpc.Error
	27,  // 32: mt4grpc.OpenedOrderReply.result:type_name -> mt4grpc.Order
	10,  // 33: mt4grpc.OpenedOrderReply.error:type_name -> mt4grpc.Error
	27,  // 34: mt4grpc.OrderHistoryReply.result:type_name -> mt4grpc.Order
	10,  // 35: mt4grpc.OrderHistoryReply.error:type_name -> mt4grpc.Error
	6,   // 36: mt4grpc.QuoteHistoryRequest.timeframe:type_name -> mt4grpc.Timeframe
	123, // 37: mt4grpc.Bar.Time:type_name -> google.protobuf.Timestamp
	47,  // 38: mt4grpc.QuoteHistoryReply.result:type_name -> mt4grpc.Bar
	10,  // 39: mt4grpc.QuoteHistoryReply.error:type_name -> mt4grpc.Error
	6,   // 40: mt4grpc.QuoteHistoryManyRequest.timeframe:type_name -> mt4grpc.Timeframe
	47,  // 41: mt4grpc.BarsForSymbol.Bars:type_name -> mt4grpc.Bar
	50,  // 42: mt4grpc.QuoteHistoryManyReply.result:type_name -> mt4grpc.BarsForSymbol
	10,  // 43: mt4grpc.QuoteHistoryManyReply.error:type_name -> mt4grpc.Error
	27,  // 44: mt4grpc.ClosedOrdersReply.result:type_name -> mt4grpc.Order
	10,  // 45: mt4grpc.ClosedOrdersReply.error:type_name -> mt4grpc.Error
	6,   // 46: mt4grpc.RequestQuoteHistoryRequest.timeframe:type_name -> mt4grpc.Timeframe
	10,  // 47: mt4grpc.RequestQuoteHistoryReply.error:type_name -> mt4grpc.Error
	1,   // 48: mt4grpc.SetPlacedTypeRequest.type:type_name -> mt4grpc.PlacedType
	27,  // 49: mt4grpc.SetPlacedTypeReply.result:type_name -> mt4grpc.Order
	10,  // 50: mt4grpc.SetPlacedTypeReply.error:type_name -> mt4grpc.Error
	10,  // 51: mt4grpc.PingReply.error:type_name -> mt4grpc.Error
	123, // 52: mt4grpc.LogRec.Time:type_name -> google.protobuf.Timestamp
	7,   // 53: mt4grpc.LogRec.Level:type_name -> mt4grpc.LogEventLevel
	61,  // 54: mt4grpc.GetLogsReply.result:type_name -> mt4grpc.LogRec
	10,  // 55: mt4grpc.GetLogsReply.error:type_name -> mt4grpc.Error
	61,  // 56: mt4grpc.GetLogsByUserReply.result:type_name -> mt4grpc.LogRec
	10,  // 57: mt4grpc.GetLogsByUserReply.error:type_name -> mt4grpc.Error
	10,  // 58: mt4grpc.MemorySnapshotReply.error:type_name -> mt4grpc.Error
	69,  // 59: mt4grpc.BrokerSerachResult.Result:type_name -> mt4grpc.BrokerCompany
	70,  // 60: mt4grpc.BrokerCompany.Results:type_name -> mt4grpc.BrokerServer
	68,  // 61: mt4grpc.SearchReply.result:type_name -> mt4grpc.BrokerSerachResult
	10,  // 62: mt4grpc.SearchReply.error:type_name -> mt4grpc.Error
	73,  // 63: mt4grpc.GetClientsReply.result:type_name -> mt4grpc.ClientStatus
	10,  // 64: mt4grpc.GetClientsReply.error:type_name -> mt4grpc.Error
	76,  // 65: mt4grpc.MemoryUsageReply.result:type_name -> mt4grpc.MemUsage
	10,  // 66: mt4grpc.MemoryUsageReply.error:type_name -> mt4grpc.Error
	10,  // 67: mt4grpc.SubscribeReply.error:type_name -> mt4grpc.Error
	10,  // 68: mt4grpc.SubscribeManyReply.error:type_name -> mt4grpc.Error
	10,  // 69: mt4grpc.UnSubscribeReply.error:type_name -> mt4grpc.Error
	10,  // 70: mt4grpc.UnSubscribeManyReply.error:type_name -> mt4grpc.Error
	27,  // 71: mt4grpc.SubscribeOrderProfitReply.result:type_name -> mt4grpc.Order
	10,  // 72: mt4grpc.SubscribeOrderProfitReply.error:type_name -> mt4grpc.Error
	10,  // 73: mt4grpc.SubscribeTickValueReply.error:type_name -> mt4grpc.Error
	27,  // 74: mt4grpc.SubscribeOrderUpdateReply.result:type_name -> mt4grpc.Order
	10,  // 75: mt4grpc.SubscribeOrderUpdateReply.error:type_name -> mt4grpc.Error
	10,  // 76: mt4grpc.SubscribeQuoteHistoryReply.error:type_name -> mt4grpc.Error
	2,   // 77: mt4grpc.OrderSendRequest.operation:type_name -> mt4grpc.Op
	1,   // 78: mt4grpc.OrderSendRequest.placedType:type_name -> mt4grpc.PlacedType
	27,  // 79: mt4grpc.OrderSendReply.result:type_name -> mt4grpc.Order
	10,  // 80: mt4grpc.OrderSendReply.error:type_name -> mt4grpc.Error
	27,  // 81: mt4grpc.OrderModifyReply.result:type_name -> mt4grpc.Order
	10,  // 82: mt4grpc.OrderModifyReply.error:type_name -> mt4grpc.Error
	10,  // 83: mt4grpc.OrderCloseByReply.error:type_name -> mt4grpc.Error
	10,  // 84: mt4grpc.OrderDeleteReply.error:type_name -> mt4grpc.Error
	27,  // 85: mt4grpc.OrderCloseReply.result:type_name -> mt4grpc.Order
	10,  // 86: mt4grpc.OrderCloseReply.error:type_name -> mt4grpc.Error
	10,  // 87: mt4grpc.EventsReply.error:type_name -> mt4grpc.Error
	108, // 88: mt4grpc.OrderUpdateSummary.Update:type_name -> mt4grpc.OrderUpdateEventArgs
	27,  // 89: mt4grpc.OrderUpdateSummary.OpenedOrders:type_name -> mt4grpc.Order
	27,  // 90: mt4grpc.OrderUpdateEventArgs.Order:type_name -> mt4grpc.Order
	8,   // 91: mt4grpc.OrderUpdateEventArgs.Action:type_name -> mt4grpc.UpdateAction
	107, // 92: mt4grpc.OnOrderUpdateReply.result:type_name -> mt4grpc.OrderUpdateSummary
	10,  // 93: mt4grpc.OnOrderUpdateReply.error:type_name -> mt4grpc.Error
	24,  // 94: mt4grpc.OnQuoteReply.result:type_name -> mt4grpc.QuoteEventArgs
	10,  // 95: mt4grpc.OnQuoteReply.error:type_name -> mt4grpc.Error
	113, // 96: mt4grpc.OnTickValueReply.result:type_name -> mt4grpc.SymbolTickValue
	10,  // 97: mt4grpc.OnTickValueReply.error:type_name -> mt4grpc.Error
	27,  // 98: mt4grpc.ProfitUpdate.Orders:type_name -> mt4grpc.Order
	116, // 99: mt4grpc.OnOrderProfitReply.result:type_name -> mt4grpc.ProfitUpdate
	10,  // 100: mt4grpc.OnOrderProfitReply.error:type_name -> mt4grpc.Error
	6,   // 101: mt4grpc.QuoteHistoryEventArgs.Timeframe:type_name -> mt4grpc.Timeframe
	47,  // 102: mt4grpc.QuoteHistoryEventArgs.Bars:type_name -> mt4grpc.Bar
	119, // 103: mt4grpc.OnQuoteHistoryReply.result:type_name -> mt4grpc.QuoteHistoryEventArgs
	10,  // 104: mt4grpc.OnQuoteHistoryReply.error:type_name -> mt4grpc.Error
	10,  // 105: mt4grpc.OnDisconnectReply.error:type_name -> mt4grpc.Error
	11,  // 106: mt4grpc.Connection.Connect:input_type -> mt4grpc.ConnectRequest
	13,  // 107: mt4grpc.Connection.CheckConnect:input_type -> mt4grpc.CheckConnectRequest
	15,  // 108: mt4grpc.Connection.Disconnect:input_type -> mt4grpc.DisconnectRequest
	17,  // 109: mt4grpc.MT4.AccountSummary:input_type -> mt4grpc.AccountSummaryRequest
	20,  // 110: mt4grpc.MT4.Groups:input_type -> mt4grpc.GroupsRequest
	23,  // 111: mt4grpc.MT4.Quote:input_type -> mt4grpc.QuoteRequest
	26,  // 112: mt4grpc.MT4.OpenedOrders:input_type -> mt4grpc.OpenedOrdersRequest
	29,  // 113: mt4grpc.MT4.Symbols:input_type -> mt4grpc.SymbolsRequest
	31,  // 114: mt4grpc.MT4.SymbolParams:input_type -> mt4grpc.SymbolParamsRequest
	36,  // 115: mt4grpc.MT4.ServerTimezone:input_type -> mt4grpc.ServerTimezoneRequest
	40,  // 116: mt4grpc.MT4.SymbolParamsMany:input_type -> mt4grpc.SymbolParamsManyRequest
	42,  // 117: mt4grpc.MT4.OpenedOrder:input_type -> mt4grpc.OpenedOrderRequest
	44,  // 118: mt4grpc.MT4.OrderHistory:input_type -> mt4grpc.OrderHistoryRequest
	46,  // 119: mt4grpc.MT4.QuoteHistory:input_type -> mt4grpc.QuoteHistoryRequest
	49,  // 120: mt4grpc.MT4.QuoteHistoryMany:input_type -> mt4grpc.QuoteHistoryManyRequest
	52,  // 121: mt4grpc.MT4.ClosedOrders:input_type -> mt4grpc.ClosedOrdersRequest
	54,  // 122: mt4grpc.MT4.RequestQuoteHistory:input_type -> mt4grpc.RequestQuoteHistoryRequest
	56,  // 123: mt4grpc.MT4.SetPlacedType:input_type -> mt4grpc.SetPlacedTypeRequest
	38,  // 124: mt4grpc.MT4.IsInvestor:input_type -> mt4grpc.IsInvestorRequest
	58,  // 125: mt4grpc.Service.Ping:input_type -> mt4grpc.PingRequest
	60,  // 126: mt4grpc.Service.GetLogs:input_type -> mt4grpc.GetLogsRequest
	63,  // 127: mt4grpc.Service.GetLogsByUser:input_type -> mt4grpc.GetLogsByUserRequest
	65,  // 128: mt4grpc.Service.MemorySnapshot:input_type -> mt4grpc.MemorySnapshotRequest
	67,  // 129: mt4grpc.Service.Search:input_type -> mt4grpc.SearchRequest
	72,  // 130: mt4grpc.Service.GetClients:input_type -> mt4grpc.GetClientsRequest
	75,  // 131: mt4grpc.Service.MemoryUsage:input_type -> mt4grpc.MemoryUsageRequest
	78,  // 132: mt4grpc.Subscriptions.Subscribe:input_type -> mt4grpc.SubscribeRequest
	80,  // 133: mt4grpc.Subscriptions.SubscribeMany:input_type -> mt4grpc.SubscribeManyRequest
	82,  // 134: mt4grpc.Subscriptions.UnSubscribe:input_type -> mt4grpc.UnSubscribeRequest
	84,  // 135: mt4grpc.Subscriptions.UnSubscribeMany:input_type -> mt4grpc.UnSubscribeManyRequest
	86,  // 136: mt4grpc.Subscriptions.SubscribeOrderProfit:input_type -> mt4grpc.SubscribeOrderProfitRequest
	88,  // 137: mt4grpc.Subscriptions.SubscribeTickValue:input_type -> mt4grpc.SubscribeTickValueRequest
	90,  // 138: mt4grpc.Subscriptions.SubscribeOrderUpdate:input_type -> mt4grpc.SubscribeOrderUpdateRequest
	92,  // 139: mt4grpc.Subscriptions.SubscribeQuoteHistory:input_type -> mt4grpc.SubscribeQuoteHistoryRequest
	94,  // 140: mt4grpc.Trading.OrderSend:input_type -> mt4grpc.OrderSendRequest
	96,  // 141: mt4grpc.Trading.OrderModify:input_type -> mt4grpc.OrderModifyRequest
	98,  // 142: mt4grpc.Trading.OrderCloseBy:input_type -> mt4grpc.OrderCloseByRequest
	100, // 143: mt4grpc.Trading.OrderDelete:input_type -> mt4grpc.OrderDeleteRequest
	102, // 144: mt4grpc.Trading.OrderClose:input_type -> mt4grpc.OrderCloseRequest
	106, // 145: mt4grpc.Streams.OnOrderUpdate:input_type -> mt4grpc.OnOrderUpdateRequest
	110, // 146: mt4grpc.Streams.OnQuote:input_type -> mt4grpc.OnQuoteRequest
	112, // 147: mt4grpc.Streams.OnTickValue:input_type -> mt4grpc.OnTickValueRequest
	115, // 148: mt4grpc.Streams.OnOrderProfit:input_type -> mt4grpc.OnOrderProfitRequest
	12,  // 149: mt4grpc.Connection.Connect:output_type -> mt4grpc.ConnectReply
	14,  // 150: mt4grpc.Connection.CheckConnect:output_type -> mt4grpc.CheckConnectReply
	16,  // 151: mt4grpc.Connection.Disconnect:output_type -> mt4grpc.DisconnectReply
	19,  // 152: mt4grpc.MT4.AccountSummary:output_type -> mt4grpc.AccountSummaryReply
	22,  // 153: mt4grpc.MT4.Groups:output_type -> mt4grpc.GroupsReply
	25,  // 154: mt4grpc.MT4.Quote:output_type -> mt4grpc.QuoteReply
	28,  // 155: mt4grpc.MT4.OpenedOrders:output_type -> mt4grpc.OpenedOrdersReply
	30,  // 156: mt4grpc.MT4.Symbols:output_type -> mt4grpc.SymbolsReply
	35,  // 157: mt4grpc.MT4.SymbolParams:output_type -> mt4grpc.SymbolParamsReply
	37,  // 158: mt4grpc.MT4.ServerTimezone:output_type -> mt4grpc.ServerTimezoneReply
	41,  // 159: mt4grpc.MT4.SymbolParamsMany:output_type -> mt4grpc.SymbolParamsManyReply
	43,  // 160: mt4grpc.MT4.OpenedOrder:output_type -> mt4grpc.OpenedOrderReply
	45,  // 161: mt4grpc.MT4.OrderHistory:output_type -> mt4grpc.OrderHistoryReply
	48,  // 162: mt4grpc.MT4.QuoteHistory:output_type -> mt4grpc.QuoteHistoryReply
	51,  // 163: mt4grpc.MT4.QuoteHistoryMany:output_type -> mt4grpc.QuoteHistoryManyReply
	53,  // 164: mt4grpc.MT4.ClosedOrders:output_type -> mt4grpc.ClosedOrdersReply
	55,  // 165: mt4grpc.MT4.RequestQuoteHistory:output_type -> mt4grpc.RequestQuoteHistoryReply
	57,  // 166: mt4grpc.MT4.SetPlacedType:output_type -> mt4grpc.SetPlacedTypeReply
	39,  // 167: mt4grpc.MT4.IsInvestor:output_type -> mt4grpc.IsInvestorReply
	59,  // 168: mt4grpc.Service.Ping:output_type -> mt4grpc.PingReply
	62,  // 169: mt4grpc.Service.GetLogs:output_type -> mt4grpc.GetLogsReply
	64,  // 170: mt4grpc.Service.GetLogsByUser:output_type -> mt4grpc.GetLogsByUserReply
	66,  // 171: mt4grpc.Service.MemorySnapshot:output_type -> mt4grpc.MemorySnapshotReply
	71,  // 172: mt4grpc.Service.Search:output_type -> mt4grpc.SearchReply
	74,  // 173: mt4grpc.Service.GetClients:output_type -> mt4grpc.GetClientsReply
	77,  // 174: mt4grpc.Service.MemoryUsage:output_type -> mt4grpc.MemoryUsageReply
	79,  // 175: mt4grpc.Subscriptions.Subscribe:output_type -> mt4grpc.SubscribeReply
	81,  // 176: mt4grpc.Subscriptions.SubscribeMany:output_type -> mt4grpc.SubscribeManyReply
	83,  // 177: mt4grpc.Subscriptions.UnSubscribe:output_type -> mt4grpc.UnSubscribeReply
	85,  // 178: mt4grpc.Subscriptions.UnSubscribeMany:output_type -> mt4grpc.UnSubscribeManyReply
	87,  // 179: mt4grpc.Subscriptions.SubscribeOrderProfit:output_type -> mt4grpc.SubscribeOrderProfitReply
	89,  // 180: mt4grpc.Subscriptions.SubscribeTickValue:output_type -> mt4grpc.SubscribeTickValueReply
	91,  // 181: mt4grpc.Subscriptions.SubscribeOrderUpdate:output_type -> mt4grpc.SubscribeOrderUpdateReply
	93,  // 182: mt4grpc.Subscriptions.SubscribeQuoteHistory:output_type -> mt4grpc.SubscribeQuoteHistoryReply
	95,  // 183: mt4grpc.Trading.OrderSend:output_type -> mt4grpc.OrderSendReply
	97,  // 184: mt4grpc.Trading.OrderModify:output_type -> mt4grpc.OrderModifyReply
	99,  // 185: mt4grpc.Trading.OrderCloseBy:output_type -> mt4grpc.OrderCloseByReply
	101, // 186: mt4grpc.Trading.OrderDelete:output_type -> mt4grpc.OrderDeleteReply
	103, // 187: mt4grpc.Trading.OrderClose:output_type -> mt4grpc.OrderCloseReply
	109, // 188: mt4grpc.Streams.OnOrderUpdate:output_type -> mt4grpc.OnOrderUpdateReply
	111, // 189: mt4grpc.Streams.OnQuote:output_type -> mt4grpc.OnQuoteReply
	114, // 190: mt4grpc.Streams.OnTickValue:output_type -> mt4grpc.OnTickValueReply
	117, // 191: mt4grpc.Streams.OnOrderProfit:output_type -> mt4grpc.OnOrderProfitReply
	149, // [149:192] is the sub-list for method output_type
	106, // [106:149] is the sub-list for method input_type
	106, // [106:106] is the sub-list for extension type_name
	106, // [106:106] is the sub-list for extension extendee
	0,   // [0:106] is the sub-list for field type_name
}

func init() { file_mt4_proto_init() }
func file_mt4_proto_init() {
	if File_mt4_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mt4_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckConnectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckConnectReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisconnectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisconnectReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountSummaryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountSummaryReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConSymbolGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuoteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuoteEventArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuoteReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenedOrdersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Order); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenedOrdersReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SymbolsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SymbolsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SymbolParamsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SymbolParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SymbolInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConGroupSec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SymbolParamsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerTimezoneRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerTimezoneReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsInvestorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsInvestorReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SymbolParamsManyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SymbolParamsManyReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenedOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenedOrderReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderHistoryReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuoteHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuoteHistoryReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuoteHistoryManyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BarsForSymbol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuoteHistoryManyReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClosedOrdersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClosedOrdersReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestQuoteHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestQuoteHistoryReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPlacedTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPlacedTypeReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLogsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogRec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLogsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLogsByUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLogsByUserReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemorySnapshotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemorySnapshotReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrokerSerachResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrokerCompany); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrokerServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClientsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClientsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemoryUsageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemUsage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemoryUsageReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeManyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeManyReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnSubscribeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnSubscribeReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnSubscribeManyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnSubscribeManyReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeOrderProfitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeOrderProfitReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeTickValueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeTickValueReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeOrderUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeOrderUpdateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeQuoteHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeQuoteHistoryReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderSendRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderSendReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderModifyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderModifyReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderCloseByRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderCloseByReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderDeleteReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderCloseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderCloseReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnOrderUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderUpdateSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderUpdateEventArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnOrderUpdateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnQuoteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnQuoteReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnTickValueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SymbolTickValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnTickValueReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnOrderProfitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfitUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnOrderProfitReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnQuoteHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuoteHistoryEventArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnQuoteHistoryReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnDisconnectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mt4_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnDisconnectReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mt4_proto_rawDesc,
			NumEnums:      10,
			NumMessages:   113,
			NumExtensions: 0,
			NumServices:   6,
		},
		GoTypes:           file_mt4_proto_goTypes,
		DependencyIndexes: file_mt4_proto_depIdxs,
		EnumInfos:         file_mt4_proto_enumTypes,
		MessageInfos:      file_mt4_proto_msgTypes,
	}.Build()
	File_mt4_proto = out.File
	file_mt4_proto_rawDesc = nil
	file_mt4_proto_goTypes = nil
	file_mt4_proto_depIdxs = nil
}
