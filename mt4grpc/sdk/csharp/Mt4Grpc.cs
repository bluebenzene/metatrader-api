// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: mt4.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Mt4Grpc {
  public static partial class Connection
  {
    static readonly string __ServiceName = "mt4grpc.Connection";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mt4Grpc.ConnectRequest> __Marshaller_mt4grpc_ConnectRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mt4Grpc.ConnectRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mt4Grpc.ConnectReply> __Marshaller_mt4grpc_ConnectReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mt4Grpc.ConnectReply.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mt4Grpc.CheckConnectRequest> __Marshaller_mt4grpc_CheckConnectRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mt4Grpc.CheckConnectRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mt4Grpc.CheckConnectReply> __Marshaller_mt4grpc_CheckConnectReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mt4Grpc.CheckConnectReply.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mt4Grpc.DisconnectRequest> __Marshaller_mt4grpc_DisconnectRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mt4Grpc.DisconnectRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mt4Grpc.DisconnectReply> __Marshaller_mt4grpc_DisconnectReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mt4Grpc.DisconnectReply.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mt4Grpc.ConnectRequest, global::Mt4Grpc.ConnectReply> __Method_Connect = new grpc::Method<global::Mt4Grpc.ConnectRequest, global::Mt4Grpc.ConnectReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Connect",
        __Marshaller_mt4grpc_ConnectRequest,
        __Marshaller_mt4grpc_ConnectReply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mt4Grpc.CheckConnectRequest, global::Mt4Grpc.CheckConnectReply> __Method_CheckConnect = new grpc::Method<global::Mt4Grpc.CheckConnectRequest, global::Mt4Grpc.CheckConnectReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CheckConnect",
        __Marshaller_mt4grpc_CheckConnectRequest,
        __Marshaller_mt4grpc_CheckConnectReply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mt4Grpc.DisconnectRequest, global::Mt4Grpc.DisconnectReply> __Method_Disconnect = new grpc::Method<global::Mt4Grpc.DisconnectRequest, global::Mt4Grpc.DisconnectReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Disconnect",
        __Marshaller_mt4grpc_DisconnectRequest,
        __Marshaller_mt4grpc_DisconnectReply);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Mt4Grpc.Mt4Reflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Connection</summary>
    [grpc::BindServiceMethod(typeof(Connection), "BindService")]
    public abstract partial class ConnectionBase
    {
      /// <summary>
      /// Connect to account with user, password, host, port.
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "user": "500476959", &lt;br>
      ///  "password": "ehj4bod", &lt;br>
      ///  "host": "mt4-demo.roboforex.com", &lt;br>
      ///  "port": "443" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Mt4Grpc.ConnectReply> Connect(global::Mt4Grpc.ConnectRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Check connection state and reconnect if connection lost
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Mt4Grpc.CheckConnectReply> CheckConnect(global::Mt4Grpc.CheckConnectRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Disconnect from account
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Mt4Grpc.DisconnectReply> Disconnect(global::Mt4Grpc.DisconnectRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Connection</summary>
    public partial class ConnectionClient : grpc::ClientBase<ConnectionClient>
    {
      /// <summary>Creates a new client for Connection</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public ConnectionClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Connection that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public ConnectionClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected ConnectionClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected ConnectionClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Connect to account with user, password, host, port.
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "user": "500476959", &lt;br>
      ///  "password": "ehj4bod", &lt;br>
      ///  "host": "mt4-demo.roboforex.com", &lt;br>
      ///  "port": "443" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mt4Grpc.ConnectReply Connect(global::Mt4Grpc.ConnectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Connect(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Connect to account with user, password, host, port.
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "user": "500476959", &lt;br>
      ///  "password": "ehj4bod", &lt;br>
      ///  "host": "mt4-demo.roboforex.com", &lt;br>
      ///  "port": "443" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mt4Grpc.ConnectReply Connect(global::Mt4Grpc.ConnectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Connect, null, options, request);
      }
      /// <summary>
      /// Connect to account with user, password, host, port.
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "user": "500476959", &lt;br>
      ///  "password": "ehj4bod", &lt;br>
      ///  "host": "mt4-demo.roboforex.com", &lt;br>
      ///  "port": "443" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mt4Grpc.ConnectReply> ConnectAsync(global::Mt4Grpc.ConnectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ConnectAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Connect to account with user, password, host, port.
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "user": "500476959", &lt;br>
      ///  "password": "ehj4bod", &lt;br>
      ///  "host": "mt4-demo.roboforex.com", &lt;br>
      ///  "port": "443" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mt4Grpc.ConnectReply> ConnectAsync(global::Mt4Grpc.ConnectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Connect, null, options, request);
      }
      /// <summary>
      /// Check connection state and reconnect if connection lost
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mt4Grpc.CheckConnectReply CheckConnect(global::Mt4Grpc.CheckConnectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CheckConnect(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Check connection state and reconnect if connection lost
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mt4Grpc.CheckConnectReply CheckConnect(global::Mt4Grpc.CheckConnectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CheckConnect, null, options, request);
      }
      /// <summary>
      /// Check connection state and reconnect if connection lost
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mt4Grpc.CheckConnectReply> CheckConnectAsync(global::Mt4Grpc.CheckConnectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CheckConnectAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Check connection state and reconnect if connection lost
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mt4Grpc.CheckConnectReply> CheckConnectAsync(global::Mt4Grpc.CheckConnectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CheckConnect, null, options, request);
      }
      /// <summary>
      /// Disconnect from account
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mt4Grpc.DisconnectReply Disconnect(global::Mt4Grpc.DisconnectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Disconnect(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Disconnect from account
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mt4Grpc.DisconnectReply Disconnect(global::Mt4Grpc.DisconnectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Disconnect, null, options, request);
      }
      /// <summary>
      /// Disconnect from account
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mt4Grpc.DisconnectReply> DisconnectAsync(global::Mt4Grpc.DisconnectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DisconnectAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Disconnect from account
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mt4Grpc.DisconnectReply> DisconnectAsync(global::Mt4Grpc.DisconnectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Disconnect, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override ConnectionClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ConnectionClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(ConnectionBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Connect, serviceImpl.Connect)
          .AddMethod(__Method_CheckConnect, serviceImpl.CheckConnect)
          .AddMethod(__Method_Disconnect, serviceImpl.Disconnect).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, ConnectionBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Connect, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mt4Grpc.ConnectRequest, global::Mt4Grpc.ConnectReply>(serviceImpl.Connect));
      serviceBinder.AddMethod(__Method_CheckConnect, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mt4Grpc.CheckConnectRequest, global::Mt4Grpc.CheckConnectReply>(serviceImpl.CheckConnect));
      serviceBinder.AddMethod(__Method_Disconnect, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mt4Grpc.DisconnectRequest, global::Mt4Grpc.DisconnectReply>(serviceImpl.Disconnect));
    }

  }
  public static partial class MT4
  {
    static readonly string __ServiceName = "mt4grpc.MT4";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mt4Grpc.AccountSummaryRequest> __Marshaller_mt4grpc_AccountSummaryRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mt4Grpc.AccountSummaryRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mt4Grpc.AccountSummaryReply> __Marshaller_mt4grpc_AccountSummaryReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mt4Grpc.AccountSummaryReply.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mt4Grpc.GroupsRequest> __Marshaller_mt4grpc_GroupsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mt4Grpc.GroupsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mt4Grpc.GroupsReply> __Marshaller_mt4grpc_GroupsReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mt4Grpc.GroupsReply.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mt4Grpc.QuoteRequest> __Marshaller_mt4grpc_QuoteRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mt4Grpc.QuoteRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mt4Grpc.QuoteReply> __Marshaller_mt4grpc_QuoteReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mt4Grpc.QuoteReply.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mt4Grpc.OpenedOrdersRequest> __Marshaller_mt4grpc_OpenedOrdersRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mt4Grpc.OpenedOrdersRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mt4Grpc.OpenedOrdersReply> __Marshaller_mt4grpc_OpenedOrdersReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mt4Grpc.OpenedOrdersReply.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mt4Grpc.SymbolsRequest> __Marshaller_mt4grpc_SymbolsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mt4Grpc.SymbolsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mt4Grpc.SymbolsReply> __Marshaller_mt4grpc_SymbolsReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mt4Grpc.SymbolsReply.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mt4Grpc.SymbolParamsRequest> __Marshaller_mt4grpc_SymbolParamsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mt4Grpc.SymbolParamsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mt4Grpc.SymbolParamsReply> __Marshaller_mt4grpc_SymbolParamsReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mt4Grpc.SymbolParamsReply.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mt4Grpc.ServerTimezoneRequest> __Marshaller_mt4grpc_ServerTimezoneRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mt4Grpc.ServerTimezoneRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mt4Grpc.ServerTimezoneReply> __Marshaller_mt4grpc_ServerTimezoneReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mt4Grpc.ServerTimezoneReply.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mt4Grpc.SymbolParamsManyRequest> __Marshaller_mt4grpc_SymbolParamsManyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mt4Grpc.SymbolParamsManyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mt4Grpc.SymbolParamsManyReply> __Marshaller_mt4grpc_SymbolParamsManyReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mt4Grpc.SymbolParamsManyReply.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mt4Grpc.OpenedOrderRequest> __Marshaller_mt4grpc_OpenedOrderRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mt4Grpc.OpenedOrderRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mt4Grpc.OpenedOrderReply> __Marshaller_mt4grpc_OpenedOrderReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mt4Grpc.OpenedOrderReply.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mt4Grpc.OrderHistoryRequest> __Marshaller_mt4grpc_OrderHistoryRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mt4Grpc.OrderHistoryRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mt4Grpc.OrderHistoryReply> __Marshaller_mt4grpc_OrderHistoryReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mt4Grpc.OrderHistoryReply.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mt4Grpc.QuoteHistoryRequest> __Marshaller_mt4grpc_QuoteHistoryRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mt4Grpc.QuoteHistoryRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mt4Grpc.QuoteHistoryReply> __Marshaller_mt4grpc_QuoteHistoryReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mt4Grpc.QuoteHistoryReply.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mt4Grpc.QuoteHistoryManyRequest> __Marshaller_mt4grpc_QuoteHistoryManyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mt4Grpc.QuoteHistoryManyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mt4Grpc.QuoteHistoryManyReply> __Marshaller_mt4grpc_QuoteHistoryManyReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mt4Grpc.QuoteHistoryManyReply.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mt4Grpc.ClosedOrdersRequest> __Marshaller_mt4grpc_ClosedOrdersRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mt4Grpc.ClosedOrdersRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mt4Grpc.ClosedOrdersReply> __Marshaller_mt4grpc_ClosedOrdersReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mt4Grpc.ClosedOrdersReply.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mt4Grpc.RequestQuoteHistoryRequest> __Marshaller_mt4grpc_RequestQuoteHistoryRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mt4Grpc.RequestQuoteHistoryRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mt4Grpc.RequestQuoteHistoryReply> __Marshaller_mt4grpc_RequestQuoteHistoryReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mt4Grpc.RequestQuoteHistoryReply.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mt4Grpc.SetPlacedTypeRequest> __Marshaller_mt4grpc_SetPlacedTypeRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mt4Grpc.SetPlacedTypeRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mt4Grpc.SetPlacedTypeReply> __Marshaller_mt4grpc_SetPlacedTypeReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mt4Grpc.SetPlacedTypeReply.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mt4Grpc.IsInvestorRequest> __Marshaller_mt4grpc_IsInvestorRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mt4Grpc.IsInvestorRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mt4Grpc.IsInvestorReply> __Marshaller_mt4grpc_IsInvestorReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mt4Grpc.IsInvestorReply.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mt4Grpc.AccountSummaryRequest, global::Mt4Grpc.AccountSummaryReply> __Method_AccountSummary = new grpc::Method<global::Mt4Grpc.AccountSummaryRequest, global::Mt4Grpc.AccountSummaryReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AccountSummary",
        __Marshaller_mt4grpc_AccountSummaryRequest,
        __Marshaller_mt4grpc_AccountSummaryReply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mt4Grpc.GroupsRequest, global::Mt4Grpc.GroupsReply> __Method_Groups = new grpc::Method<global::Mt4Grpc.GroupsRequest, global::Mt4Grpc.GroupsReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Groups",
        __Marshaller_mt4grpc_GroupsRequest,
        __Marshaller_mt4grpc_GroupsReply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mt4Grpc.QuoteRequest, global::Mt4Grpc.QuoteReply> __Method_Quote = new grpc::Method<global::Mt4Grpc.QuoteRequest, global::Mt4Grpc.QuoteReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Quote",
        __Marshaller_mt4grpc_QuoteRequest,
        __Marshaller_mt4grpc_QuoteReply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mt4Grpc.OpenedOrdersRequest, global::Mt4Grpc.OpenedOrdersReply> __Method_OpenedOrders = new grpc::Method<global::Mt4Grpc.OpenedOrdersRequest, global::Mt4Grpc.OpenedOrdersReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "OpenedOrders",
        __Marshaller_mt4grpc_OpenedOrdersRequest,
        __Marshaller_mt4grpc_OpenedOrdersReply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mt4Grpc.SymbolsRequest, global::Mt4Grpc.SymbolsReply> __Method_Symbols = new grpc::Method<global::Mt4Grpc.SymbolsRequest, global::Mt4Grpc.SymbolsReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Symbols",
        __Marshaller_mt4grpc_SymbolsRequest,
        __Marshaller_mt4grpc_SymbolsReply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mt4Grpc.SymbolParamsRequest, global::Mt4Grpc.SymbolParamsReply> __Method_SymbolParams = new grpc::Method<global::Mt4Grpc.SymbolParamsRequest, global::Mt4Grpc.SymbolParamsReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SymbolParams",
        __Marshaller_mt4grpc_SymbolParamsRequest,
        __Marshaller_mt4grpc_SymbolParamsReply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mt4Grpc.ServerTimezoneRequest, global::Mt4Grpc.ServerTimezoneReply> __Method_ServerTimezone = new grpc::Method<global::Mt4Grpc.ServerTimezoneRequest, global::Mt4Grpc.ServerTimezoneReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ServerTimezone",
        __Marshaller_mt4grpc_ServerTimezoneRequest,
        __Marshaller_mt4grpc_ServerTimezoneReply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mt4Grpc.SymbolParamsManyRequest, global::Mt4Grpc.SymbolParamsManyReply> __Method_SymbolParamsMany = new grpc::Method<global::Mt4Grpc.SymbolParamsManyRequest, global::Mt4Grpc.SymbolParamsManyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SymbolParamsMany",
        __Marshaller_mt4grpc_SymbolParamsManyRequest,
        __Marshaller_mt4grpc_SymbolParamsManyReply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mt4Grpc.OpenedOrderRequest, global::Mt4Grpc.OpenedOrderReply> __Method_OpenedOrder = new grpc::Method<global::Mt4Grpc.OpenedOrderRequest, global::Mt4Grpc.OpenedOrderReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "OpenedOrder",
        __Marshaller_mt4grpc_OpenedOrderRequest,
        __Marshaller_mt4grpc_OpenedOrderReply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mt4Grpc.OrderHistoryRequest, global::Mt4Grpc.OrderHistoryReply> __Method_OrderHistory = new grpc::Method<global::Mt4Grpc.OrderHistoryRequest, global::Mt4Grpc.OrderHistoryReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "OrderHistory",
        __Marshaller_mt4grpc_OrderHistoryRequest,
        __Marshaller_mt4grpc_OrderHistoryReply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mt4Grpc.QuoteHistoryRequest, global::Mt4Grpc.QuoteHistoryReply> __Method_QuoteHistory = new grpc::Method<global::Mt4Grpc.QuoteHistoryRequest, global::Mt4Grpc.QuoteHistoryReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "QuoteHistory",
        __Marshaller_mt4grpc_QuoteHistoryRequest,
        __Marshaller_mt4grpc_QuoteHistoryReply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mt4Grpc.QuoteHistoryManyRequest, global::Mt4Grpc.QuoteHistoryManyReply> __Method_QuoteHistoryMany = new grpc::Method<global::Mt4Grpc.QuoteHistoryManyRequest, global::Mt4Grpc.QuoteHistoryManyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "QuoteHistoryMany",
        __Marshaller_mt4grpc_QuoteHistoryManyRequest,
        __Marshaller_mt4grpc_QuoteHistoryManyReply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mt4Grpc.ClosedOrdersRequest, global::Mt4Grpc.ClosedOrdersReply> __Method_ClosedOrders = new grpc::Method<global::Mt4Grpc.ClosedOrdersRequest, global::Mt4Grpc.ClosedOrdersReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ClosedOrders",
        __Marshaller_mt4grpc_ClosedOrdersRequest,
        __Marshaller_mt4grpc_ClosedOrdersReply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mt4Grpc.RequestQuoteHistoryRequest, global::Mt4Grpc.RequestQuoteHistoryReply> __Method_RequestQuoteHistory = new grpc::Method<global::Mt4Grpc.RequestQuoteHistoryRequest, global::Mt4Grpc.RequestQuoteHistoryReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RequestQuoteHistory",
        __Marshaller_mt4grpc_RequestQuoteHistoryRequest,
        __Marshaller_mt4grpc_RequestQuoteHistoryReply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mt4Grpc.SetPlacedTypeRequest, global::Mt4Grpc.SetPlacedTypeReply> __Method_SetPlacedType = new grpc::Method<global::Mt4Grpc.SetPlacedTypeRequest, global::Mt4Grpc.SetPlacedTypeReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetPlacedType",
        __Marshaller_mt4grpc_SetPlacedTypeRequest,
        __Marshaller_mt4grpc_SetPlacedTypeReply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mt4Grpc.IsInvestorRequest, global::Mt4Grpc.IsInvestorReply> __Method_IsInvestor = new grpc::Method<global::Mt4Grpc.IsInvestorRequest, global::Mt4Grpc.IsInvestorReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "IsInvestor",
        __Marshaller_mt4grpc_IsInvestorRequest,
        __Marshaller_mt4grpc_IsInvestorReply);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Mt4Grpc.Mt4Reflection.Descriptor.Services[1]; }
    }

    /// <summary>Base class for server-side implementations of MT4</summary>
    [grpc::BindServiceMethod(typeof(MT4), "BindService")]
    public abstract partial class MT4Base
    {
      /// <summary>
      /// Balance, Equity, Currency, FreeMargin, Margin, MarginLevel, Profit, Leverage, Credit
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Mt4Grpc.AccountSummaryReply> AccountSummary(global::Mt4Grpc.AccountSummaryRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Full infromation about symbol groups
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Mt4Grpc.GroupsReply> Groups(global::Mt4Grpc.GroupsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get quote
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4", &lt;br>
      ///  "symbol": "EURUSD" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Mt4Grpc.QuoteReply> Quote(global::Mt4Grpc.QuoteRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List of opened orders
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Mt4Grpc.OpenedOrdersReply> OpenedOrders(global::Mt4Grpc.OpenedOrdersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List of symbols.
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Mt4Grpc.SymbolsReply> Symbols(global::Mt4Grpc.SymbolsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Full infromation about symbol and his group
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4", &lt;br>
      ///  "symbol": "EURUSD" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Mt4Grpc.SymbolParamsReply> SymbolParams(global::Mt4Grpc.SymbolParamsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Server timezone.
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Mt4Grpc.ServerTimezoneReply> ServerTimezone(global::Mt4Grpc.ServerTimezoneRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Full infromation about symbols
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Mt4Grpc.SymbolParamsManyReply> SymbolParamsMany(global::Mt4Grpc.SymbolParamsManyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List of opened orders
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4", &lt;br>
      ///  "ticket": "0" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Mt4Grpc.OpenedOrderReply> OpenedOrder(global::Mt4Grpc.OpenedOrderRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Order history
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4", &lt;br>
      ///  "from": "2022-01-01T00:00:00", &lt;br>
      ///  "to": "2023-06-01T00:00:00" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Mt4Grpc.OrderHistoryReply> OrderHistory(global::Mt4Grpc.OrderHistoryRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Price history.
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4", &lt;br>
      ///  "symbol": "EURUSD", &lt;br>
      ///  "timeframe": "D1", &lt;br>
      ///  "from": "2022-10-01T00:00:00", &lt;br>
      ///  "count": "10" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Mt4Grpc.QuoteHistoryReply> QuoteHistory(global::Mt4Grpc.QuoteHistoryRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Price history.
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4", &lt;br>
      ///  "timeframe": "D1", &lt;br>
      ///  "from": "2022-10-01T00:00:00", &lt;br>
      ///  "count": "10" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Mt4Grpc.QuoteHistoryManyReply> QuoteHistoryMany(global::Mt4Grpc.QuoteHistoryManyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Last 10 orders that were closed during current session
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Mt4Grpc.ClosedOrdersReply> ClosedOrders(global::Mt4Grpc.ClosedOrdersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Request price history and get result via /events socket connection
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4", &lt;br>
      ///  "symbol": "EURUSD", &lt;br>
      ///  "timeframe": "D1", &lt;br>
      ///  "from": "2022-10-01T00:00:00", &lt;br>
      ///  "count": "10" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Mt4Grpc.RequestQuoteHistoryReply> RequestQuoteHistory(global::Mt4Grpc.RequestQuoteHistoryRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Subscribe for order profit updates and get results via /events socket connection
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4", &lt;br>
      ///  "type": "Client" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Mt4Grpc.SetPlacedTypeReply> SetPlacedType(global::Mt4Grpc.SetPlacedTypeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Check investor mode.
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Mt4Grpc.IsInvestorReply> IsInvestor(global::Mt4Grpc.IsInvestorRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for MT4</summary>
    public partial class MT4Client : grpc::ClientBase<MT4Client>
    {
      /// <summary>Creates a new client for MT4</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public MT4Client(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for MT4 that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public MT4Client(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected MT4Client() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected MT4Client(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Balance, Equity, Currency, FreeMargin, Margin, MarginLevel, Profit, Leverage, Credit
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mt4Grpc.AccountSummaryReply AccountSummary(global::Mt4Grpc.AccountSummaryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AccountSummary(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Balance, Equity, Currency, FreeMargin, Margin, MarginLevel, Profit, Leverage, Credit
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mt4Grpc.AccountSummaryReply AccountSummary(global::Mt4Grpc.AccountSummaryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AccountSummary, null, options, request);
      }
      /// <summary>
      /// Balance, Equity, Currency, FreeMargin, Margin, MarginLevel, Profit, Leverage, Credit
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mt4Grpc.AccountSummaryReply> AccountSummaryAsync(global::Mt4Grpc.AccountSummaryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AccountSummaryAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Balance, Equity, Currency, FreeMargin, Margin, MarginLevel, Profit, Leverage, Credit
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mt4Grpc.AccountSummaryReply> AccountSummaryAsync(global::Mt4Grpc.AccountSummaryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AccountSummary, null, options, request);
      }
      /// <summary>
      /// Full infromation about symbol groups
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mt4Grpc.GroupsReply Groups(global::Mt4Grpc.GroupsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Groups(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Full infromation about symbol groups
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mt4Grpc.GroupsReply Groups(global::Mt4Grpc.GroupsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Groups, null, options, request);
      }
      /// <summary>
      /// Full infromation about symbol groups
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mt4Grpc.GroupsReply> GroupsAsync(global::Mt4Grpc.GroupsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GroupsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Full infromation about symbol groups
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mt4Grpc.GroupsReply> GroupsAsync(global::Mt4Grpc.GroupsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Groups, null, options, request);
      }
      /// <summary>
      /// Get quote
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4", &lt;br>
      ///  "symbol": "EURUSD" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mt4Grpc.QuoteReply Quote(global::Mt4Grpc.QuoteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Quote(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get quote
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4", &lt;br>
      ///  "symbol": "EURUSD" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mt4Grpc.QuoteReply Quote(global::Mt4Grpc.QuoteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Quote, null, options, request);
      }
      /// <summary>
      /// Get quote
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4", &lt;br>
      ///  "symbol": "EURUSD" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mt4Grpc.QuoteReply> QuoteAsync(global::Mt4Grpc.QuoteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QuoteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get quote
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4", &lt;br>
      ///  "symbol": "EURUSD" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mt4Grpc.QuoteReply> QuoteAsync(global::Mt4Grpc.QuoteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Quote, null, options, request);
      }
      /// <summary>
      /// List of opened orders
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mt4Grpc.OpenedOrdersReply OpenedOrders(global::Mt4Grpc.OpenedOrdersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OpenedOrders(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List of opened orders
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mt4Grpc.OpenedOrdersReply OpenedOrders(global::Mt4Grpc.OpenedOrdersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_OpenedOrders, null, options, request);
      }
      /// <summary>
      /// List of opened orders
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mt4Grpc.OpenedOrdersReply> OpenedOrdersAsync(global::Mt4Grpc.OpenedOrdersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OpenedOrdersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List of opened orders
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mt4Grpc.OpenedOrdersReply> OpenedOrdersAsync(global::Mt4Grpc.OpenedOrdersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_OpenedOrders, null, options, request);
      }
      /// <summary>
      /// List of symbols.
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mt4Grpc.SymbolsReply Symbols(global::Mt4Grpc.SymbolsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Symbols(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List of symbols.
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mt4Grpc.SymbolsReply Symbols(global::Mt4Grpc.SymbolsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Symbols, null, options, request);
      }
      /// <summary>
      /// List of symbols.
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mt4Grpc.SymbolsReply> SymbolsAsync(global::Mt4Grpc.SymbolsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SymbolsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List of symbols.
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mt4Grpc.SymbolsReply> SymbolsAsync(global::Mt4Grpc.SymbolsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Symbols, null, options, request);
      }
      /// <summary>
      /// Full infromation about symbol and his group
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4", &lt;br>
      ///  "symbol": "EURUSD" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mt4Grpc.SymbolParamsReply SymbolParams(global::Mt4Grpc.SymbolParamsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SymbolParams(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Full infromation about symbol and his group
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4", &lt;br>
      ///  "symbol": "EURUSD" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mt4Grpc.SymbolParamsReply SymbolParams(global::Mt4Grpc.SymbolParamsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SymbolParams, null, options, request);
      }
      /// <summary>
      /// Full infromation about symbol and his group
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4", &lt;br>
      ///  "symbol": "EURUSD" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mt4Grpc.SymbolParamsReply> SymbolParamsAsync(global::Mt4Grpc.SymbolParamsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SymbolParamsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Full infromation about symbol and his group
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4", &lt;br>
      ///  "symbol": "EURUSD" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mt4Grpc.SymbolParamsReply> SymbolParamsAsync(global::Mt4Grpc.SymbolParamsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SymbolParams, null, options, request);
      }
      /// <summary>
      /// Server timezone.
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mt4Grpc.ServerTimezoneReply ServerTimezone(global::Mt4Grpc.ServerTimezoneRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ServerTimezone(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Server timezone.
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mt4Grpc.ServerTimezoneReply ServerTimezone(global::Mt4Grpc.ServerTimezoneRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ServerTimezone, null, options, request);
      }
      /// <summary>
      /// Server timezone.
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mt4Grpc.ServerTimezoneReply> ServerTimezoneAsync(global::Mt4Grpc.ServerTimezoneRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ServerTimezoneAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Server timezone.
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mt4Grpc.ServerTimezoneReply> ServerTimezoneAsync(global::Mt4Grpc.ServerTimezoneRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ServerTimezone, null, options, request);
      }
      /// <summary>
      /// Full infromation about symbols
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mt4Grpc.SymbolParamsManyReply SymbolParamsMany(global::Mt4Grpc.SymbolParamsManyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SymbolParamsMany(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Full infromation about symbols
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mt4Grpc.SymbolParamsManyReply SymbolParamsMany(global::Mt4Grpc.SymbolParamsManyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SymbolParamsMany, null, options, request);
      }
      /// <summary>
      /// Full infromation about symbols
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mt4Grpc.SymbolParamsManyReply> SymbolParamsManyAsync(global::Mt4Grpc.SymbolParamsManyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SymbolParamsManyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Full infromation about symbols
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mt4Grpc.SymbolParamsManyReply> SymbolParamsManyAsync(global::Mt4Grpc.SymbolParamsManyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SymbolParamsMany, null, options, request);
      }
      /// <summary>
      /// List of opened orders
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4", &lt;br>
      ///  "ticket": "0" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mt4Grpc.OpenedOrderReply OpenedOrder(global::Mt4Grpc.OpenedOrderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OpenedOrder(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List of opened orders
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4", &lt;br>
      ///  "ticket": "0" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mt4Grpc.OpenedOrderReply OpenedOrder(global::Mt4Grpc.OpenedOrderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_OpenedOrder, null, options, request);
      }
      /// <summary>
      /// List of opened orders
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4", &lt;br>
      ///  "ticket": "0" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mt4Grpc.OpenedOrderReply> OpenedOrderAsync(global::Mt4Grpc.OpenedOrderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OpenedOrderAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List of opened orders
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4", &lt;br>
      ///  "ticket": "0" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mt4Grpc.OpenedOrderReply> OpenedOrderAsync(global::Mt4Grpc.OpenedOrderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_OpenedOrder, null, options, request);
      }
      /// <summary>
      /// Order history
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4", &lt;br>
      ///  "from": "2022-01-01T00:00:00", &lt;br>
      ///  "to": "2023-06-01T00:00:00" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mt4Grpc.OrderHistoryReply OrderHistory(global::Mt4Grpc.OrderHistoryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OrderHistory(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Order history
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4", &lt;br>
      ///  "from": "2022-01-01T00:00:00", &lt;br>
      ///  "to": "2023-06-01T00:00:00" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mt4Grpc.OrderHistoryReply OrderHistory(global::Mt4Grpc.OrderHistoryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_OrderHistory, null, options, request);
      }
      /// <summary>
      /// Order history
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4", &lt;br>
      ///  "from": "2022-01-01T00:00:00", &lt;br>
      ///  "to": "2023-06-01T00:00:00" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mt4Grpc.OrderHistoryReply> OrderHistoryAsync(global::Mt4Grpc.OrderHistoryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OrderHistoryAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Order history
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4", &lt;br>
      ///  "from": "2022-01-01T00:00:00", &lt;br>
      ///  "to": "2023-06-01T00:00:00" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mt4Grpc.OrderHistoryReply> OrderHistoryAsync(global::Mt4Grpc.OrderHistoryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_OrderHistory, null, options, request);
      }
      /// <summary>
      /// Price history.
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4", &lt;br>
      ///  "symbol": "EURUSD", &lt;br>
      ///  "timeframe": "D1", &lt;br>
      ///  "from": "2022-10-01T00:00:00", &lt;br>
      ///  "count": "10" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mt4Grpc.QuoteHistoryReply QuoteHistory(global::Mt4Grpc.QuoteHistoryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QuoteHistory(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Price history.
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4", &lt;br>
      ///  "symbol": "EURUSD", &lt;br>
      ///  "timeframe": "D1", &lt;br>
      ///  "from": "2022-10-01T00:00:00", &lt;br>
      ///  "count": "10" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mt4Grpc.QuoteHistoryReply QuoteHistory(global::Mt4Grpc.QuoteHistoryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QuoteHistory, null, options, request);
      }
      /// <summary>
      /// Price history.
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4", &lt;br>
      ///  "symbol": "EURUSD", &lt;br>
      ///  "timeframe": "D1", &lt;br>
      ///  "from": "2022-10-01T00:00:00", &lt;br>
      ///  "count": "10" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mt4Grpc.QuoteHistoryReply> QuoteHistoryAsync(global::Mt4Grpc.QuoteHistoryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QuoteHistoryAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Price history.
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4", &lt;br>
      ///  "symbol": "EURUSD", &lt;br>
      ///  "timeframe": "D1", &lt;br>
      ///  "from": "2022-10-01T00:00:00", &lt;br>
      ///  "count": "10" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mt4Grpc.QuoteHistoryReply> QuoteHistoryAsync(global::Mt4Grpc.QuoteHistoryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QuoteHistory, null, options, request);
      }
      /// <summary>
      /// Price history.
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4", &lt;br>
      ///  "timeframe": "D1", &lt;br>
      ///  "from": "2022-10-01T00:00:00", &lt;br>
      ///  "count": "10" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mt4Grpc.QuoteHistoryManyReply QuoteHistoryMany(global::Mt4Grpc.QuoteHistoryManyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QuoteHistoryMany(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Price history.
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4", &lt;br>
      ///  "timeframe": "D1", &lt;br>
      ///  "from": "2022-10-01T00:00:00", &lt;br>
      ///  "count": "10" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mt4Grpc.QuoteHistoryManyReply QuoteHistoryMany(global::Mt4Grpc.QuoteHistoryManyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QuoteHistoryMany, null, options, request);
      }
      /// <summary>
      /// Price history.
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4", &lt;br>
      ///  "timeframe": "D1", &lt;br>
      ///  "from": "2022-10-01T00:00:00", &lt;br>
      ///  "count": "10" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mt4Grpc.QuoteHistoryManyReply> QuoteHistoryManyAsync(global::Mt4Grpc.QuoteHistoryManyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QuoteHistoryManyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Price history.
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4", &lt;br>
      ///  "timeframe": "D1", &lt;br>
      ///  "from": "2022-10-01T00:00:00", &lt;br>
      ///  "count": "10" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mt4Grpc.QuoteHistoryManyReply> QuoteHistoryManyAsync(global::Mt4Grpc.QuoteHistoryManyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QuoteHistoryMany, null, options, request);
      }
      /// <summary>
      /// Last 10 orders that were closed during current session
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mt4Grpc.ClosedOrdersReply ClosedOrders(global::Mt4Grpc.ClosedOrdersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ClosedOrders(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Last 10 orders that were closed during current session
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mt4Grpc.ClosedOrdersReply ClosedOrders(global::Mt4Grpc.ClosedOrdersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ClosedOrders, null, options, request);
      }
      /// <summary>
      /// Last 10 orders that were closed during current session
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mt4Grpc.ClosedOrdersReply> ClosedOrdersAsync(global::Mt4Grpc.ClosedOrdersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ClosedOrdersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Last 10 orders that were closed during current session
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mt4Grpc.ClosedOrdersReply> ClosedOrdersAsync(global::Mt4Grpc.ClosedOrdersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ClosedOrders, null, options, request);
      }
      /// <summary>
      /// Request price history and get result via /events socket connection
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4", &lt;br>
      ///  "symbol": "EURUSD", &lt;br>
      ///  "timeframe": "D1", &lt;br>
      ///  "from": "2022-10-01T00:00:00", &lt;br>
      ///  "count": "10" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mt4Grpc.RequestQuoteHistoryReply RequestQuoteHistory(global::Mt4Grpc.RequestQuoteHistoryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RequestQuoteHistory(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Request price history and get result via /events socket connection
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4", &lt;br>
      ///  "symbol": "EURUSD", &lt;br>
      ///  "timeframe": "D1", &lt;br>
      ///  "from": "2022-10-01T00:00:00", &lt;br>
      ///  "count": "10" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mt4Grpc.RequestQuoteHistoryReply RequestQuoteHistory(global::Mt4Grpc.RequestQuoteHistoryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RequestQuoteHistory, null, options, request);
      }
      /// <summary>
      /// Request price history and get result via /events socket connection
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4", &lt;br>
      ///  "symbol": "EURUSD", &lt;br>
      ///  "timeframe": "D1", &lt;br>
      ///  "from": "2022-10-01T00:00:00", &lt;br>
      ///  "count": "10" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mt4Grpc.RequestQuoteHistoryReply> RequestQuoteHistoryAsync(global::Mt4Grpc.RequestQuoteHistoryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RequestQuoteHistoryAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Request price history and get result via /events socket connection
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4", &lt;br>
      ///  "symbol": "EURUSD", &lt;br>
      ///  "timeframe": "D1", &lt;br>
      ///  "from": "2022-10-01T00:00:00", &lt;br>
      ///  "count": "10" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mt4Grpc.RequestQuoteHistoryReply> RequestQuoteHistoryAsync(global::Mt4Grpc.RequestQuoteHistoryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RequestQuoteHistory, null, options, request);
      }
      /// <summary>
      /// Subscribe for order profit updates and get results via /events socket connection
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4", &lt;br>
      ///  "type": "Client" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mt4Grpc.SetPlacedTypeReply SetPlacedType(global::Mt4Grpc.SetPlacedTypeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetPlacedType(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Subscribe for order profit updates and get results via /events socket connection
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4", &lt;br>
      ///  "type": "Client" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mt4Grpc.SetPlacedTypeReply SetPlacedType(global::Mt4Grpc.SetPlacedTypeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetPlacedType, null, options, request);
      }
      /// <summary>
      /// Subscribe for order profit updates and get results via /events socket connection
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4", &lt;br>
      ///  "type": "Client" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mt4Grpc.SetPlacedTypeReply> SetPlacedTypeAsync(global::Mt4Grpc.SetPlacedTypeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetPlacedTypeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Subscribe for order profit updates and get results via /events socket connection
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4", &lt;br>
      ///  "type": "Client" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mt4Grpc.SetPlacedTypeReply> SetPlacedTypeAsync(global::Mt4Grpc.SetPlacedTypeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetPlacedType, null, options, request);
      }
      /// <summary>
      /// Check investor mode.
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mt4Grpc.IsInvestorReply IsInvestor(global::Mt4Grpc.IsInvestorRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IsInvestor(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Check investor mode.
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mt4Grpc.IsInvestorReply IsInvestor(global::Mt4Grpc.IsInvestorRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_IsInvestor, null, options, request);
      }
      /// <summary>
      /// Check investor mode.
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mt4Grpc.IsInvestorReply> IsInvestorAsync(global::Mt4Grpc.IsInvestorRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IsInvestorAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Check investor mode.
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mt4Grpc.IsInvestorReply> IsInvestorAsync(global::Mt4Grpc.IsInvestorRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_IsInvestor, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override MT4Client NewInstance(ClientBaseConfiguration configuration)
      {
        return new MT4Client(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(MT4Base serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_AccountSummary, serviceImpl.AccountSummary)
          .AddMethod(__Method_Groups, serviceImpl.Groups)
          .AddMethod(__Method_Quote, serviceImpl.Quote)
          .AddMethod(__Method_OpenedOrders, serviceImpl.OpenedOrders)
          .AddMethod(__Method_Symbols, serviceImpl.Symbols)
          .AddMethod(__Method_SymbolParams, serviceImpl.SymbolParams)
          .AddMethod(__Method_ServerTimezone, serviceImpl.ServerTimezone)
          .AddMethod(__Method_SymbolParamsMany, serviceImpl.SymbolParamsMany)
          .AddMethod(__Method_OpenedOrder, serviceImpl.OpenedOrder)
          .AddMethod(__Method_OrderHistory, serviceImpl.OrderHistory)
          .AddMethod(__Method_QuoteHistory, serviceImpl.QuoteHistory)
          .AddMethod(__Method_QuoteHistoryMany, serviceImpl.QuoteHistoryMany)
          .AddMethod(__Method_ClosedOrders, serviceImpl.ClosedOrders)
          .AddMethod(__Method_RequestQuoteHistory, serviceImpl.RequestQuoteHistory)
          .AddMethod(__Method_SetPlacedType, serviceImpl.SetPlacedType)
          .AddMethod(__Method_IsInvestor, serviceImpl.IsInvestor).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, MT4Base serviceImpl)
    {
      serviceBinder.AddMethod(__Method_AccountSummary, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mt4Grpc.AccountSummaryRequest, global::Mt4Grpc.AccountSummaryReply>(serviceImpl.AccountSummary));
      serviceBinder.AddMethod(__Method_Groups, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mt4Grpc.GroupsRequest, global::Mt4Grpc.GroupsReply>(serviceImpl.Groups));
      serviceBinder.AddMethod(__Method_Quote, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mt4Grpc.QuoteRequest, global::Mt4Grpc.QuoteReply>(serviceImpl.Quote));
      serviceBinder.AddMethod(__Method_OpenedOrders, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mt4Grpc.OpenedOrdersRequest, global::Mt4Grpc.OpenedOrdersReply>(serviceImpl.OpenedOrders));
      serviceBinder.AddMethod(__Method_Symbols, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mt4Grpc.SymbolsRequest, global::Mt4Grpc.SymbolsReply>(serviceImpl.Symbols));
      serviceBinder.AddMethod(__Method_SymbolParams, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mt4Grpc.SymbolParamsRequest, global::Mt4Grpc.SymbolParamsReply>(serviceImpl.SymbolParams));
      serviceBinder.AddMethod(__Method_ServerTimezone, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mt4Grpc.ServerTimezoneRequest, global::Mt4Grpc.ServerTimezoneReply>(serviceImpl.ServerTimezone));
      serviceBinder.AddMethod(__Method_SymbolParamsMany, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mt4Grpc.SymbolParamsManyRequest, global::Mt4Grpc.SymbolParamsManyReply>(serviceImpl.SymbolParamsMany));
      serviceBinder.AddMethod(__Method_OpenedOrder, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mt4Grpc.OpenedOrderRequest, global::Mt4Grpc.OpenedOrderReply>(serviceImpl.OpenedOrder));
      serviceBinder.AddMethod(__Method_OrderHistory, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mt4Grpc.OrderHistoryRequest, global::Mt4Grpc.OrderHistoryReply>(serviceImpl.OrderHistory));
      serviceBinder.AddMethod(__Method_QuoteHistory, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mt4Grpc.QuoteHistoryRequest, global::Mt4Grpc.QuoteHistoryReply>(serviceImpl.QuoteHistory));
      serviceBinder.AddMethod(__Method_QuoteHistoryMany, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mt4Grpc.QuoteHistoryManyRequest, global::Mt4Grpc.QuoteHistoryManyReply>(serviceImpl.QuoteHistoryMany));
      serviceBinder.AddMethod(__Method_ClosedOrders, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mt4Grpc.ClosedOrdersRequest, global::Mt4Grpc.ClosedOrdersReply>(serviceImpl.ClosedOrders));
      serviceBinder.AddMethod(__Method_RequestQuoteHistory, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mt4Grpc.RequestQuoteHistoryRequest, global::Mt4Grpc.RequestQuoteHistoryReply>(serviceImpl.RequestQuoteHistory));
      serviceBinder.AddMethod(__Method_SetPlacedType, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mt4Grpc.SetPlacedTypeRequest, global::Mt4Grpc.SetPlacedTypeReply>(serviceImpl.SetPlacedType));
      serviceBinder.AddMethod(__Method_IsInvestor, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mt4Grpc.IsInvestorRequest, global::Mt4Grpc.IsInvestorReply>(serviceImpl.IsInvestor));
    }

  }
  public static partial class Service
  {
    static readonly string __ServiceName = "mt4grpc.Service";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mt4Grpc.PingRequest> __Marshaller_mt4grpc_PingRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mt4Grpc.PingRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mt4Grpc.PingReply> __Marshaller_mt4grpc_PingReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mt4Grpc.PingReply.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mt4Grpc.GetLogsRequest> __Marshaller_mt4grpc_GetLogsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mt4Grpc.GetLogsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mt4Grpc.GetLogsReply> __Marshaller_mt4grpc_GetLogsReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mt4Grpc.GetLogsReply.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mt4Grpc.GetLogsByUserRequest> __Marshaller_mt4grpc_GetLogsByUserRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mt4Grpc.GetLogsByUserRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mt4Grpc.GetLogsByUserReply> __Marshaller_mt4grpc_GetLogsByUserReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mt4Grpc.GetLogsByUserReply.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mt4Grpc.MemorySnapshotRequest> __Marshaller_mt4grpc_MemorySnapshotRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mt4Grpc.MemorySnapshotRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mt4Grpc.MemorySnapshotReply> __Marshaller_mt4grpc_MemorySnapshotReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mt4Grpc.MemorySnapshotReply.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mt4Grpc.SearchRequest> __Marshaller_mt4grpc_SearchRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mt4Grpc.SearchRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mt4Grpc.SearchReply> __Marshaller_mt4grpc_SearchReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mt4Grpc.SearchReply.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mt4Grpc.GetClientsRequest> __Marshaller_mt4grpc_GetClientsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mt4Grpc.GetClientsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mt4Grpc.GetClientsReply> __Marshaller_mt4grpc_GetClientsReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mt4Grpc.GetClientsReply.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mt4Grpc.MemoryUsageRequest> __Marshaller_mt4grpc_MemoryUsageRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mt4Grpc.MemoryUsageRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mt4Grpc.MemoryUsageReply> __Marshaller_mt4grpc_MemoryUsageReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mt4Grpc.MemoryUsageReply.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mt4Grpc.PingRequest, global::Mt4Grpc.PingReply> __Method_Ping = new grpc::Method<global::Mt4Grpc.PingRequest, global::Mt4Grpc.PingReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Ping",
        __Marshaller_mt4grpc_PingRequest,
        __Marshaller_mt4grpc_PingReply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mt4Grpc.GetLogsRequest, global::Mt4Grpc.GetLogsReply> __Method_GetLogs = new grpc::Method<global::Mt4Grpc.GetLogsRequest, global::Mt4Grpc.GetLogsReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetLogs",
        __Marshaller_mt4grpc_GetLogsRequest,
        __Marshaller_mt4grpc_GetLogsReply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mt4Grpc.GetLogsByUserRequest, global::Mt4Grpc.GetLogsByUserReply> __Method_GetLogsByUser = new grpc::Method<global::Mt4Grpc.GetLogsByUserRequest, global::Mt4Grpc.GetLogsByUserReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetLogsByUser",
        __Marshaller_mt4grpc_GetLogsByUserRequest,
        __Marshaller_mt4grpc_GetLogsByUserReply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mt4Grpc.MemorySnapshotRequest, global::Mt4Grpc.MemorySnapshotReply> __Method_MemorySnapshot = new grpc::Method<global::Mt4Grpc.MemorySnapshotRequest, global::Mt4Grpc.MemorySnapshotReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "MemorySnapshot",
        __Marshaller_mt4grpc_MemorySnapshotRequest,
        __Marshaller_mt4grpc_MemorySnapshotReply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mt4Grpc.SearchRequest, global::Mt4Grpc.SearchReply> __Method_Search = new grpc::Method<global::Mt4Grpc.SearchRequest, global::Mt4Grpc.SearchReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Search",
        __Marshaller_mt4grpc_SearchRequest,
        __Marshaller_mt4grpc_SearchReply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mt4Grpc.GetClientsRequest, global::Mt4Grpc.GetClientsReply> __Method_GetClients = new grpc::Method<global::Mt4Grpc.GetClientsRequest, global::Mt4Grpc.GetClientsReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetClients",
        __Marshaller_mt4grpc_GetClientsRequest,
        __Marshaller_mt4grpc_GetClientsReply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mt4Grpc.MemoryUsageRequest, global::Mt4Grpc.MemoryUsageReply> __Method_MemoryUsage = new grpc::Method<global::Mt4Grpc.MemoryUsageRequest, global::Mt4Grpc.MemoryUsageReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "MemoryUsage",
        __Marshaller_mt4grpc_MemoryUsageRequest,
        __Marshaller_mt4grpc_MemoryUsageReply);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Mt4Grpc.Mt4Reflection.Descriptor.Services[2]; }
    }

    /// <summary>Base class for server-side implementations of Service</summary>
    [grpc::BindServiceMethod(typeof(Service), "BindService")]
    public abstract partial class ServiceBase
    {
      /// <summary>
      /// Simple test without parameters
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Mt4Grpc.PingReply> Ping(global::Mt4Grpc.PingRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Logs for specified token
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Mt4Grpc.GetLogsReply> GetLogs(global::Mt4Grpc.GetLogsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Logs for specified token
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "user": "500476959", &lt;br>
      ///  "password": "ehj4bod" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Mt4Grpc.GetLogsByUserReply> GetLogsByUser(global::Mt4Grpc.GetLogsByUserRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Memory snapshot
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Mt4Grpc.MemorySnapshotReply> MemorySnapshot(global::Mt4Grpc.MemorySnapshotRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Broker search by company name
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "company": "" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Mt4Grpc.SearchReply> Search(global::Mt4Grpc.SearchRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Return all active with connection state
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Mt4Grpc.GetClientsReply> GetClients(global::Mt4Grpc.GetClientsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Memory usage details
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Mt4Grpc.MemoryUsageReply> MemoryUsage(global::Mt4Grpc.MemoryUsageRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Service</summary>
    public partial class ServiceClient : grpc::ClientBase<ServiceClient>
    {
      /// <summary>Creates a new client for Service</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public ServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Service that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public ServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected ServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected ServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Simple test without parameters
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mt4Grpc.PingReply Ping(global::Mt4Grpc.PingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Ping(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Simple test without parameters
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mt4Grpc.PingReply Ping(global::Mt4Grpc.PingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Ping, null, options, request);
      }
      /// <summary>
      /// Simple test without parameters
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mt4Grpc.PingReply> PingAsync(global::Mt4Grpc.PingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Simple test without parameters
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mt4Grpc.PingReply> PingAsync(global::Mt4Grpc.PingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Ping, null, options, request);
      }
      /// <summary>
      /// Logs for specified token
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mt4Grpc.GetLogsReply GetLogs(global::Mt4Grpc.GetLogsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetLogs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Logs for specified token
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mt4Grpc.GetLogsReply GetLogs(global::Mt4Grpc.GetLogsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetLogs, null, options, request);
      }
      /// <summary>
      /// Logs for specified token
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mt4Grpc.GetLogsReply> GetLogsAsync(global::Mt4Grpc.GetLogsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetLogsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Logs for specified token
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mt4Grpc.GetLogsReply> GetLogsAsync(global::Mt4Grpc.GetLogsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetLogs, null, options, request);
      }
      /// <summary>
      /// Logs for specified token
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "user": "500476959", &lt;br>
      ///  "password": "ehj4bod" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mt4Grpc.GetLogsByUserReply GetLogsByUser(global::Mt4Grpc.GetLogsByUserRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetLogsByUser(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Logs for specified token
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "user": "500476959", &lt;br>
      ///  "password": "ehj4bod" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mt4Grpc.GetLogsByUserReply GetLogsByUser(global::Mt4Grpc.GetLogsByUserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetLogsByUser, null, options, request);
      }
      /// <summary>
      /// Logs for specified token
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "user": "500476959", &lt;br>
      ///  "password": "ehj4bod" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mt4Grpc.GetLogsByUserReply> GetLogsByUserAsync(global::Mt4Grpc.GetLogsByUserRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetLogsByUserAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Logs for specified token
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "user": "500476959", &lt;br>
      ///  "password": "ehj4bod" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mt4Grpc.GetLogsByUserReply> GetLogsByUserAsync(global::Mt4Grpc.GetLogsByUserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetLogsByUser, null, options, request);
      }
      /// <summary>
      /// Memory snapshot
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mt4Grpc.MemorySnapshotReply MemorySnapshot(global::Mt4Grpc.MemorySnapshotRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MemorySnapshot(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Memory snapshot
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mt4Grpc.MemorySnapshotReply MemorySnapshot(global::Mt4Grpc.MemorySnapshotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_MemorySnapshot, null, options, request);
      }
      /// <summary>
      /// Memory snapshot
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mt4Grpc.MemorySnapshotReply> MemorySnapshotAsync(global::Mt4Grpc.MemorySnapshotRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MemorySnapshotAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Memory snapshot
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mt4Grpc.MemorySnapshotReply> MemorySnapshotAsync(global::Mt4Grpc.MemorySnapshotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_MemorySnapshot, null, options, request);
      }
      /// <summary>
      /// Broker search by company name
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "company": "" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mt4Grpc.SearchReply Search(global::Mt4Grpc.SearchRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Search(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Broker search by company name
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "company": "" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mt4Grpc.SearchReply Search(global::Mt4Grpc.SearchRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Search, null, options, request);
      }
      /// <summary>
      /// Broker search by company name
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "company": "" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mt4Grpc.SearchReply> SearchAsync(global::Mt4Grpc.SearchRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SearchAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Broker search by company name
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "company": "" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mt4Grpc.SearchReply> SearchAsync(global::Mt4Grpc.SearchRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Search, null, options, request);
      }
      /// <summary>
      /// Return all active with connection state
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mt4Grpc.GetClientsReply GetClients(global::Mt4Grpc.GetClientsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetClients(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Return all active with connection state
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mt4Grpc.GetClientsReply GetClients(global::Mt4Grpc.GetClientsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetClients, null, options, request);
      }
      /// <summary>
      /// Return all active with connection state
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mt4Grpc.GetClientsReply> GetClientsAsync(global::Mt4Grpc.GetClientsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetClientsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Return all active with connection state
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mt4Grpc.GetClientsReply> GetClientsAsync(global::Mt4Grpc.GetClientsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetClients, null, options, request);
      }
      /// <summary>
      /// Memory usage details
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mt4Grpc.MemoryUsageReply MemoryUsage(global::Mt4Grpc.MemoryUsageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MemoryUsage(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Memory usage details
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mt4Grpc.MemoryUsageReply MemoryUsage(global::Mt4Grpc.MemoryUsageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_MemoryUsage, null, options, request);
      }
      /// <summary>
      /// Memory usage details
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mt4Grpc.MemoryUsageReply> MemoryUsageAsync(global::Mt4Grpc.MemoryUsageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MemoryUsageAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Memory usage details
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mt4Grpc.MemoryUsageReply> MemoryUsageAsync(global::Mt4Grpc.MemoryUsageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_MemoryUsage, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override ServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(ServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Ping, serviceImpl.Ping)
          .AddMethod(__Method_GetLogs, serviceImpl.GetLogs)
          .AddMethod(__Method_GetLogsByUser, serviceImpl.GetLogsByUser)
          .AddMethod(__Method_MemorySnapshot, serviceImpl.MemorySnapshot)
          .AddMethod(__Method_Search, serviceImpl.Search)
          .AddMethod(__Method_GetClients, serviceImpl.GetClients)
          .AddMethod(__Method_MemoryUsage, serviceImpl.MemoryUsage).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, ServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Ping, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mt4Grpc.PingRequest, global::Mt4Grpc.PingReply>(serviceImpl.Ping));
      serviceBinder.AddMethod(__Method_GetLogs, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mt4Grpc.GetLogsRequest, global::Mt4Grpc.GetLogsReply>(serviceImpl.GetLogs));
      serviceBinder.AddMethod(__Method_GetLogsByUser, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mt4Grpc.GetLogsByUserRequest, global::Mt4Grpc.GetLogsByUserReply>(serviceImpl.GetLogsByUser));
      serviceBinder.AddMethod(__Method_MemorySnapshot, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mt4Grpc.MemorySnapshotRequest, global::Mt4Grpc.MemorySnapshotReply>(serviceImpl.MemorySnapshot));
      serviceBinder.AddMethod(__Method_Search, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mt4Grpc.SearchRequest, global::Mt4Grpc.SearchReply>(serviceImpl.Search));
      serviceBinder.AddMethod(__Method_GetClients, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mt4Grpc.GetClientsRequest, global::Mt4Grpc.GetClientsReply>(serviceImpl.GetClients));
      serviceBinder.AddMethod(__Method_MemoryUsage, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mt4Grpc.MemoryUsageRequest, global::Mt4Grpc.MemoryUsageReply>(serviceImpl.MemoryUsage));
    }

  }
  public static partial class Subscriptions
  {
    static readonly string __ServiceName = "mt4grpc.Subscriptions";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mt4Grpc.SubscribeRequest> __Marshaller_mt4grpc_SubscribeRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mt4Grpc.SubscribeRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mt4Grpc.SubscribeReply> __Marshaller_mt4grpc_SubscribeReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mt4Grpc.SubscribeReply.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mt4Grpc.SubscribeManyRequest> __Marshaller_mt4grpc_SubscribeManyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mt4Grpc.SubscribeManyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mt4Grpc.SubscribeManyReply> __Marshaller_mt4grpc_SubscribeManyReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mt4Grpc.SubscribeManyReply.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mt4Grpc.UnSubscribeRequest> __Marshaller_mt4grpc_UnSubscribeRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mt4Grpc.UnSubscribeRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mt4Grpc.UnSubscribeReply> __Marshaller_mt4grpc_UnSubscribeReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mt4Grpc.UnSubscribeReply.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mt4Grpc.UnSubscribeManyRequest> __Marshaller_mt4grpc_UnSubscribeManyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mt4Grpc.UnSubscribeManyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mt4Grpc.UnSubscribeManyReply> __Marshaller_mt4grpc_UnSubscribeManyReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mt4Grpc.UnSubscribeManyReply.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mt4Grpc.SubscribeOrderProfitRequest> __Marshaller_mt4grpc_SubscribeOrderProfitRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mt4Grpc.SubscribeOrderProfitRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mt4Grpc.SubscribeOrderProfitReply> __Marshaller_mt4grpc_SubscribeOrderProfitReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mt4Grpc.SubscribeOrderProfitReply.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mt4Grpc.SubscribeTickValueRequest> __Marshaller_mt4grpc_SubscribeTickValueRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mt4Grpc.SubscribeTickValueRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mt4Grpc.SubscribeTickValueReply> __Marshaller_mt4grpc_SubscribeTickValueReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mt4Grpc.SubscribeTickValueReply.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mt4Grpc.SubscribeOrderUpdateRequest> __Marshaller_mt4grpc_SubscribeOrderUpdateRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mt4Grpc.SubscribeOrderUpdateRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mt4Grpc.SubscribeOrderUpdateReply> __Marshaller_mt4grpc_SubscribeOrderUpdateReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mt4Grpc.SubscribeOrderUpdateReply.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mt4Grpc.SubscribeQuoteHistoryRequest> __Marshaller_mt4grpc_SubscribeQuoteHistoryRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mt4Grpc.SubscribeQuoteHistoryRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mt4Grpc.SubscribeQuoteHistoryReply> __Marshaller_mt4grpc_SubscribeQuoteHistoryReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mt4Grpc.SubscribeQuoteHistoryReply.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mt4Grpc.SubscribeRequest, global::Mt4Grpc.SubscribeReply> __Method_Subscribe = new grpc::Method<global::Mt4Grpc.SubscribeRequest, global::Mt4Grpc.SubscribeReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Subscribe",
        __Marshaller_mt4grpc_SubscribeRequest,
        __Marshaller_mt4grpc_SubscribeReply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mt4Grpc.SubscribeManyRequest, global::Mt4Grpc.SubscribeManyReply> __Method_SubscribeMany = new grpc::Method<global::Mt4Grpc.SubscribeManyRequest, global::Mt4Grpc.SubscribeManyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SubscribeMany",
        __Marshaller_mt4grpc_SubscribeManyRequest,
        __Marshaller_mt4grpc_SubscribeManyReply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mt4Grpc.UnSubscribeRequest, global::Mt4Grpc.UnSubscribeReply> __Method_UnSubscribe = new grpc::Method<global::Mt4Grpc.UnSubscribeRequest, global::Mt4Grpc.UnSubscribeReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UnSubscribe",
        __Marshaller_mt4grpc_UnSubscribeRequest,
        __Marshaller_mt4grpc_UnSubscribeReply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mt4Grpc.UnSubscribeManyRequest, global::Mt4Grpc.UnSubscribeManyReply> __Method_UnSubscribeMany = new grpc::Method<global::Mt4Grpc.UnSubscribeManyRequest, global::Mt4Grpc.UnSubscribeManyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UnSubscribeMany",
        __Marshaller_mt4grpc_UnSubscribeManyRequest,
        __Marshaller_mt4grpc_UnSubscribeManyReply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mt4Grpc.SubscribeOrderProfitRequest, global::Mt4Grpc.SubscribeOrderProfitReply> __Method_SubscribeOrderProfit = new grpc::Method<global::Mt4Grpc.SubscribeOrderProfitRequest, global::Mt4Grpc.SubscribeOrderProfitReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SubscribeOrderProfit",
        __Marshaller_mt4grpc_SubscribeOrderProfitRequest,
        __Marshaller_mt4grpc_SubscribeOrderProfitReply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mt4Grpc.SubscribeTickValueRequest, global::Mt4Grpc.SubscribeTickValueReply> __Method_SubscribeTickValue = new grpc::Method<global::Mt4Grpc.SubscribeTickValueRequest, global::Mt4Grpc.SubscribeTickValueReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SubscribeTickValue",
        __Marshaller_mt4grpc_SubscribeTickValueRequest,
        __Marshaller_mt4grpc_SubscribeTickValueReply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mt4Grpc.SubscribeOrderUpdateRequest, global::Mt4Grpc.SubscribeOrderUpdateReply> __Method_SubscribeOrderUpdate = new grpc::Method<global::Mt4Grpc.SubscribeOrderUpdateRequest, global::Mt4Grpc.SubscribeOrderUpdateReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SubscribeOrderUpdate",
        __Marshaller_mt4grpc_SubscribeOrderUpdateRequest,
        __Marshaller_mt4grpc_SubscribeOrderUpdateReply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mt4Grpc.SubscribeQuoteHistoryRequest, global::Mt4Grpc.SubscribeQuoteHistoryReply> __Method_SubscribeQuoteHistory = new grpc::Method<global::Mt4Grpc.SubscribeQuoteHistoryRequest, global::Mt4Grpc.SubscribeQuoteHistoryReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SubscribeQuoteHistory",
        __Marshaller_mt4grpc_SubscribeQuoteHistoryRequest,
        __Marshaller_mt4grpc_SubscribeQuoteHistoryReply);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Mt4Grpc.Mt4Reflection.Descriptor.Services[3]; }
    }

    /// <summary>Base class for server-side implementations of Subscriptions</summary>
    [grpc::BindServiceMethod(typeof(Subscriptions), "BindService")]
    public abstract partial class SubscriptionsBase
    {
      /// <summary>
      /// Subscribe symbol for real time quotes and get results via /events socket connection
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4", &lt;br>
      ///  "symbol": "EURUSD", &lt;br>
      ///  "interval": "0" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Mt4Grpc.SubscribeReply> Subscribe(global::Mt4Grpc.SubscribeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Subscribe symbosl for real time quotes and get results via /events socket connection
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4", &lt;br>
      ///  "interval": "0" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Mt4Grpc.SubscribeManyReply> SubscribeMany(global::Mt4Grpc.SubscribeManyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Unsubscribe symbol for real time quotes and get results via /events socket connection
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4", &lt;br>
      ///  "symbol": "EURUSD" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Mt4Grpc.UnSubscribeReply> UnSubscribe(global::Mt4Grpc.UnSubscribeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// UnSubscribe symbosls for real time quotes and get results via /events socket connection
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Mt4Grpc.UnSubscribeManyReply> UnSubscribeMany(global::Mt4Grpc.UnSubscribeManyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Subscribe for order profit updates and get results via /events socket connection
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Mt4Grpc.SubscribeOrderProfitReply> SubscribeOrderProfit(global::Mt4Grpc.SubscribeOrderProfitRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Subscribe symbol for tick value updates
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4", &lt;br>
      ///  "symbol": "EURUSD", &lt;br>
      ///  "interval": "0" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Mt4Grpc.SubscribeTickValueReply> SubscribeTickValue(global::Mt4Grpc.SubscribeTickValueRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Subscribe symbol for tick value updates
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Mt4Grpc.SubscribeOrderUpdateReply> SubscribeOrderUpdate(global::Mt4Grpc.SubscribeOrderUpdateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Subscribe quote history
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Mt4Grpc.SubscribeQuoteHistoryReply> SubscribeQuoteHistory(global::Mt4Grpc.SubscribeQuoteHistoryRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Subscriptions</summary>
    public partial class SubscriptionsClient : grpc::ClientBase<SubscriptionsClient>
    {
      /// <summary>Creates a new client for Subscriptions</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public SubscriptionsClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Subscriptions that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public SubscriptionsClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected SubscriptionsClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected SubscriptionsClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Subscribe symbol for real time quotes and get results via /events socket connection
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4", &lt;br>
      ///  "symbol": "EURUSD", &lt;br>
      ///  "interval": "0" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mt4Grpc.SubscribeReply Subscribe(global::Mt4Grpc.SubscribeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Subscribe(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Subscribe symbol for real time quotes and get results via /events socket connection
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4", &lt;br>
      ///  "symbol": "EURUSD", &lt;br>
      ///  "interval": "0" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mt4Grpc.SubscribeReply Subscribe(global::Mt4Grpc.SubscribeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Subscribe, null, options, request);
      }
      /// <summary>
      /// Subscribe symbol for real time quotes and get results via /events socket connection
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4", &lt;br>
      ///  "symbol": "EURUSD", &lt;br>
      ///  "interval": "0" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mt4Grpc.SubscribeReply> SubscribeAsync(global::Mt4Grpc.SubscribeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubscribeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Subscribe symbol for real time quotes and get results via /events socket connection
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4", &lt;br>
      ///  "symbol": "EURUSD", &lt;br>
      ///  "interval": "0" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mt4Grpc.SubscribeReply> SubscribeAsync(global::Mt4Grpc.SubscribeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Subscribe, null, options, request);
      }
      /// <summary>
      /// Subscribe symbosl for real time quotes and get results via /events socket connection
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4", &lt;br>
      ///  "interval": "0" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mt4Grpc.SubscribeManyReply SubscribeMany(global::Mt4Grpc.SubscribeManyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubscribeMany(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Subscribe symbosl for real time quotes and get results via /events socket connection
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4", &lt;br>
      ///  "interval": "0" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mt4Grpc.SubscribeManyReply SubscribeMany(global::Mt4Grpc.SubscribeManyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SubscribeMany, null, options, request);
      }
      /// <summary>
      /// Subscribe symbosl for real time quotes and get results via /events socket connection
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4", &lt;br>
      ///  "interval": "0" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mt4Grpc.SubscribeManyReply> SubscribeManyAsync(global::Mt4Grpc.SubscribeManyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubscribeManyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Subscribe symbosl for real time quotes and get results via /events socket connection
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4", &lt;br>
      ///  "interval": "0" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mt4Grpc.SubscribeManyReply> SubscribeManyAsync(global::Mt4Grpc.SubscribeManyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SubscribeMany, null, options, request);
      }
      /// <summary>
      /// Unsubscribe symbol for real time quotes and get results via /events socket connection
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4", &lt;br>
      ///  "symbol": "EURUSD" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mt4Grpc.UnSubscribeReply UnSubscribe(global::Mt4Grpc.UnSubscribeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UnSubscribe(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Unsubscribe symbol for real time quotes and get results via /events socket connection
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4", &lt;br>
      ///  "symbol": "EURUSD" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mt4Grpc.UnSubscribeReply UnSubscribe(global::Mt4Grpc.UnSubscribeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UnSubscribe, null, options, request);
      }
      /// <summary>
      /// Unsubscribe symbol for real time quotes and get results via /events socket connection
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4", &lt;br>
      ///  "symbol": "EURUSD" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mt4Grpc.UnSubscribeReply> UnSubscribeAsync(global::Mt4Grpc.UnSubscribeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UnSubscribeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Unsubscribe symbol for real time quotes and get results via /events socket connection
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4", &lt;br>
      ///  "symbol": "EURUSD" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mt4Grpc.UnSubscribeReply> UnSubscribeAsync(global::Mt4Grpc.UnSubscribeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UnSubscribe, null, options, request);
      }
      /// <summary>
      /// UnSubscribe symbosls for real time quotes and get results via /events socket connection
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mt4Grpc.UnSubscribeManyReply UnSubscribeMany(global::Mt4Grpc.UnSubscribeManyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UnSubscribeMany(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// UnSubscribe symbosls for real time quotes and get results via /events socket connection
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mt4Grpc.UnSubscribeManyReply UnSubscribeMany(global::Mt4Grpc.UnSubscribeManyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UnSubscribeMany, null, options, request);
      }
      /// <summary>
      /// UnSubscribe symbosls for real time quotes and get results via /events socket connection
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mt4Grpc.UnSubscribeManyReply> UnSubscribeManyAsync(global::Mt4Grpc.UnSubscribeManyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UnSubscribeManyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// UnSubscribe symbosls for real time quotes and get results via /events socket connection
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mt4Grpc.UnSubscribeManyReply> UnSubscribeManyAsync(global::Mt4Grpc.UnSubscribeManyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UnSubscribeMany, null, options, request);
      }
      /// <summary>
      /// Subscribe for order profit updates and get results via /events socket connection
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mt4Grpc.SubscribeOrderProfitReply SubscribeOrderProfit(global::Mt4Grpc.SubscribeOrderProfitRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubscribeOrderProfit(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Subscribe for order profit updates and get results via /events socket connection
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mt4Grpc.SubscribeOrderProfitReply SubscribeOrderProfit(global::Mt4Grpc.SubscribeOrderProfitRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SubscribeOrderProfit, null, options, request);
      }
      /// <summary>
      /// Subscribe for order profit updates and get results via /events socket connection
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mt4Grpc.SubscribeOrderProfitReply> SubscribeOrderProfitAsync(global::Mt4Grpc.SubscribeOrderProfitRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubscribeOrderProfitAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Subscribe for order profit updates and get results via /events socket connection
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mt4Grpc.SubscribeOrderProfitReply> SubscribeOrderProfitAsync(global::Mt4Grpc.SubscribeOrderProfitRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SubscribeOrderProfit, null, options, request);
      }
      /// <summary>
      /// Subscribe symbol for tick value updates
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4", &lt;br>
      ///  "symbol": "EURUSD", &lt;br>
      ///  "interval": "0" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mt4Grpc.SubscribeTickValueReply SubscribeTickValue(global::Mt4Grpc.SubscribeTickValueRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubscribeTickValue(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Subscribe symbol for tick value updates
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4", &lt;br>
      ///  "symbol": "EURUSD", &lt;br>
      ///  "interval": "0" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mt4Grpc.SubscribeTickValueReply SubscribeTickValue(global::Mt4Grpc.SubscribeTickValueRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SubscribeTickValue, null, options, request);
      }
      /// <summary>
      /// Subscribe symbol for tick value updates
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4", &lt;br>
      ///  "symbol": "EURUSD", &lt;br>
      ///  "interval": "0" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mt4Grpc.SubscribeTickValueReply> SubscribeTickValueAsync(global::Mt4Grpc.SubscribeTickValueRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubscribeTickValueAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Subscribe symbol for tick value updates
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4", &lt;br>
      ///  "symbol": "EURUSD", &lt;br>
      ///  "interval": "0" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mt4Grpc.SubscribeTickValueReply> SubscribeTickValueAsync(global::Mt4Grpc.SubscribeTickValueRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SubscribeTickValue, null, options, request);
      }
      /// <summary>
      /// Subscribe symbol for tick value updates
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mt4Grpc.SubscribeOrderUpdateReply SubscribeOrderUpdate(global::Mt4Grpc.SubscribeOrderUpdateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubscribeOrderUpdate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Subscribe symbol for tick value updates
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mt4Grpc.SubscribeOrderUpdateReply SubscribeOrderUpdate(global::Mt4Grpc.SubscribeOrderUpdateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SubscribeOrderUpdate, null, options, request);
      }
      /// <summary>
      /// Subscribe symbol for tick value updates
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mt4Grpc.SubscribeOrderUpdateReply> SubscribeOrderUpdateAsync(global::Mt4Grpc.SubscribeOrderUpdateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubscribeOrderUpdateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Subscribe symbol for tick value updates
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mt4Grpc.SubscribeOrderUpdateReply> SubscribeOrderUpdateAsync(global::Mt4Grpc.SubscribeOrderUpdateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SubscribeOrderUpdate, null, options, request);
      }
      /// <summary>
      /// Subscribe quote history
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mt4Grpc.SubscribeQuoteHistoryReply SubscribeQuoteHistory(global::Mt4Grpc.SubscribeQuoteHistoryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubscribeQuoteHistory(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Subscribe quote history
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mt4Grpc.SubscribeQuoteHistoryReply SubscribeQuoteHistory(global::Mt4Grpc.SubscribeQuoteHistoryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SubscribeQuoteHistory, null, options, request);
      }
      /// <summary>
      /// Subscribe quote history
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mt4Grpc.SubscribeQuoteHistoryReply> SubscribeQuoteHistoryAsync(global::Mt4Grpc.SubscribeQuoteHistoryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubscribeQuoteHistoryAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Subscribe quote history
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mt4Grpc.SubscribeQuoteHistoryReply> SubscribeQuoteHistoryAsync(global::Mt4Grpc.SubscribeQuoteHistoryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SubscribeQuoteHistory, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override SubscriptionsClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new SubscriptionsClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(SubscriptionsBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Subscribe, serviceImpl.Subscribe)
          .AddMethod(__Method_SubscribeMany, serviceImpl.SubscribeMany)
          .AddMethod(__Method_UnSubscribe, serviceImpl.UnSubscribe)
          .AddMethod(__Method_UnSubscribeMany, serviceImpl.UnSubscribeMany)
          .AddMethod(__Method_SubscribeOrderProfit, serviceImpl.SubscribeOrderProfit)
          .AddMethod(__Method_SubscribeTickValue, serviceImpl.SubscribeTickValue)
          .AddMethod(__Method_SubscribeOrderUpdate, serviceImpl.SubscribeOrderUpdate)
          .AddMethod(__Method_SubscribeQuoteHistory, serviceImpl.SubscribeQuoteHistory).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, SubscriptionsBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Subscribe, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mt4Grpc.SubscribeRequest, global::Mt4Grpc.SubscribeReply>(serviceImpl.Subscribe));
      serviceBinder.AddMethod(__Method_SubscribeMany, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mt4Grpc.SubscribeManyRequest, global::Mt4Grpc.SubscribeManyReply>(serviceImpl.SubscribeMany));
      serviceBinder.AddMethod(__Method_UnSubscribe, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mt4Grpc.UnSubscribeRequest, global::Mt4Grpc.UnSubscribeReply>(serviceImpl.UnSubscribe));
      serviceBinder.AddMethod(__Method_UnSubscribeMany, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mt4Grpc.UnSubscribeManyRequest, global::Mt4Grpc.UnSubscribeManyReply>(serviceImpl.UnSubscribeMany));
      serviceBinder.AddMethod(__Method_SubscribeOrderProfit, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mt4Grpc.SubscribeOrderProfitRequest, global::Mt4Grpc.SubscribeOrderProfitReply>(serviceImpl.SubscribeOrderProfit));
      serviceBinder.AddMethod(__Method_SubscribeTickValue, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mt4Grpc.SubscribeTickValueRequest, global::Mt4Grpc.SubscribeTickValueReply>(serviceImpl.SubscribeTickValue));
      serviceBinder.AddMethod(__Method_SubscribeOrderUpdate, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mt4Grpc.SubscribeOrderUpdateRequest, global::Mt4Grpc.SubscribeOrderUpdateReply>(serviceImpl.SubscribeOrderUpdate));
      serviceBinder.AddMethod(__Method_SubscribeQuoteHistory, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mt4Grpc.SubscribeQuoteHistoryRequest, global::Mt4Grpc.SubscribeQuoteHistoryReply>(serviceImpl.SubscribeQuoteHistory));
    }

  }
  public static partial class Trading
  {
    static readonly string __ServiceName = "mt4grpc.Trading";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mt4Grpc.OrderSendRequest> __Marshaller_mt4grpc_OrderSendRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mt4Grpc.OrderSendRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mt4Grpc.OrderSendReply> __Marshaller_mt4grpc_OrderSendReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mt4Grpc.OrderSendReply.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mt4Grpc.OrderModifyRequest> __Marshaller_mt4grpc_OrderModifyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mt4Grpc.OrderModifyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mt4Grpc.OrderModifyReply> __Marshaller_mt4grpc_OrderModifyReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mt4Grpc.OrderModifyReply.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mt4Grpc.OrderCloseByRequest> __Marshaller_mt4grpc_OrderCloseByRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mt4Grpc.OrderCloseByRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mt4Grpc.OrderCloseByReply> __Marshaller_mt4grpc_OrderCloseByReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mt4Grpc.OrderCloseByReply.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mt4Grpc.OrderDeleteRequest> __Marshaller_mt4grpc_OrderDeleteRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mt4Grpc.OrderDeleteRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mt4Grpc.OrderDeleteReply> __Marshaller_mt4grpc_OrderDeleteReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mt4Grpc.OrderDeleteReply.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mt4Grpc.OrderCloseRequest> __Marshaller_mt4grpc_OrderCloseRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mt4Grpc.OrderCloseRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mt4Grpc.OrderCloseReply> __Marshaller_mt4grpc_OrderCloseReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mt4Grpc.OrderCloseReply.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mt4Grpc.OrderSendRequest, global::Mt4Grpc.OrderSendReply> __Method_OrderSend = new grpc::Method<global::Mt4Grpc.OrderSendRequest, global::Mt4Grpc.OrderSendReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "OrderSend",
        __Marshaller_mt4grpc_OrderSendRequest,
        __Marshaller_mt4grpc_OrderSendReply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mt4Grpc.OrderModifyRequest, global::Mt4Grpc.OrderModifyReply> __Method_OrderModify = new grpc::Method<global::Mt4Grpc.OrderModifyRequest, global::Mt4Grpc.OrderModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "OrderModify",
        __Marshaller_mt4grpc_OrderModifyRequest,
        __Marshaller_mt4grpc_OrderModifyReply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mt4Grpc.OrderCloseByRequest, global::Mt4Grpc.OrderCloseByReply> __Method_OrderCloseBy = new grpc::Method<global::Mt4Grpc.OrderCloseByRequest, global::Mt4Grpc.OrderCloseByReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "OrderCloseBy",
        __Marshaller_mt4grpc_OrderCloseByRequest,
        __Marshaller_mt4grpc_OrderCloseByReply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mt4Grpc.OrderDeleteRequest, global::Mt4Grpc.OrderDeleteReply> __Method_OrderDelete = new grpc::Method<global::Mt4Grpc.OrderDeleteRequest, global::Mt4Grpc.OrderDeleteReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "OrderDelete",
        __Marshaller_mt4grpc_OrderDeleteRequest,
        __Marshaller_mt4grpc_OrderDeleteReply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mt4Grpc.OrderCloseRequest, global::Mt4Grpc.OrderCloseReply> __Method_OrderClose = new grpc::Method<global::Mt4Grpc.OrderCloseRequest, global::Mt4Grpc.OrderCloseReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "OrderClose",
        __Marshaller_mt4grpc_OrderCloseRequest,
        __Marshaller_mt4grpc_OrderCloseReply);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Mt4Grpc.Mt4Reflection.Descriptor.Services[4]; }
    }

    /// <summary>Base class for server-side implementations of Trading</summary>
    [grpc::BindServiceMethod(typeof(Trading), "BindService")]
    public abstract partial class TradingBase
    {
      /// <summary>
      /// Send market or pending order
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4", &lt;br>
      ///  "symbol": "EURUSD", &lt;br>
      ///  "operation": "Buy", &lt;br>
      ///  "volume": "0.1", &lt;br>
      ///  "price": "0", &lt;br>
      ///  "slippage": "0", &lt;br>
      ///  "stoploss": "0", &lt;br>
      ///  "takeprofit": "0", &lt;br>
      ///  "magic": "0", &lt;br>
      ///  "placedType": "Client" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Mt4Grpc.OrderSendReply> OrderSend(global::Mt4Grpc.OrderSendRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Modify market or pending order
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4", &lt;br>
      ///  "ticket": "0", &lt;br>
      ///  "stoploss": "0", &lt;br>
      ///  "takeprofit": "0", &lt;br>
      ///  "price": "0" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Mt4Grpc.OrderModifyReply> OrderModify(global::Mt4Grpc.OrderModifyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Close market order with opposite market order
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4", &lt;br>
      ///  "ticket1": "0", &lt;br>
      ///  "ticket2": "0" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Mt4Grpc.OrderCloseByReply> OrderCloseBy(global::Mt4Grpc.OrderCloseByRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete pending order
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4", &lt;br>
      ///  "ticket": "0" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Mt4Grpc.OrderDeleteReply> OrderDelete(global::Mt4Grpc.OrderDeleteRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Close market order with opposite market order
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4", &lt;br>
      ///  "ticket": "0", &lt;br>
      ///  "lots": "0", &lt;br>
      ///  "price": "0", &lt;br>
      ///  "slippage": "0" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Mt4Grpc.OrderCloseReply> OrderClose(global::Mt4Grpc.OrderCloseRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Trading</summary>
    public partial class TradingClient : grpc::ClientBase<TradingClient>
    {
      /// <summary>Creates a new client for Trading</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public TradingClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Trading that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public TradingClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected TradingClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected TradingClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Send market or pending order
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4", &lt;br>
      ///  "symbol": "EURUSD", &lt;br>
      ///  "operation": "Buy", &lt;br>
      ///  "volume": "0.1", &lt;br>
      ///  "price": "0", &lt;br>
      ///  "slippage": "0", &lt;br>
      ///  "stoploss": "0", &lt;br>
      ///  "takeprofit": "0", &lt;br>
      ///  "magic": "0", &lt;br>
      ///  "placedType": "Client" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mt4Grpc.OrderSendReply OrderSend(global::Mt4Grpc.OrderSendRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OrderSend(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Send market or pending order
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4", &lt;br>
      ///  "symbol": "EURUSD", &lt;br>
      ///  "operation": "Buy", &lt;br>
      ///  "volume": "0.1", &lt;br>
      ///  "price": "0", &lt;br>
      ///  "slippage": "0", &lt;br>
      ///  "stoploss": "0", &lt;br>
      ///  "takeprofit": "0", &lt;br>
      ///  "magic": "0", &lt;br>
      ///  "placedType": "Client" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mt4Grpc.OrderSendReply OrderSend(global::Mt4Grpc.OrderSendRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_OrderSend, null, options, request);
      }
      /// <summary>
      /// Send market or pending order
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4", &lt;br>
      ///  "symbol": "EURUSD", &lt;br>
      ///  "operation": "Buy", &lt;br>
      ///  "volume": "0.1", &lt;br>
      ///  "price": "0", &lt;br>
      ///  "slippage": "0", &lt;br>
      ///  "stoploss": "0", &lt;br>
      ///  "takeprofit": "0", &lt;br>
      ///  "magic": "0", &lt;br>
      ///  "placedType": "Client" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mt4Grpc.OrderSendReply> OrderSendAsync(global::Mt4Grpc.OrderSendRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OrderSendAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Send market or pending order
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4", &lt;br>
      ///  "symbol": "EURUSD", &lt;br>
      ///  "operation": "Buy", &lt;br>
      ///  "volume": "0.1", &lt;br>
      ///  "price": "0", &lt;br>
      ///  "slippage": "0", &lt;br>
      ///  "stoploss": "0", &lt;br>
      ///  "takeprofit": "0", &lt;br>
      ///  "magic": "0", &lt;br>
      ///  "placedType": "Client" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mt4Grpc.OrderSendReply> OrderSendAsync(global::Mt4Grpc.OrderSendRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_OrderSend, null, options, request);
      }
      /// <summary>
      /// Modify market or pending order
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4", &lt;br>
      ///  "ticket": "0", &lt;br>
      ///  "stoploss": "0", &lt;br>
      ///  "takeprofit": "0", &lt;br>
      ///  "price": "0" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mt4Grpc.OrderModifyReply OrderModify(global::Mt4Grpc.OrderModifyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OrderModify(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Modify market or pending order
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4", &lt;br>
      ///  "ticket": "0", &lt;br>
      ///  "stoploss": "0", &lt;br>
      ///  "takeprofit": "0", &lt;br>
      ///  "price": "0" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mt4Grpc.OrderModifyReply OrderModify(global::Mt4Grpc.OrderModifyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_OrderModify, null, options, request);
      }
      /// <summary>
      /// Modify market or pending order
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4", &lt;br>
      ///  "ticket": "0", &lt;br>
      ///  "stoploss": "0", &lt;br>
      ///  "takeprofit": "0", &lt;br>
      ///  "price": "0" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mt4Grpc.OrderModifyReply> OrderModifyAsync(global::Mt4Grpc.OrderModifyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OrderModifyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Modify market or pending order
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4", &lt;br>
      ///  "ticket": "0", &lt;br>
      ///  "stoploss": "0", &lt;br>
      ///  "takeprofit": "0", &lt;br>
      ///  "price": "0" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mt4Grpc.OrderModifyReply> OrderModifyAsync(global::Mt4Grpc.OrderModifyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_OrderModify, null, options, request);
      }
      /// <summary>
      /// Close market order with opposite market order
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4", &lt;br>
      ///  "ticket1": "0", &lt;br>
      ///  "ticket2": "0" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mt4Grpc.OrderCloseByReply OrderCloseBy(global::Mt4Grpc.OrderCloseByRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OrderCloseBy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Close market order with opposite market order
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4", &lt;br>
      ///  "ticket1": "0", &lt;br>
      ///  "ticket2": "0" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mt4Grpc.OrderCloseByReply OrderCloseBy(global::Mt4Grpc.OrderCloseByRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_OrderCloseBy, null, options, request);
      }
      /// <summary>
      /// Close market order with opposite market order
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4", &lt;br>
      ///  "ticket1": "0", &lt;br>
      ///  "ticket2": "0" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mt4Grpc.OrderCloseByReply> OrderCloseByAsync(global::Mt4Grpc.OrderCloseByRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OrderCloseByAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Close market order with opposite market order
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4", &lt;br>
      ///  "ticket1": "0", &lt;br>
      ///  "ticket2": "0" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mt4Grpc.OrderCloseByReply> OrderCloseByAsync(global::Mt4Grpc.OrderCloseByRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_OrderCloseBy, null, options, request);
      }
      /// <summary>
      /// Delete pending order
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4", &lt;br>
      ///  "ticket": "0" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mt4Grpc.OrderDeleteReply OrderDelete(global::Mt4Grpc.OrderDeleteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OrderDelete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete pending order
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4", &lt;br>
      ///  "ticket": "0" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mt4Grpc.OrderDeleteReply OrderDelete(global::Mt4Grpc.OrderDeleteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_OrderDelete, null, options, request);
      }
      /// <summary>
      /// Delete pending order
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4", &lt;br>
      ///  "ticket": "0" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mt4Grpc.OrderDeleteReply> OrderDeleteAsync(global::Mt4Grpc.OrderDeleteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OrderDeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete pending order
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4", &lt;br>
      ///  "ticket": "0" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mt4Grpc.OrderDeleteReply> OrderDeleteAsync(global::Mt4Grpc.OrderDeleteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_OrderDelete, null, options, request);
      }
      /// <summary>
      /// Close market order with opposite market order
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4", &lt;br>
      ///  "ticket": "0", &lt;br>
      ///  "lots": "0", &lt;br>
      ///  "price": "0", &lt;br>
      ///  "slippage": "0" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mt4Grpc.OrderCloseReply OrderClose(global::Mt4Grpc.OrderCloseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OrderClose(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Close market order with opposite market order
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4", &lt;br>
      ///  "ticket": "0", &lt;br>
      ///  "lots": "0", &lt;br>
      ///  "price": "0", &lt;br>
      ///  "slippage": "0" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mt4Grpc.OrderCloseReply OrderClose(global::Mt4Grpc.OrderCloseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_OrderClose, null, options, request);
      }
      /// <summary>
      /// Close market order with opposite market order
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4", &lt;br>
      ///  "ticket": "0", &lt;br>
      ///  "lots": "0", &lt;br>
      ///  "price": "0", &lt;br>
      ///  "slippage": "0" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mt4Grpc.OrderCloseReply> OrderCloseAsync(global::Mt4Grpc.OrderCloseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OrderCloseAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Close market order with opposite market order
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4", &lt;br>
      ///  "ticket": "0", &lt;br>
      ///  "lots": "0", &lt;br>
      ///  "price": "0", &lt;br>
      ///  "slippage": "0" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mt4Grpc.OrderCloseReply> OrderCloseAsync(global::Mt4Grpc.OrderCloseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_OrderClose, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override TradingClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new TradingClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(TradingBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_OrderSend, serviceImpl.OrderSend)
          .AddMethod(__Method_OrderModify, serviceImpl.OrderModify)
          .AddMethod(__Method_OrderCloseBy, serviceImpl.OrderCloseBy)
          .AddMethod(__Method_OrderDelete, serviceImpl.OrderDelete)
          .AddMethod(__Method_OrderClose, serviceImpl.OrderClose).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, TradingBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_OrderSend, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mt4Grpc.OrderSendRequest, global::Mt4Grpc.OrderSendReply>(serviceImpl.OrderSend));
      serviceBinder.AddMethod(__Method_OrderModify, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mt4Grpc.OrderModifyRequest, global::Mt4Grpc.OrderModifyReply>(serviceImpl.OrderModify));
      serviceBinder.AddMethod(__Method_OrderCloseBy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mt4Grpc.OrderCloseByRequest, global::Mt4Grpc.OrderCloseByReply>(serviceImpl.OrderCloseBy));
      serviceBinder.AddMethod(__Method_OrderDelete, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mt4Grpc.OrderDeleteRequest, global::Mt4Grpc.OrderDeleteReply>(serviceImpl.OrderDelete));
      serviceBinder.AddMethod(__Method_OrderClose, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mt4Grpc.OrderCloseRequest, global::Mt4Grpc.OrderCloseReply>(serviceImpl.OrderClose));
    }

  }
  public static partial class Streams
  {
    static readonly string __ServiceName = "mt4grpc.Streams";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mt4Grpc.OnOrderUpdateRequest> __Marshaller_mt4grpc_OnOrderUpdateRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mt4Grpc.OnOrderUpdateRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mt4Grpc.OnOrderUpdateReply> __Marshaller_mt4grpc_OnOrderUpdateReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mt4Grpc.OnOrderUpdateReply.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mt4Grpc.OnQuoteRequest> __Marshaller_mt4grpc_OnQuoteRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mt4Grpc.OnQuoteRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mt4Grpc.OnQuoteReply> __Marshaller_mt4grpc_OnQuoteReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mt4Grpc.OnQuoteReply.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mt4Grpc.OnTickValueRequest> __Marshaller_mt4grpc_OnTickValueRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mt4Grpc.OnTickValueRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mt4Grpc.OnTickValueReply> __Marshaller_mt4grpc_OnTickValueReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mt4Grpc.OnTickValueReply.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mt4Grpc.OnOrderProfitRequest> __Marshaller_mt4grpc_OnOrderProfitRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mt4Grpc.OnOrderProfitRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mt4Grpc.OnOrderProfitReply> __Marshaller_mt4grpc_OnOrderProfitReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mt4Grpc.OnOrderProfitReply.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mt4Grpc.OnOrderUpdateRequest, global::Mt4Grpc.OnOrderUpdateReply> __Method_OnOrderUpdate = new grpc::Method<global::Mt4Grpc.OnOrderUpdateRequest, global::Mt4Grpc.OnOrderUpdateReply>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "OnOrderUpdate",
        __Marshaller_mt4grpc_OnOrderUpdateRequest,
        __Marshaller_mt4grpc_OnOrderUpdateReply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mt4Grpc.OnQuoteRequest, global::Mt4Grpc.OnQuoteReply> __Method_OnQuote = new grpc::Method<global::Mt4Grpc.OnQuoteRequest, global::Mt4Grpc.OnQuoteReply>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "OnQuote",
        __Marshaller_mt4grpc_OnQuoteRequest,
        __Marshaller_mt4grpc_OnQuoteReply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mt4Grpc.OnTickValueRequest, global::Mt4Grpc.OnTickValueReply> __Method_OnTickValue = new grpc::Method<global::Mt4Grpc.OnTickValueRequest, global::Mt4Grpc.OnTickValueReply>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "OnTickValue",
        __Marshaller_mt4grpc_OnTickValueRequest,
        __Marshaller_mt4grpc_OnTickValueReply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mt4Grpc.OnOrderProfitRequest, global::Mt4Grpc.OnOrderProfitReply> __Method_OnOrderProfit = new grpc::Method<global::Mt4Grpc.OnOrderProfitRequest, global::Mt4Grpc.OnOrderProfitReply>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "OnOrderProfit",
        __Marshaller_mt4grpc_OnOrderProfitRequest,
        __Marshaller_mt4grpc_OnOrderProfitReply);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Mt4Grpc.Mt4Reflection.Descriptor.Services[5]; }
    }

    /// <summary>Base class for server-side implementations of Streams</summary>
    [grpc::BindServiceMethod(typeof(Streams), "BindService")]
    public abstract partial class StreamsBase
    {
      /// <summary>
      /// All trading activity on accont.
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task OnOrderUpdate(global::Mt4Grpc.OnOrderUpdateRequest request, grpc::IServerStreamWriter<global::Mt4Grpc.OnOrderUpdateReply> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Real time quotes.
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task OnQuote(global::Mt4Grpc.OnQuoteRequest request, grpc::IServerStreamWriter<global::Mt4Grpc.OnQuoteReply> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Real time quotes.
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task OnTickValue(global::Mt4Grpc.OnTickValueRequest request, grpc::IServerStreamWriter<global::Mt4Grpc.OnTickValueReply> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Orders profits updates.
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task OnOrderProfit(global::Mt4Grpc.OnOrderProfitRequest request, grpc::IServerStreamWriter<global::Mt4Grpc.OnOrderProfitReply> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Streams</summary>
    public partial class StreamsClient : grpc::ClientBase<StreamsClient>
    {
      /// <summary>Creates a new client for Streams</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public StreamsClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Streams that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public StreamsClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected StreamsClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected StreamsClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// All trading activity on accont.
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Mt4Grpc.OnOrderUpdateReply> OnOrderUpdate(global::Mt4Grpc.OnOrderUpdateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OnOrderUpdate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// All trading activity on accont.
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Mt4Grpc.OnOrderUpdateReply> OnOrderUpdate(global::Mt4Grpc.OnOrderUpdateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_OnOrderUpdate, null, options, request);
      }
      /// <summary>
      /// Real time quotes.
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Mt4Grpc.OnQuoteReply> OnQuote(global::Mt4Grpc.OnQuoteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OnQuote(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Real time quotes.
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Mt4Grpc.OnQuoteReply> OnQuote(global::Mt4Grpc.OnQuoteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_OnQuote, null, options, request);
      }
      /// <summary>
      /// Real time quotes.
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Mt4Grpc.OnTickValueReply> OnTickValue(global::Mt4Grpc.OnTickValueRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OnTickValue(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Real time quotes.
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Mt4Grpc.OnTickValueReply> OnTickValue(global::Mt4Grpc.OnTickValueRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_OnTickValue, null, options, request);
      }
      /// <summary>
      /// Orders profits updates.
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Mt4Grpc.OnOrderProfitReply> OnOrderProfit(global::Mt4Grpc.OnOrderProfitRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OnOrderProfit(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Orders profits updates.
      /// &lt;br> [Example] &lt;br>
      /// { &lt;br>
      ///  "id": "demo-token-mt4" &lt;br>
      /// }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Mt4Grpc.OnOrderProfitReply> OnOrderProfit(global::Mt4Grpc.OnOrderProfitRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_OnOrderProfit, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override StreamsClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new StreamsClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(StreamsBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_OnOrderUpdate, serviceImpl.OnOrderUpdate)
          .AddMethod(__Method_OnQuote, serviceImpl.OnQuote)
          .AddMethod(__Method_OnTickValue, serviceImpl.OnTickValue)
          .AddMethod(__Method_OnOrderProfit, serviceImpl.OnOrderProfit).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, StreamsBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_OnOrderUpdate, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Mt4Grpc.OnOrderUpdateRequest, global::Mt4Grpc.OnOrderUpdateReply>(serviceImpl.OnOrderUpdate));
      serviceBinder.AddMethod(__Method_OnQuote, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Mt4Grpc.OnQuoteRequest, global::Mt4Grpc.OnQuoteReply>(serviceImpl.OnQuote));
      serviceBinder.AddMethod(__Method_OnTickValue, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Mt4Grpc.OnTickValueRequest, global::Mt4Grpc.OnTickValueReply>(serviceImpl.OnTickValue));
      serviceBinder.AddMethod(__Method_OnOrderProfit, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Mt4Grpc.OnOrderProfitRequest, global::Mt4Grpc.OnOrderProfitReply>(serviceImpl.OnOrderProfit));
    }

  }
}
#endregion
